{
    "name": "boundary",
    "displayName": "Boundary",
    "description": "A Pulumi package for creating and managing boundary resources.",
    "keywords": [
        "boundary",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`boundary` Terraform Provider](https://github.com/terraform-providers/terraform-provider-boundary).",
    "repository": "https://github.com/joerit/pulumi-boundary",
    "publisher": "WEWIS Terminator",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/joerit/pulumi-boundary/sdk/go/boundary",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing boundary resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-boundary)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-boundary` repo](https://github.com/joerit/pulumi-boundary/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-boundary` repo](https://github.com/terraform-providers/terraform-provider-boundary/issues).",
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-boundary)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-boundary` repo](https://github.com/joerit/pulumi-boundary/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-boundary` repo](https://github.com/terraform-providers/terraform-provider-boundary/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "addr": {
                "type": "string",
                "description": "The base url of the Boundary API, e.g. \"http://127.0.0.1:9200\". If not set, it will be read from the \"BOUNDARY_ADDR\" env\nvar.\n"
            },
            "authMethodId": {
                "type": "string",
                "description": "The auth method ID e.g. ampw_1234567890. If not set, the default auth method for the given scope ID will be used.\n"
            },
            "authMethodLoginName": {
                "type": "string",
                "description": "The auth method login name for password-style or ldap-style auth methods\n"
            },
            "authMethodPassword": {
                "type": "string",
                "description": "The auth method password for password-style or ldap-style auth methods\n"
            },
            "passwordAuthMethodLoginName": {
                "type": "string",
                "description": "The auth method login name for password-style auth methods\n",
                "deprecationMessage": "Use auth_method_login_name instead"
            },
            "passwordAuthMethodPassword": {
                "type": "string",
                "description": "The auth method password for password-style auth methods\n",
                "deprecationMessage": "Use auth_method_password instead"
            },
            "pluginExecutionDir": {
                "type": "string",
                "description": "Specifies a directory that the Boundary provider can use to write and execute its built-in plugins.\n"
            },
            "recoveryKmsHcl": {
                "type": "string",
                "description": "Can be a heredoc string or a path on disk. If set, the string/file will be parsed as HCL and used with the recovery KMS\nmechanism. While this is set, it will override any other authentication information; the KMS mechanism will always be\nused. See Boundary's KMS docs for examples: https://boundaryproject.io/docs/configuration/kms\n"
            },
            "scopeId": {
                "type": "string",
                "description": "The scope ID for the default auth method.\n"
            },
            "tlsInsecure": {
                "type": "boolean",
                "description": "When set to true, does not validate the Boundary API endpoint certificate\n"
            },
            "token": {
                "type": "string",
                "description": "The Boundary token to use, as a string or path on disk containing just the string. If set, the token read here will be\nused in place of authenticating with the auth method specified in \"auth_method_id\", although the recovery KMS mechanism\nwill still override this. Can also be set with the BOUNDARY_TOKEN environment variable.\n"
            }
        },
        "defaults": [
            "addr"
        ]
    },
    "types": {
        "boundary:index/getAccountScope:getAccountScope": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentScopeId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "parentScopeId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "boundary:index/getAuthMethodScope:getAuthMethodScope": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentScopeId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "parentScopeId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "boundary:index/getGroupScope:getGroupScope": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentScopeId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "parentScopeId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "boundary:index/getUserScope:getUserScope": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentScopeId": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "parentScopeId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "boundary:region/region:Region": {
            "type": "string",
            "enum": [
                {
                    "name": "here",
                    "value": "HERE"
                },
                {
                    "name": "overThere",
                    "value": "OVER_THERE"
                }
            ]
        }
    },
    "provider": {
        "description": "The provider type for the boundary package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "addr": {
                "type": "string",
                "description": "The base url of the Boundary API, e.g. \"http://127.0.0.1:9200\". If not set, it will be read from the \"BOUNDARY_ADDR\" env\nvar.\n"
            },
            "authMethodId": {
                "type": "string",
                "description": "The auth method ID e.g. ampw_1234567890. If not set, the default auth method for the given scope ID will be used.\n"
            },
            "authMethodLoginName": {
                "type": "string",
                "description": "The auth method login name for password-style or ldap-style auth methods\n"
            },
            "authMethodPassword": {
                "type": "string",
                "description": "The auth method password for password-style or ldap-style auth methods\n"
            },
            "passwordAuthMethodLoginName": {
                "type": "string",
                "description": "The auth method login name for password-style auth methods\n",
                "deprecationMessage": "Use auth_method_login_name instead"
            },
            "passwordAuthMethodPassword": {
                "type": "string",
                "description": "The auth method password for password-style auth methods\n",
                "deprecationMessage": "Use auth_method_password instead"
            },
            "pluginExecutionDir": {
                "type": "string",
                "description": "Specifies a directory that the Boundary provider can use to write and execute its built-in plugins.\n"
            },
            "recoveryKmsHcl": {
                "type": "string",
                "description": "Can be a heredoc string or a path on disk. If set, the string/file will be parsed as HCL and used with the recovery KMS\nmechanism. While this is set, it will override any other authentication information; the KMS mechanism will always be\nused. See Boundary's KMS docs for examples: https://boundaryproject.io/docs/configuration/kms\n"
            },
            "scopeId": {
                "type": "string",
                "description": "The scope ID for the default auth method.\n"
            },
            "tlsInsecure": {
                "type": "boolean",
                "description": "When set to true, does not validate the Boundary API endpoint certificate\n"
            },
            "token": {
                "type": "string",
                "description": "The Boundary token to use, as a string or path on disk containing just the string. If set, the token read here will be\nused in place of authenticating with the auth method specified in \"auth_method_id\", although the recovery KMS mechanism\nwill still override this. Can also be set with the BOUNDARY_TOKEN environment variable.\n"
            }
        },
        "required": [
            "addr"
        ],
        "inputProperties": {
            "addr": {
                "type": "string",
                "description": "The base url of the Boundary API, e.g. \"http://127.0.0.1:9200\". If not set, it will be read from the \"BOUNDARY_ADDR\" env\nvar.\n"
            },
            "authMethodId": {
                "type": "string",
                "description": "The auth method ID e.g. ampw_1234567890. If not set, the default auth method for the given scope ID will be used.\n"
            },
            "authMethodLoginName": {
                "type": "string",
                "description": "The auth method login name for password-style or ldap-style auth methods\n"
            },
            "authMethodPassword": {
                "type": "string",
                "description": "The auth method password for password-style or ldap-style auth methods\n"
            },
            "passwordAuthMethodLoginName": {
                "type": "string",
                "description": "The auth method login name for password-style auth methods\n",
                "deprecationMessage": "Use auth_method_login_name instead"
            },
            "passwordAuthMethodPassword": {
                "type": "string",
                "description": "The auth method password for password-style auth methods\n",
                "deprecationMessage": "Use auth_method_password instead"
            },
            "pluginExecutionDir": {
                "type": "string",
                "description": "Specifies a directory that the Boundary provider can use to write and execute its built-in plugins.\n"
            },
            "recoveryKmsHcl": {
                "type": "string",
                "description": "Can be a heredoc string or a path on disk. If set, the string/file will be parsed as HCL and used with the recovery KMS\nmechanism. While this is set, it will override any other authentication information; the KMS mechanism will always be\nused. See Boundary's KMS docs for examples: https://boundaryproject.io/docs/configuration/kms\n"
            },
            "scopeId": {
                "type": "string",
                "description": "The scope ID for the default auth method.\n"
            },
            "tlsInsecure": {
                "type": "boolean",
                "description": "When set to true, does not validate the Boundary API endpoint certificate\n"
            },
            "token": {
                "type": "string",
                "description": "The Boundary token to use, as a string or path on disk containing just the string. If set, the token read here will be\nused in place of authenticating with the auth method specified in \"auth_method_id\", although the recovery KMS mechanism\nwill still override this. Can also be set with the BOUNDARY_TOKEN environment variable.\n"
            }
        },
        "requiredInputs": [
            "addr"
        ]
    },
    "resources": {
        "boundary:index/account:Account": {
            "properties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The account description.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The login name for this account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The account name. Defaults to the resource name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The account password. Only set on create, changes will not be reflected when updating account.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The resource type.\n"
                }
            },
            "required": [
                "authMethodId",
                "name",
                "type"
            ],
            "inputProperties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The account description.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The login name for this account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The account name. Defaults to the resource name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The account password. Only set on create, changes will not be reflected when updating account.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The resource type.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "authMethodId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "authMethodId": {
                        "type": "string",
                        "description": "The resource ID for the auth method.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The account description.\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The login name for this account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The account name. Defaults to the resource name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The account password. Only set on create, changes will not be reflected when updating account.\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The resource type.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/accountLdap:AccountLdap": {
            "properties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The account description.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The login name for this account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The account name. Defaults to the resource name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The resource type.\n",
                    "deprecationMessage": "The value for this field will be infered since 'ldap' is the only possible value."
                }
            },
            "required": [
                "authMethodId",
                "name"
            ],
            "inputProperties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The account description.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The login name for this account.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The account name. Defaults to the resource name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The resource type.\n",
                    "deprecationMessage": "The value for this field will be infered since 'ldap' is the only possible value.",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "authMethodId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountLdap resources.\n",
                "properties": {
                    "authMethodId": {
                        "type": "string",
                        "description": "The resource ID for the auth method.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The account description.\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The login name for this account.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The account name. Defaults to the resource name.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The resource type.\n",
                        "deprecationMessage": "The value for this field will be infered since 'ldap' is the only possible value.",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/accountOidc:AccountOidc": {
            "properties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The account description.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The OIDC issuer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The account name. Defaults to the resource name.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The OIDC subject.\n"
                }
            },
            "required": [
                "authMethodId",
                "name"
            ],
            "inputProperties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The account description.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The OIDC issuer.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The account name. Defaults to the resource name.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The OIDC subject.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "authMethodId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountOidc resources.\n",
                "properties": {
                    "authMethodId": {
                        "type": "string",
                        "description": "The resource ID for the auth method.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The account description.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The OIDC issuer.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The account name. Defaults to the resource name.\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The OIDC subject.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/accountPassword:AccountPassword": {
            "properties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The account description.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The login name for this account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The account name. Defaults to the resource name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The account password. Only set on create, changes will not be reflected when updating account.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The resource type.\n",
                    "deprecationMessage": "The value for this field will be infered since 'password' is the only possible value."
                }
            },
            "required": [
                "authMethodId",
                "name"
            ],
            "inputProperties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The account description.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The login name for this account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The account name. Defaults to the resource name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The account password. Only set on create, changes will not be reflected when updating account.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The resource type.\n",
                    "deprecationMessage": "The value for this field will be infered since 'password' is the only possible value.",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "authMethodId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountPassword resources.\n",
                "properties": {
                    "authMethodId": {
                        "type": "string",
                        "description": "The resource ID for the auth method.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The account description.\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The login name for this account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The account name. Defaults to the resource name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The account password. Only set on create, changes will not be reflected when updating account.\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The resource type.\n",
                        "deprecationMessage": "The value for this field will be infered since 'password' is the only possible value.",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/aliasTarget:AliasTarget": {
            "properties": {
                "authorizeSessionHostId": {
                    "type": "string",
                    "description": "The host id to pass to Boundary when performing an authorize session action.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The alias description.\n"
                },
                "destinationId": {
                    "type": "string",
                    "description": "The destination of the alias.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The alias name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of alias; hardcoded.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the alias.\n"
                }
            },
            "required": [
                "name",
                "scopeId",
                "value"
            ],
            "inputProperties": {
                "authorizeSessionHostId": {
                    "type": "string",
                    "description": "The host id to pass to Boundary when performing an authorize session action.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The alias description.\n"
                },
                "destinationId": {
                    "type": "string",
                    "description": "The destination of the alias.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The alias name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of alias; hardcoded.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the alias.\n"
                }
            },
            "requiredInputs": [
                "scopeId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AliasTarget resources.\n",
                "properties": {
                    "authorizeSessionHostId": {
                        "type": "string",
                        "description": "The host id to pass to Boundary when performing an authorize session action.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The alias description.\n"
                    },
                    "destinationId": {
                        "type": "string",
                        "description": "The destination of the alias.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The alias name. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of alias; hardcoded.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the alias.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/authMethod:AuthMethod": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The auth method description.\n"
                },
                "minLoginNameLength": {
                    "type": "integer",
                    "description": "The minimum login name length.\n",
                    "deprecationMessage": "Will be removed in favor of using attributes parameter"
                },
                "minPasswordLength": {
                    "type": "integer",
                    "description": "The minimum password length.\n",
                    "deprecationMessage": "Will be removed in favor of using attributes parameter"
                },
                "name": {
                    "type": "string",
                    "description": "The auth method name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The resource type.\n"
                }
            },
            "required": [
                "minLoginNameLength",
                "minPasswordLength",
                "name",
                "scopeId",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The auth method description.\n"
                },
                "minLoginNameLength": {
                    "type": "integer",
                    "description": "The minimum login name length.\n",
                    "deprecationMessage": "Will be removed in favor of using attributes parameter"
                },
                "minPasswordLength": {
                    "type": "integer",
                    "description": "The minimum password length.\n",
                    "deprecationMessage": "Will be removed in favor of using attributes parameter"
                },
                "name": {
                    "type": "string",
                    "description": "The auth method name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The resource type.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scopeId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthMethod resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The auth method description.\n"
                    },
                    "minLoginNameLength": {
                        "type": "integer",
                        "description": "The minimum login name length.\n",
                        "deprecationMessage": "Will be removed in favor of using attributes parameter"
                    },
                    "minPasswordLength": {
                        "type": "integer",
                        "description": "The minimum password length.\n",
                        "deprecationMessage": "Will be removed in favor of using attributes parameter"
                    },
                    "name": {
                        "type": "string",
                        "description": "The auth method name. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The resource type.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/authMethodLdap:AuthMethodLdap": {
            "properties": {
                "accountAttributeMaps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Account attribute maps fullname and email.\n"
                },
                "anonGroupSearch": {
                    "type": "boolean",
                    "description": "Use anon bind when performing LDAP group searches (optional).\n"
                },
                "bindDn": {
                    "type": "string",
                    "description": "The distinguished name of entry to bind when performing user and group searches (optional).\n"
                },
                "bindPassword": {
                    "type": "string",
                    "description": "The password to use along with bind-dn performing user and group searches (optional).\n"
                },
                "bindPasswordHmac": {
                    "type": "string",
                    "description": "The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of\nthe value.\n"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP\nserver(optional). This may be specified multiple times\n"
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP\nserver(optional).\n"
                },
                "clientCertificateKey": {
                    "type": "string",
                    "description": "PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).\n"
                },
                "clientCertificateKeyHmac": {
                    "type": "string",
                    "description": "The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial\nsetting of the value.\n"
                },
                "dereferenceAliases": {
                    "type": "string",
                    "description": "Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching,\nDerefFindingBaseObj, and DerefAlways (optional).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The auth method description.\n"
                },
                "discoverDn": {
                    "type": "boolean",
                    "description": "Use anon bind to discover the bind DN of a user (optional).\n"
                },
                "enableGroups": {
                    "type": "boolean",
                    "description": "Find the authenticated user's groups during authentication (optional).\n"
                },
                "groupAttr": {
                    "type": "string",
                    "description": "The attribute that enumerates a user's group membership from entries returned by a group search (optional).\n"
                },
                "groupDn": {
                    "type": "string",
                    "description": "The base DN under which to perform group search.\n"
                },
                "groupFilter": {
                    "type": "string",
                    "description": "A go template used to construct a LDAP group search filter (optional).\n"
                },
                "insecureTls": {
                    "type": "boolean",
                    "description": "Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.\n"
                },
                "isPrimaryForScope": {
                    "type": "boolean",
                    "description": "When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for\na scope means the the user will be automatically created when they login using an LDAP account.\n"
                },
                "maximumPageSize": {
                    "type": "integer",
                    "description": "MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups\n(optional).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The auth method name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID.\n"
                },
                "startTls": {
                    "type": "boolean",
                    "description": "Issue StartTLS command after connecting (optional).\n"
                },
                "state": {
                    "type": "string",
                    "description": "Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of auth method; hardcoded.\n"
                },
                "upnDomain": {
                    "type": "string",
                    "description": "The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The LDAP URLs that specify LDAP servers to connect to (required). May be specified multiple times.\n"
                },
                "useTokenGroups": {
                    "type": "boolean",
                    "description": "Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).\n"
                },
                "userAttr": {
                    "type": "string",
                    "description": "The attribute on user entry matching the username passed when authenticating (optional).\n"
                },
                "userDn": {
                    "type": "string",
                    "description": "The base DN under which to perform user search (optional).\n"
                },
                "userFilter": {
                    "type": "string",
                    "description": "A go template used to construct a LDAP user search filter (optional).\n"
                }
            },
            "required": [
                "bindPasswordHmac",
                "clientCertificateKeyHmac",
                "dereferenceAliases",
                "name",
                "scopeId",
                "state"
            ],
            "inputProperties": {
                "accountAttributeMaps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Account attribute maps fullname and email.\n"
                },
                "anonGroupSearch": {
                    "type": "boolean",
                    "description": "Use anon bind when performing LDAP group searches (optional).\n"
                },
                "bindDn": {
                    "type": "string",
                    "description": "The distinguished name of entry to bind when performing user and group searches (optional).\n"
                },
                "bindPassword": {
                    "type": "string",
                    "description": "The password to use along with bind-dn performing user and group searches (optional).\n"
                },
                "bindPasswordHmac": {
                    "type": "string",
                    "description": "The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of\nthe value.\n"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP\nserver(optional). This may be specified multiple times\n"
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP\nserver(optional).\n"
                },
                "clientCertificateKey": {
                    "type": "string",
                    "description": "PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).\n"
                },
                "clientCertificateKeyHmac": {
                    "type": "string",
                    "description": "The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial\nsetting of the value.\n"
                },
                "dereferenceAliases": {
                    "type": "string",
                    "description": "Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching,\nDerefFindingBaseObj, and DerefAlways (optional).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The auth method description.\n"
                },
                "discoverDn": {
                    "type": "boolean",
                    "description": "Use anon bind to discover the bind DN of a user (optional).\n"
                },
                "enableGroups": {
                    "type": "boolean",
                    "description": "Find the authenticated user's groups during authentication (optional).\n"
                },
                "groupAttr": {
                    "type": "string",
                    "description": "The attribute that enumerates a user's group membership from entries returned by a group search (optional).\n"
                },
                "groupDn": {
                    "type": "string",
                    "description": "The base DN under which to perform group search.\n"
                },
                "groupFilter": {
                    "type": "string",
                    "description": "A go template used to construct a LDAP group search filter (optional).\n"
                },
                "insecureTls": {
                    "type": "boolean",
                    "description": "Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.\n"
                },
                "isPrimaryForScope": {
                    "type": "boolean",
                    "description": "When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for\na scope means the the user will be automatically created when they login using an LDAP account.\n"
                },
                "maximumPageSize": {
                    "type": "integer",
                    "description": "MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups\n(optional).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The auth method name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID.\n",
                    "willReplaceOnChanges": true
                },
                "startTls": {
                    "type": "boolean",
                    "description": "Issue StartTLS command after connecting (optional).\n"
                },
                "state": {
                    "type": "string",
                    "description": "Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of auth method; hardcoded.\n"
                },
                "upnDomain": {
                    "type": "string",
                    "description": "The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The LDAP URLs that specify LDAP servers to connect to (required). May be specified multiple times.\n"
                },
                "useTokenGroups": {
                    "type": "boolean",
                    "description": "Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).\n"
                },
                "userAttr": {
                    "type": "string",
                    "description": "The attribute on user entry matching the username passed when authenticating (optional).\n"
                },
                "userDn": {
                    "type": "string",
                    "description": "The base DN under which to perform user search (optional).\n"
                },
                "userFilter": {
                    "type": "string",
                    "description": "A go template used to construct a LDAP user search filter (optional).\n"
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthMethodLdap resources.\n",
                "properties": {
                    "accountAttributeMaps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Account attribute maps fullname and email.\n"
                    },
                    "anonGroupSearch": {
                        "type": "boolean",
                        "description": "Use anon bind when performing LDAP group searches (optional).\n"
                    },
                    "bindDn": {
                        "type": "string",
                        "description": "The distinguished name of entry to bind when performing user and group searches (optional).\n"
                    },
                    "bindPassword": {
                        "type": "string",
                        "description": "The password to use along with bind-dn performing user and group searches (optional).\n"
                    },
                    "bindPasswordHmac": {
                        "type": "string",
                        "description": "The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of\nthe value.\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP\nserver(optional). This may be specified multiple times\n"
                    },
                    "clientCertificate": {
                        "type": "string",
                        "description": "PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP\nserver(optional).\n"
                    },
                    "clientCertificateKey": {
                        "type": "string",
                        "description": "PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).\n"
                    },
                    "clientCertificateKeyHmac": {
                        "type": "string",
                        "description": "The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial\nsetting of the value.\n"
                    },
                    "dereferenceAliases": {
                        "type": "string",
                        "description": "Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching,\nDerefFindingBaseObj, and DerefAlways (optional).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The auth method description.\n"
                    },
                    "discoverDn": {
                        "type": "boolean",
                        "description": "Use anon bind to discover the bind DN of a user (optional).\n"
                    },
                    "enableGroups": {
                        "type": "boolean",
                        "description": "Find the authenticated user's groups during authentication (optional).\n"
                    },
                    "groupAttr": {
                        "type": "string",
                        "description": "The attribute that enumerates a user's group membership from entries returned by a group search (optional).\n"
                    },
                    "groupDn": {
                        "type": "string",
                        "description": "The base DN under which to perform group search.\n"
                    },
                    "groupFilter": {
                        "type": "string",
                        "description": "A go template used to construct a LDAP group search filter (optional).\n"
                    },
                    "insecureTls": {
                        "type": "boolean",
                        "description": "Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.\n"
                    },
                    "isPrimaryForScope": {
                        "type": "boolean",
                        "description": "When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for\na scope means the the user will be automatically created when they login using an LDAP account.\n"
                    },
                    "maximumPageSize": {
                        "type": "integer",
                        "description": "MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups\n(optional).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The auth method name. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "startTls": {
                        "type": "boolean",
                        "description": "Issue StartTLS command after connecting (optional).\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of auth method; hardcoded.\n"
                    },
                    "upnDomain": {
                        "type": "string",
                        "description": "The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).\n"
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The LDAP URLs that specify LDAP servers to connect to (required). May be specified multiple times.\n"
                    },
                    "useTokenGroups": {
                        "type": "boolean",
                        "description": "Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).\n"
                    },
                    "userAttr": {
                        "type": "string",
                        "description": "The attribute on user entry matching the username passed when authenticating (optional).\n"
                    },
                    "userDn": {
                        "type": "string",
                        "description": "The base DN under which to perform user search (optional).\n"
                    },
                    "userFilter": {
                        "type": "string",
                        "description": "A go template used to construct a LDAP user search filter (optional).\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/authMethodOidc:AuthMethodOidc": {
            "properties": {
                "accountClaimMaps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Account claim maps for the to_claim of sub.\n"
                },
                "allowedAudiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Audiences for which the provider responses will be allowed\n"
                },
                "apiUrlPrefix": {
                    "type": "string",
                    "description": "The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider\ncan reach back to the controller.\n"
                },
                "callbackUrl": {
                    "type": "string",
                    "description": "The URL that should be provided to the IdP for callbacks.\n"
                },
                "claimsScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Claims scopes.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID assigned to this auth method from the provider.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original\nvalue can be removed from configuration.\n",
                    "secret": true
                },
                "clientSecretHmac": {
                    "type": "string",
                    "description": "The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of\nthe value.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The auth method description.\n"
                },
                "disableDiscoveredConfigValidation": {
                    "type": "boolean",
                    "description": "Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the\ninformation here. The validation is only performed at create or update time.\n"
                },
                "idpCaCerts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CA certificates to trust when validating the IdP's token signatures.\n"
                },
                "isPrimaryForScope": {
                    "type": "boolean",
                    "description": "When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for\na scope means the user will be automatically created when they login using an OIDC account.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The issuer corresponding to the provider, which must match the issuer field in generated tokens.\n"
                },
                "maxAge": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "The auth method name. Defaults to the resource name.\n"
                },
                "prompts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The prompts passed to the identity provider to determine whether to prompt the end-user for reauthentication, account\nselection or consent. Please note the values passed are case-sensitive. The valid values are: `none`, `login`, `consent`\nand `select_account`.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID.\n"
                },
                "signingAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed signing algorithms for the provider's issued tokens.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of auth method; hardcoded.\n"
                }
            },
            "required": [
                "callbackUrl",
                "clientSecretHmac",
                "name",
                "scopeId",
                "state"
            ],
            "inputProperties": {
                "accountClaimMaps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Account claim maps for the to_claim of sub.\n",
                    "willReplaceOnChanges": true
                },
                "allowedAudiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Audiences for which the provider responses will be allowed\n"
                },
                "apiUrlPrefix": {
                    "type": "string",
                    "description": "The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider\ncan reach back to the controller.\n"
                },
                "callbackUrl": {
                    "type": "string",
                    "description": "The URL that should be provided to the IdP for callbacks.\n"
                },
                "claimsScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Claims scopes.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID assigned to this auth method from the provider.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original\nvalue can be removed from configuration.\n",
                    "secret": true
                },
                "clientSecretHmac": {
                    "type": "string",
                    "description": "The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of\nthe value.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The auth method description.\n"
                },
                "disableDiscoveredConfigValidation": {
                    "type": "boolean",
                    "description": "Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the\ninformation here. The validation is only performed at create or update time.\n"
                },
                "idpCaCerts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CA certificates to trust when validating the IdP's token signatures.\n"
                },
                "isPrimaryForScope": {
                    "type": "boolean",
                    "description": "When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for\na scope means the user will be automatically created when they login using an OIDC account.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The issuer corresponding to the provider, which must match the issuer field in generated tokens.\n"
                },
                "maxAge": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "The auth method name. Defaults to the resource name.\n"
                },
                "prompts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The prompts passed to the identity provider to determine whether to prompt the end-user for reauthentication, account\nselection or consent. Please note the values passed are case-sensitive. The valid values are: `none`, `login`, `consent`\nand `select_account`.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID.\n",
                    "willReplaceOnChanges": true
                },
                "signingAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed signing algorithms for the provider's issued tokens.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of auth method; hardcoded.\n"
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthMethodOidc resources.\n",
                "properties": {
                    "accountClaimMaps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Account claim maps for the to_claim of sub.\n",
                        "willReplaceOnChanges": true
                    },
                    "allowedAudiences": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Audiences for which the provider responses will be allowed\n"
                    },
                    "apiUrlPrefix": {
                        "type": "string",
                        "description": "The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider\ncan reach back to the controller.\n"
                    },
                    "callbackUrl": {
                        "type": "string",
                        "description": "The URL that should be provided to the IdP for callbacks.\n"
                    },
                    "claimsScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Claims scopes.\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "The client ID assigned to this auth method from the provider.\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original\nvalue can be removed from configuration.\n",
                        "secret": true
                    },
                    "clientSecretHmac": {
                        "type": "string",
                        "description": "The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of\nthe value.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The auth method description.\n"
                    },
                    "disableDiscoveredConfigValidation": {
                        "type": "boolean",
                        "description": "Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the\ninformation here. The validation is only performed at create or update time.\n"
                    },
                    "idpCaCerts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of CA certificates to trust when validating the IdP's token signatures.\n"
                    },
                    "isPrimaryForScope": {
                        "type": "boolean",
                        "description": "When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for\na scope means the user will be automatically created when they login using an OIDC account.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The issuer corresponding to the provider, which must match the issuer field in generated tokens.\n"
                    },
                    "maxAge": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "The auth method name. Defaults to the resource name.\n"
                    },
                    "prompts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The prompts passed to the identity provider to determine whether to prompt the end-user for reauthentication, account\nselection or consent. Please note the values passed are case-sensitive. The valid values are: `none`, `login`, `consent`\nand `select_account`.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "signingAlgorithms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed signing algorithms for the provider's issued tokens.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of auth method; hardcoded.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/authMethodPassword:AuthMethodPassword": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The auth method description.\n"
                },
                "minLoginNameLength": {
                    "type": "integer",
                    "description": "The minimum login name length.\n"
                },
                "minPasswordLength": {
                    "type": "integer",
                    "description": "The minimum password length.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The auth method name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The resource type, hardcoded per resource\n"
                }
            },
            "required": [
                "minLoginNameLength",
                "minPasswordLength",
                "name",
                "scopeId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The auth method description.\n"
                },
                "minLoginNameLength": {
                    "type": "integer",
                    "description": "The minimum login name length.\n"
                },
                "minPasswordLength": {
                    "type": "integer",
                    "description": "The minimum password length.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The auth method name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The resource type, hardcoded per resource\n"
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthMethodPassword resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The auth method description.\n"
                    },
                    "minLoginNameLength": {
                        "type": "integer",
                        "description": "The minimum login name length.\n"
                    },
                    "minPasswordLength": {
                        "type": "integer",
                        "description": "The minimum password length.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The auth method name. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The resource type, hardcoded per resource\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/credentialJson:CredentialJson": {
            "properties": {
                "credentialStoreId": {
                    "type": "string",
                    "description": "The credential store in which to save this json credential.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of this json credential.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this json credential. Defaults to the resource name.\n"
                },
                "object": {
                    "type": "string",
                    "description": "The object for the this json credential. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string,\nor a file\n",
                    "secret": true
                },
                "objectHmac": {
                    "type": "string",
                    "description": "The object hmac.\n"
                }
            },
            "required": [
                "credentialStoreId",
                "name",
                "object",
                "objectHmac"
            ],
            "inputProperties": {
                "credentialStoreId": {
                    "type": "string",
                    "description": "The credential store in which to save this json credential.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of this json credential.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this json credential. Defaults to the resource name.\n"
                },
                "object": {
                    "type": "string",
                    "description": "The object for the this json credential. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string,\nor a file\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "credentialStoreId",
                "object"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CredentialJson resources.\n",
                "properties": {
                    "credentialStoreId": {
                        "type": "string",
                        "description": "The credential store in which to save this json credential.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of this json credential.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this json credential. Defaults to the resource name.\n"
                    },
                    "object": {
                        "type": "string",
                        "description": "The object for the this json credential. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string,\nor a file\n",
                        "secret": true
                    },
                    "objectHmac": {
                        "type": "string",
                        "description": "The object hmac.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/credentialLibraryVault:CredentialLibraryVault": {
            "properties": {
                "credentialMappingOverrides": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The credential mapping override.\n"
                },
                "credentialStoreId": {
                    "type": "string",
                    "description": "The ID of the credential store that this library belongs to.\n"
                },
                "credentialType": {
                    "type": "string",
                    "description": "The type of credential the library generates. Cannot be updated on an existing resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The Vault credential library description.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'\n"
                },
                "httpRequestBody": {
                    "type": "string",
                    "description": "The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `http_method` is set\nto `POST`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Vault credential library name. Defaults to the resource name.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path in Vault to request credentials from.\n"
                }
            },
            "required": [
                "credentialStoreId",
                "name",
                "path"
            ],
            "inputProperties": {
                "credentialMappingOverrides": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The credential mapping override.\n"
                },
                "credentialStoreId": {
                    "type": "string",
                    "description": "The ID of the credential store that this library belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "credentialType": {
                    "type": "string",
                    "description": "The type of credential the library generates. Cannot be updated on an existing resource.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The Vault credential library description.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'\n"
                },
                "httpRequestBody": {
                    "type": "string",
                    "description": "The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `http_method` is set\nto `POST`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Vault credential library name. Defaults to the resource name.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path in Vault to request credentials from.\n"
                }
            },
            "requiredInputs": [
                "credentialStoreId",
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CredentialLibraryVault resources.\n",
                "properties": {
                    "credentialMappingOverrides": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The credential mapping override.\n"
                    },
                    "credentialStoreId": {
                        "type": "string",
                        "description": "The ID of the credential store that this library belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "credentialType": {
                        "type": "string",
                        "description": "The type of credential the library generates. Cannot be updated on an existing resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The Vault credential library description.\n"
                    },
                    "httpMethod": {
                        "type": "string",
                        "description": "The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'\n"
                    },
                    "httpRequestBody": {
                        "type": "string",
                        "description": "The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `http_method` is set\nto `POST`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Vault credential library name. Defaults to the resource name.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path in Vault to request credentials from.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/credentialLibraryVaultSshCertificate:CredentialLibraryVaultSshCertificate": {
            "properties": {
                "additionalValidPrincipals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Principals to be signed as \"valid_principles\" in addition to username.\n"
                },
                "credentialStoreId": {
                    "type": "string",
                    "description": "The ID of the credential store that this library belongs to.\n"
                },
                "criticalOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies a map of the critical options that the certificate should be signed for.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The Vault credential library description.\n"
                },
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies a map of the extensions that the certificate should be signed for.\n"
                },
                "keyBits": {
                    "type": "integer",
                    "description": "Specifies the number of bits to use for the generated keys.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "Specifies the key id a certificate should have.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "Specifies the desired key type; must be ed25519, ecdsa, or rsa.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Vault credential library name. Defaults to the resource name.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path in Vault to request credentials from.\n"
                },
                "ttl": {
                    "type": "string",
                    "description": "Specifies the requested time to live for a certificate returned from the library.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use with the certificate returned by the library.\n"
                }
            },
            "required": [
                "credentialStoreId",
                "name",
                "path",
                "username"
            ],
            "inputProperties": {
                "additionalValidPrincipals": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Principals to be signed as \"valid_principles\" in addition to username.\n"
                },
                "credentialStoreId": {
                    "type": "string",
                    "description": "The ID of the credential store that this library belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "criticalOptions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies a map of the critical options that the certificate should be signed for.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The Vault credential library description.\n"
                },
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies a map of the extensions that the certificate should be signed for.\n"
                },
                "keyBits": {
                    "type": "integer",
                    "description": "Specifies the number of bits to use for the generated keys.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "Specifies the key id a certificate should have.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "Specifies the desired key type; must be ed25519, ecdsa, or rsa.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Vault credential library name. Defaults to the resource name.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path in Vault to request credentials from.\n"
                },
                "ttl": {
                    "type": "string",
                    "description": "Specifies the requested time to live for a certificate returned from the library.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use with the certificate returned by the library.\n"
                }
            },
            "requiredInputs": [
                "credentialStoreId",
                "path",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CredentialLibraryVaultSshCertificate resources.\n",
                "properties": {
                    "additionalValidPrincipals": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Principals to be signed as \"valid_principles\" in addition to username.\n"
                    },
                    "credentialStoreId": {
                        "type": "string",
                        "description": "The ID of the credential store that this library belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "criticalOptions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies a map of the critical options that the certificate should be signed for.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The Vault credential library description.\n"
                    },
                    "extensions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies a map of the extensions that the certificate should be signed for.\n"
                    },
                    "keyBits": {
                        "type": "integer",
                        "description": "Specifies the number of bits to use for the generated keys.\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "Specifies the key id a certificate should have.\n"
                    },
                    "keyType": {
                        "type": "string",
                        "description": "Specifies the desired key type; must be ed25519, ecdsa, or rsa.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Vault credential library name. Defaults to the resource name.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path in Vault to request credentials from.\n"
                    },
                    "ttl": {
                        "type": "string",
                        "description": "Specifies the requested time to live for a certificate returned from the library.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to use with the certificate returned by the library.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/credentialSshPrivateKey:CredentialSshPrivateKey": {
            "properties": {
                "credentialStoreId": {
                    "type": "string",
                    "description": "ID of the credential store this credential belongs to.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the credential.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the credential. Defaults to the resource name.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key associated with the credential.\n",
                    "secret": true
                },
                "privateKeyHmac": {
                    "type": "string",
                    "description": "The private key hmac.\n"
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "The passphrase of the private key associated with the credential.\n",
                    "secret": true
                },
                "privateKeyPassphraseHmac": {
                    "type": "string",
                    "description": "The private key passphrase hmac.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username associated with the credential.\n"
                }
            },
            "required": [
                "credentialStoreId",
                "name",
                "privateKey",
                "privateKeyHmac",
                "privateKeyPassphraseHmac",
                "username"
            ],
            "inputProperties": {
                "credentialStoreId": {
                    "type": "string",
                    "description": "ID of the credential store this credential belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the credential.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the credential. Defaults to the resource name.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key associated with the credential.\n",
                    "secret": true
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "The passphrase of the private key associated with the credential.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "The username associated with the credential.\n"
                }
            },
            "requiredInputs": [
                "credentialStoreId",
                "privateKey",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CredentialSshPrivateKey resources.\n",
                "properties": {
                    "credentialStoreId": {
                        "type": "string",
                        "description": "ID of the credential store this credential belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the credential.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the credential. Defaults to the resource name.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private key associated with the credential.\n",
                        "secret": true
                    },
                    "privateKeyHmac": {
                        "type": "string",
                        "description": "The private key hmac.\n"
                    },
                    "privateKeyPassphrase": {
                        "type": "string",
                        "description": "The passphrase of the private key associated with the credential.\n",
                        "secret": true
                    },
                    "privateKeyPassphraseHmac": {
                        "type": "string",
                        "description": "The private key passphrase hmac.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username associated with the credential.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/credentialStoreStatic:CredentialStoreStatic": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The static credential store description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The static credential store name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope for this credential store.\n"
                }
            },
            "required": [
                "name",
                "scopeId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The static credential store description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The static credential store name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope for this credential store.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CredentialStoreStatic resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The static credential store description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The static credential store name. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope for this credential store.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/credentialStoreVault:CredentialStoreVault": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "A PEM-encoded CA certificate to verify the Vault server's TLS certificate.\n"
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "A PEM-encoded client certificate to use for TLS authentication to the Vault server.\n"
                },
                "clientCertificateKey": {
                    "type": "string",
                    "description": "A PEM-encoded private key matching the client certificate from 'client_certificate'.\n",
                    "secret": true
                },
                "clientCertificateKeyHmac": {
                    "type": "string",
                    "description": "The Vault client certificate key hmac.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The Vault credential store description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Vault credential store name. Defaults to the resource name.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace within Vault to use.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope for this credential store.\n"
                },
                "tlsServerName": {
                    "type": "string",
                    "description": "Name to use as the SNI host when connecting to Vault via TLS.\n"
                },
                "tlsSkipVerify": {
                    "type": "boolean",
                    "description": "Whether or not to skip TLS verification.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A token used for accessing Vault.\n",
                    "secret": true
                },
                "tokenHmac": {
                    "type": "string",
                    "description": "The Vault token hmac.\n"
                },
                "workerFilter": {
                    "type": "string",
                    "description": "HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault\ninstances with Boundary.\n"
                }
            },
            "required": [
                "address",
                "clientCertificateKeyHmac",
                "name",
                "scopeId",
                "token",
                "tokenHmac"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "A PEM-encoded CA certificate to verify the Vault server's TLS certificate.\n"
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "A PEM-encoded client certificate to use for TLS authentication to the Vault server.\n"
                },
                "clientCertificateKey": {
                    "type": "string",
                    "description": "A PEM-encoded private key matching the client certificate from 'client_certificate'.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The Vault credential store description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Vault credential store name. Defaults to the resource name.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace within Vault to use.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope for this credential store.\n",
                    "willReplaceOnChanges": true
                },
                "tlsServerName": {
                    "type": "string",
                    "description": "Name to use as the SNI host when connecting to Vault via TLS.\n"
                },
                "tlsSkipVerify": {
                    "type": "boolean",
                    "description": "Whether or not to skip TLS verification.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A token used for accessing Vault.\n",
                    "secret": true
                },
                "workerFilter": {
                    "type": "string",
                    "description": "HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault\ninstances with Boundary.\n"
                }
            },
            "requiredInputs": [
                "address",
                "scopeId",
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CredentialStoreVault resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "A PEM-encoded CA certificate to verify the Vault server's TLS certificate.\n"
                    },
                    "clientCertificate": {
                        "type": "string",
                        "description": "A PEM-encoded client certificate to use for TLS authentication to the Vault server.\n"
                    },
                    "clientCertificateKey": {
                        "type": "string",
                        "description": "A PEM-encoded private key matching the client certificate from 'client_certificate'.\n",
                        "secret": true
                    },
                    "clientCertificateKeyHmac": {
                        "type": "string",
                        "description": "The Vault client certificate key hmac.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The Vault credential store description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Vault credential store name. Defaults to the resource name.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace within Vault to use.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope for this credential store.\n",
                        "willReplaceOnChanges": true
                    },
                    "tlsServerName": {
                        "type": "string",
                        "description": "Name to use as the SNI host when connecting to Vault via TLS.\n"
                    },
                    "tlsSkipVerify": {
                        "type": "boolean",
                        "description": "Whether or not to skip TLS verification.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "A token used for accessing Vault.\n",
                        "secret": true
                    },
                    "tokenHmac": {
                        "type": "string",
                        "description": "The Vault token hmac.\n"
                    },
                    "workerFilter": {
                        "type": "string",
                        "description": "HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault\ninstances with Boundary.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/credentialUsernamePassword:CredentialUsernamePassword": {
            "properties": {
                "credentialStoreId": {
                    "type": "string",
                    "description": "The credential store in which to save this username/password credential.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of this username/password credential.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this username/password credential. Defaults to the resource name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of this username/password credential.\n",
                    "secret": true
                },
                "passwordHmac": {
                    "type": "string",
                    "description": "The password hmac.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of this username/password credential.\n"
                }
            },
            "required": [
                "credentialStoreId",
                "name",
                "password",
                "passwordHmac",
                "username"
            ],
            "inputProperties": {
                "credentialStoreId": {
                    "type": "string",
                    "description": "The credential store in which to save this username/password credential.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of this username/password credential.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this username/password credential. Defaults to the resource name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of this username/password credential.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "The username of this username/password credential.\n"
                }
            },
            "requiredInputs": [
                "credentialStoreId",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CredentialUsernamePassword resources.\n",
                "properties": {
                    "credentialStoreId": {
                        "type": "string",
                        "description": "The credential store in which to save this username/password credential.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of this username/password credential.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this username/password credential. Defaults to the resource name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of this username/password credential.\n",
                        "secret": true
                    },
                    "passwordHmac": {
                        "type": "string",
                        "description": "The password hmac.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of this username/password credential.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/group:Group": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The group description.\n"
                },
                "memberIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Resource IDs for group members, these are most likely boundary users.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The group name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n"
                }
            },
            "required": [
                "name",
                "scopeId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The group description.\n"
                },
                "memberIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Resource IDs for group members, these are most likely boundary users.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The group name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The group description.\n"
                    },
                    "memberIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Resource IDs for group members, these are most likely boundary users.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The group name. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/host:Host": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The static address of the host resource as `\u003cIP\u003e` (note: port assignment occurs in the target resource definition, do\nnot add :port here) or a domain name.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The host description.\n"
                },
                "hostCatalogId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The host name. Defaults to the resource name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of host\n"
                }
            },
            "required": [
                "hostCatalogId",
                "name",
                "type"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The static address of the host resource as `\u003cIP\u003e` (note: port assignment occurs in the target resource definition, do\nnot add :port here) or a domain name.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The host description.\n"
                },
                "hostCatalogId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The host name. Defaults to the resource name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of host\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hostCatalogId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Host resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The static address of the host resource as `\u003cIP\u003e` (note: port assignment occurs in the target resource definition, do\nnot add :port here) or a domain name.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The host description.\n"
                    },
                    "hostCatalogId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The host name. Defaults to the resource name.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of host\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/hostCatalog:HostCatalog": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The host catalog description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host catalog name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The host catalog type. Only `static` is supported.\n"
                }
            },
            "required": [
                "name",
                "scopeId",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The host catalog description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host catalog name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The host catalog type. Only `static` is supported.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scopeId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostCatalog resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The host catalog description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The host catalog name. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID in which the resource is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The host catalog type. Only `static` is supported.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/hostCatalogPlugin:HostCatalogPlugin": {
            "properties": {
                "attributesJson": {
                    "type": "string",
                    "description": "The attributes for the host catalog. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" or remove the block to clear all attributes in the host catalog.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The host catalog description.\n"
                },
                "internalForceUpdate": {
                    "type": "string",
                    "description": "Internal only. Used to force update so that we can always check the value of secrets.\n"
                },
                "internalHmacUsedForSecretsConfigHmac": {
                    "type": "string",
                    "description": "Internal only. The Boundary-provided HMAC used to calculate the current value of the HMAC'd config. Used for drift\ndetection.\n"
                },
                "internalSecretsConfigHmac": {
                    "type": "string",
                    "description": "Internal only. HMAC of (serverSecretsHmac + config secrets). Used for proper secrets handling.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host catalog name. Defaults to the resource name.\n"
                },
                "pluginId": {
                    "type": "string",
                    "description": "The ID of the plugin that should back the resource. This or plugin_name must be defined.\n"
                },
                "pluginName": {
                    "type": "string",
                    "description": "The name of the plugin that should back the resource. This or plugin_id must be defined.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created.\n"
                },
                "secretsHmac": {
                    "type": "string",
                    "description": "The HMAC'd secrets value returned from the server.\n"
                },
                "secretsJson": {
                    "type": "string",
                    "description": "The secrets for the host catalog. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" to clear any existing values. NOTE: Unlike \"attributes_json\", removing\nthis block will NOT clear secrets from the host catalog; this allows injecting secrets for one call, then removing them\nfor storage.\n",
                    "secret": true
                },
                "workerFilter": {
                    "type": "string",
                    "description": "HCP Only. A filter used to control which PKI workers can handle dynamic host catalog requests.\n"
                }
            },
            "required": [
                "internalForceUpdate",
                "internalHmacUsedForSecretsConfigHmac",
                "internalSecretsConfigHmac",
                "name",
                "pluginId",
                "pluginName",
                "scopeId",
                "secretsHmac"
            ],
            "inputProperties": {
                "attributesJson": {
                    "type": "string",
                    "description": "The attributes for the host catalog. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" or remove the block to clear all attributes in the host catalog.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The host catalog description.\n"
                },
                "internalForceUpdate": {
                    "type": "string",
                    "description": "Internal only. Used to force update so that we can always check the value of secrets.\n"
                },
                "internalHmacUsedForSecretsConfigHmac": {
                    "type": "string",
                    "description": "Internal only. The Boundary-provided HMAC used to calculate the current value of the HMAC'd config. Used for drift\ndetection.\n"
                },
                "internalSecretsConfigHmac": {
                    "type": "string",
                    "description": "Internal only. HMAC of (serverSecretsHmac + config secrets). Used for proper secrets handling.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host catalog name. Defaults to the resource name.\n"
                },
                "pluginId": {
                    "type": "string",
                    "description": "The ID of the plugin that should back the resource. This or plugin_name must be defined.\n",
                    "willReplaceOnChanges": true
                },
                "pluginName": {
                    "type": "string",
                    "description": "The name of the plugin that should back the resource. This or plugin_id must be defined.\n",
                    "willReplaceOnChanges": true
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created.\n",
                    "willReplaceOnChanges": true
                },
                "secretsHmac": {
                    "type": "string",
                    "description": "The HMAC'd secrets value returned from the server.\n"
                },
                "secretsJson": {
                    "type": "string",
                    "description": "The secrets for the host catalog. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" to clear any existing values. NOTE: Unlike \"attributes_json\", removing\nthis block will NOT clear secrets from the host catalog; this allows injecting secrets for one call, then removing them\nfor storage.\n",
                    "secret": true
                },
                "workerFilter": {
                    "type": "string",
                    "description": "HCP Only. A filter used to control which PKI workers can handle dynamic host catalog requests.\n"
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostCatalogPlugin resources.\n",
                "properties": {
                    "attributesJson": {
                        "type": "string",
                        "description": "The attributes for the host catalog. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" or remove the block to clear all attributes in the host catalog.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The host catalog description.\n"
                    },
                    "internalForceUpdate": {
                        "type": "string",
                        "description": "Internal only. Used to force update so that we can always check the value of secrets.\n"
                    },
                    "internalHmacUsedForSecretsConfigHmac": {
                        "type": "string",
                        "description": "Internal only. The Boundary-provided HMAC used to calculate the current value of the HMAC'd config. Used for drift\ndetection.\n"
                    },
                    "internalSecretsConfigHmac": {
                        "type": "string",
                        "description": "Internal only. HMAC of (serverSecretsHmac + config secrets). Used for proper secrets handling.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The host catalog name. Defaults to the resource name.\n"
                    },
                    "pluginId": {
                        "type": "string",
                        "description": "The ID of the plugin that should back the resource. This or plugin_name must be defined.\n",
                        "willReplaceOnChanges": true
                    },
                    "pluginName": {
                        "type": "string",
                        "description": "The name of the plugin that should back the resource. This or plugin_id must be defined.\n",
                        "willReplaceOnChanges": true
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID in which the resource is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretsHmac": {
                        "type": "string",
                        "description": "The HMAC'd secrets value returned from the server.\n"
                    },
                    "secretsJson": {
                        "type": "string",
                        "description": "The secrets for the host catalog. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" to clear any existing values. NOTE: Unlike \"attributes_json\", removing\nthis block will NOT clear secrets from the host catalog; this allows injecting secrets for one call, then removing them\nfor storage.\n",
                        "secret": true
                    },
                    "workerFilter": {
                        "type": "string",
                        "description": "HCP Only. A filter used to control which PKI workers can handle dynamic host catalog requests.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/hostCatalogStatic:HostCatalogStatic": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The host catalog description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host catalog name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created.\n"
                }
            },
            "required": [
                "name",
                "scopeId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The host catalog description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host catalog name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostCatalogStatic resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The host catalog description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The host catalog name. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID in which the resource is created.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/hostSet:HostSet": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The host set description.\n"
                },
                "hostCatalogId": {
                    "type": "string",
                    "description": "The catalog for the host set.\n"
                },
                "hostIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of host IDs contained in this set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host set name. Defaults to the resource name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of host set\n"
                }
            },
            "required": [
                "hostCatalogId",
                "name",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The host set description.\n"
                },
                "hostCatalogId": {
                    "type": "string",
                    "description": "The catalog for the host set.\n",
                    "willReplaceOnChanges": true
                },
                "hostIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of host IDs contained in this set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host set name. Defaults to the resource name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of host set\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hostCatalogId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostSet resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The host set description.\n"
                    },
                    "hostCatalogId": {
                        "type": "string",
                        "description": "The catalog for the host set.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of host IDs contained in this set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The host set name. Defaults to the resource name.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of host set\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/hostSetPlugin:HostSetPlugin": {
            "properties": {
                "attributesJson": {
                    "type": "string",
                    "description": "The attributes for the host set. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" or remove the block to clear all attributes in the host set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The host set description.\n"
                },
                "hostCatalogId": {
                    "type": "string",
                    "description": "The catalog for the host set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host set name. Defaults to the resource name.\n"
                },
                "preferredEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ordered list of preferred endpoints.\n"
                },
                "syncIntervalSeconds": {
                    "type": "integer",
                    "description": "The value to set for the sync interval seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of host set\n"
                }
            },
            "required": [
                "hostCatalogId",
                "name"
            ],
            "inputProperties": {
                "attributesJson": {
                    "type": "string",
                    "description": "The attributes for the host set. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" or remove the block to clear all attributes in the host set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The host set description.\n"
                },
                "hostCatalogId": {
                    "type": "string",
                    "description": "The catalog for the host set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The host set name. Defaults to the resource name.\n"
                },
                "preferredEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ordered list of preferred endpoints.\n"
                },
                "syncIntervalSeconds": {
                    "type": "integer",
                    "description": "The value to set for the sync interval seconds.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of host set\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hostCatalogId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostSetPlugin resources.\n",
                "properties": {
                    "attributesJson": {
                        "type": "string",
                        "description": "The attributes for the host set. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" or remove the block to clear all attributes in the host set.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The host set description.\n"
                    },
                    "hostCatalogId": {
                        "type": "string",
                        "description": "The catalog for the host set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The host set name. Defaults to the resource name.\n"
                    },
                    "preferredEndpoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ordered list of preferred endpoints.\n"
                    },
                    "syncIntervalSeconds": {
                        "type": "integer",
                        "description": "The value to set for the sync interval seconds.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of host set\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/hostSetStatic:HostSetStatic": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The host set description.\n"
                },
                "hostCatalogId": {
                    "type": "string",
                    "description": "The catalog for the host set.\n"
                },
                "hostIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of host IDs contained in this set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host set name. Defaults to the resource name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of host set\n"
                }
            },
            "required": [
                "hostCatalogId",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The host set description.\n"
                },
                "hostCatalogId": {
                    "type": "string",
                    "description": "The catalog for the host set.\n",
                    "willReplaceOnChanges": true
                },
                "hostIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of host IDs contained in this set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The host set name. Defaults to the resource name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of host set\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hostCatalogId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostSetStatic resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The host set description.\n"
                    },
                    "hostCatalogId": {
                        "type": "string",
                        "description": "The catalog for the host set.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of host IDs contained in this set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The host set name. Defaults to the resource name.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of host set\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/hostStatic:HostStatic": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The static address of the host resource as `\u003cIP\u003e` (note: port assignment occurs in the target resource definition, do\nnot add :port here) or a domain name.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The host description.\n"
                },
                "hostCatalogId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The host name. Defaults to the resource name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of host\n"
                }
            },
            "required": [
                "hostCatalogId",
                "name"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The static address of the host resource as `\u003cIP\u003e` (note: port assignment occurs in the target resource definition, do\nnot add :port here) or a domain name.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The host description.\n"
                },
                "hostCatalogId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The host name. Defaults to the resource name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of host\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hostCatalogId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostStatic resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The static address of the host resource as `\u003cIP\u003e` (note: port assignment occurs in the target resource definition, do\nnot add :port here) or a domain name.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The host description.\n"
                    },
                    "hostCatalogId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The host name. Defaults to the resource name.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of host\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/managedGroup:ManagedGroup": {
            "properties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The managed group description.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "Boolean expression to filter the workers for this managed group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The managed group name. Defaults to the resource name.\n"
                }
            },
            "required": [
                "authMethodId",
                "filter",
                "name"
            ],
            "inputProperties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The managed group description.\n"
                },
                "filter": {
                    "type": "string",
                    "description": "Boolean expression to filter the workers for this managed group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The managed group name. Defaults to the resource name.\n"
                }
            },
            "requiredInputs": [
                "authMethodId",
                "filter"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedGroup resources.\n",
                "properties": {
                    "authMethodId": {
                        "type": "string",
                        "description": "The resource ID for the auth method.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The managed group description.\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "Boolean expression to filter the workers for this managed group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The managed group name. Defaults to the resource name.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/managedGroupLdap:ManagedGroupLdap": {
            "properties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The managed group description.\n"
                },
                "groupNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of groups that make up the managed group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The managed group name. Defaults to the resource name.\n"
                }
            },
            "required": [
                "authMethodId",
                "groupNames",
                "name"
            ],
            "inputProperties": {
                "authMethodId": {
                    "type": "string",
                    "description": "The resource ID for the auth method.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The managed group description.\n"
                },
                "groupNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of groups that make up the managed group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The managed group name. Defaults to the resource name.\n"
                }
            },
            "requiredInputs": [
                "authMethodId",
                "groupNames"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedGroupLdap resources.\n",
                "properties": {
                    "authMethodId": {
                        "type": "string",
                        "description": "The resource ID for the auth method.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The managed group description.\n"
                    },
                    "groupNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of groups that make up the managed group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The managed group name. Defaults to the resource name.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/policyStorage:PolicyStorage": {
            "properties": {
                "deleteAfterDays": {
                    "type": "integer",
                    "description": "The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically\ndelete. However, delete_after_days and retain_for_days cannot both be 0.\n"
                },
                "deleteAfterOverridable": {
                    "type": "boolean",
                    "description": "Whether or not the associated delete_after_days value can be overridden by org scopes. Note: if the associated\ndelete_after_days value is 0, overridable is ignored\n"
                },
                "description": {
                    "type": "string",
                    "description": "The policy description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The policy name. Defaults to the resource name.\n"
                },
                "retainForDays": {
                    "type": "integer",
                    "description": "The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However,\nretain_for_days and delete_after_days cannot both be 0.\n"
                },
                "retainForOverridable": {
                    "type": "boolean",
                    "description": "Whether or not the associated retain_for_days value can be overridden by org scopes. Note: if the associated\nretain_for_days value is 0, overridable is ignored.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope for this policy.\n"
                }
            },
            "required": [
                "name",
                "scopeId"
            ],
            "inputProperties": {
                "deleteAfterDays": {
                    "type": "integer",
                    "description": "The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically\ndelete. However, delete_after_days and retain_for_days cannot both be 0.\n"
                },
                "deleteAfterOverridable": {
                    "type": "boolean",
                    "description": "Whether or not the associated delete_after_days value can be overridden by org scopes. Note: if the associated\ndelete_after_days value is 0, overridable is ignored\n"
                },
                "description": {
                    "type": "string",
                    "description": "The policy description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The policy name. Defaults to the resource name.\n"
                },
                "retainForDays": {
                    "type": "integer",
                    "description": "The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However,\nretain_for_days and delete_after_days cannot both be 0.\n"
                },
                "retainForOverridable": {
                    "type": "boolean",
                    "description": "Whether or not the associated retain_for_days value can be overridden by org scopes. Note: if the associated\nretain_for_days value is 0, overridable is ignored.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope for this policy.\n"
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyStorage resources.\n",
                "properties": {
                    "deleteAfterDays": {
                        "type": "integer",
                        "description": "The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically\ndelete. However, delete_after_days and retain_for_days cannot both be 0.\n"
                    },
                    "deleteAfterOverridable": {
                        "type": "boolean",
                        "description": "Whether or not the associated delete_after_days value can be overridden by org scopes. Note: if the associated\ndelete_after_days value is 0, overridable is ignored\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The policy description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The policy name. Defaults to the resource name.\n"
                    },
                    "retainForDays": {
                        "type": "integer",
                        "description": "The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However,\nretain_for_days and delete_after_days cannot both be 0.\n"
                    },
                    "retainForOverridable": {
                        "type": "boolean",
                        "description": "Whether or not the associated retain_for_days value can be overridden by org scopes. Note: if the associated\nretain_for_days value is 0, overridable is ignored.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope for this policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/role:Role": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The role description.\n"
                },
                "grantScopeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of scopes for which the grants in this role should apply, which can include the special values \"this\",\n\"children\", or \"descendants\"\n"
                },
                "grantStrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of stringified grants for the role.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The role name. Defaults to the resource name.\n"
                },
                "principalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of principal (user or group) IDs to add as principals on the role.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n"
                }
            },
            "required": [
                "grantScopeIds",
                "name",
                "scopeId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The role description.\n"
                },
                "grantScopeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of scopes for which the grants in this role should apply, which can include the special values \"this\",\n\"children\", or \"descendants\"\n"
                },
                "grantStrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of stringified grants for the role.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The role name. Defaults to the resource name.\n"
                },
                "principalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of principal (user or group) IDs to add as principals on the role.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The role description.\n"
                    },
                    "grantScopeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of scopes for which the grants in this role should apply, which can include the special values \"this\",\n\"children\", or \"descendants\"\n"
                    },
                    "grantStrings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of stringified grants for the role.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The role name. Defaults to the resource name.\n"
                    },
                    "principalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of principal (user or group) IDs to add as principals on the role.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/scope:Scope": {
            "properties": {
                "autoCreateAdminRole": {
                    "type": "boolean"
                },
                "autoCreateDefaultRole": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string",
                    "description": "The scope description.\n"
                },
                "globalScope": {
                    "type": "boolean",
                    "description": "Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it\nto be imported and managed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The scope name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID containing the sub scope resource.\n"
                }
            },
            "required": [
                "name",
                "scopeId"
            ],
            "inputProperties": {
                "autoCreateAdminRole": {
                    "type": "boolean"
                },
                "autoCreateDefaultRole": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string",
                    "description": "The scope description.\n"
                },
                "globalScope": {
                    "type": "boolean",
                    "description": "Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it\nto be imported and managed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The scope name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID containing the sub scope resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Scope resources.\n",
                "properties": {
                    "autoCreateAdminRole": {
                        "type": "boolean"
                    },
                    "autoCreateDefaultRole": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "The scope description.\n"
                    },
                    "globalScope": {
                        "type": "boolean",
                        "description": "Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it\nto be imported and managed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The scope name. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID containing the sub scope resource.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/scopePolicyAttachment:ScopePolicyAttachment": {
            "properties": {
                "policyId": {
                    "type": "string"
                },
                "scopeId": {
                    "type": "string"
                }
            },
            "required": [
                "policyId",
                "scopeId"
            ],
            "inputProperties": {
                "policyId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "scopeId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "policyId",
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScopePolicyAttachment resources.\n",
                "properties": {
                    "policyId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "scopeId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/storageBucket:StorageBucket": {
            "properties": {
                "attributesJson": {
                    "type": "string",
                    "description": "The attributes for the storage bucket. The \"region\" attribute field is required when creating an AWS storage bucket.\nValues are either encoded with the \"jsonencode\" function, pre-escaped JSON string, or a file:// or env:// path. Set to a\nstring \"null\" or remove the block to clear all attributes in the storage bucket.\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket within the external object store service.\n"
                },
                "bucketPrefix": {
                    "type": "string",
                    "description": "The prefix used to organize the data held within the external object store.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The storage bucket description.\n"
                },
                "internalForceUpdate": {
                    "type": "string",
                    "description": "Internal only. Used to force update so that we can always check the value of secrets.\n"
                },
                "internalHmacUsedForSecretsConfigHmac": {
                    "type": "string",
                    "description": "Internal only. The Boundary-provided HMAC used to calculate the current value of the HMAC'd config. Used for drift\ndetection.\n"
                },
                "internalSecretsConfigHmac": {
                    "type": "string",
                    "description": "Internal only. HMAC of (serverSecretsHmac + config secrets). Used for proper secrets handling.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The storage bucket name. Defaults to the resource name.\n"
                },
                "pluginId": {
                    "type": "string",
                    "description": "The ID of the plugin that should back the resource. This or plugin_name must be defined.\n"
                },
                "pluginName": {
                    "type": "string",
                    "description": "The name of the plugin that should back the resource. This or plugin_id must be defined.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope for this storage bucket.\n"
                },
                "secretsHmac": {
                    "type": "string",
                    "description": "The HMAC'd secrets value returned from the server.\n"
                },
                "secretsJson": {
                    "type": "string",
                    "description": "The secrets for the storage bucket. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" to clear any existing values. NOTE: Unlike \"attributes_json\", removing\nthis block will NOT clear secrets from the storage bucket; this allows injecting secrets for one call, then removing\nthem for storage.\n",
                    "secret": true
                },
                "workerFilter": {
                    "type": "string",
                    "description": "Filters to the worker(s) that can handle requests for this storage bucket. The filter must match an existing worker in\norder to create a storage bucket.\n"
                }
            },
            "required": [
                "bucketName",
                "internalForceUpdate",
                "internalHmacUsedForSecretsConfigHmac",
                "internalSecretsConfigHmac",
                "name",
                "pluginId",
                "scopeId",
                "secretsHmac",
                "workerFilter"
            ],
            "inputProperties": {
                "attributesJson": {
                    "type": "string",
                    "description": "The attributes for the storage bucket. The \"region\" attribute field is required when creating an AWS storage bucket.\nValues are either encoded with the \"jsonencode\" function, pre-escaped JSON string, or a file:// or env:// path. Set to a\nstring \"null\" or remove the block to clear all attributes in the storage bucket.\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket within the external object store service.\n"
                },
                "bucketPrefix": {
                    "type": "string",
                    "description": "The prefix used to organize the data held within the external object store.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The storage bucket description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The storage bucket name. Defaults to the resource name.\n"
                },
                "pluginId": {
                    "type": "string",
                    "description": "The ID of the plugin that should back the resource. This or plugin_name must be defined.\n",
                    "willReplaceOnChanges": true
                },
                "pluginName": {
                    "type": "string",
                    "description": "The name of the plugin that should back the resource. This or plugin_id must be defined.\n",
                    "willReplaceOnChanges": true
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope for this storage bucket.\n",
                    "willReplaceOnChanges": true
                },
                "secretsJson": {
                    "type": "string",
                    "description": "The secrets for the storage bucket. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" to clear any existing values. NOTE: Unlike \"attributes_json\", removing\nthis block will NOT clear secrets from the storage bucket; this allows injecting secrets for one call, then removing\nthem for storage.\n",
                    "secret": true
                },
                "workerFilter": {
                    "type": "string",
                    "description": "Filters to the worker(s) that can handle requests for this storage bucket. The filter must match an existing worker in\norder to create a storage bucket.\n"
                }
            },
            "requiredInputs": [
                "bucketName",
                "scopeId",
                "workerFilter"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageBucket resources.\n",
                "properties": {
                    "attributesJson": {
                        "type": "string",
                        "description": "The attributes for the storage bucket. The \"region\" attribute field is required when creating an AWS storage bucket.\nValues are either encoded with the \"jsonencode\" function, pre-escaped JSON string, or a file:// or env:// path. Set to a\nstring \"null\" or remove the block to clear all attributes in the storage bucket.\n"
                    },
                    "bucketName": {
                        "type": "string",
                        "description": "The name of the bucket within the external object store service.\n"
                    },
                    "bucketPrefix": {
                        "type": "string",
                        "description": "The prefix used to organize the data held within the external object store.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The storage bucket description.\n"
                    },
                    "internalForceUpdate": {
                        "type": "string",
                        "description": "Internal only. Used to force update so that we can always check the value of secrets.\n"
                    },
                    "internalHmacUsedForSecretsConfigHmac": {
                        "type": "string",
                        "description": "Internal only. The Boundary-provided HMAC used to calculate the current value of the HMAC'd config. Used for drift\ndetection.\n"
                    },
                    "internalSecretsConfigHmac": {
                        "type": "string",
                        "description": "Internal only. HMAC of (serverSecretsHmac + config secrets). Used for proper secrets handling.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The storage bucket name. Defaults to the resource name.\n"
                    },
                    "pluginId": {
                        "type": "string",
                        "description": "The ID of the plugin that should back the resource. This or plugin_name must be defined.\n",
                        "willReplaceOnChanges": true
                    },
                    "pluginName": {
                        "type": "string",
                        "description": "The name of the plugin that should back the resource. This or plugin_id must be defined.\n",
                        "willReplaceOnChanges": true
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope for this storage bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretsHmac": {
                        "type": "string",
                        "description": "The HMAC'd secrets value returned from the server.\n"
                    },
                    "secretsJson": {
                        "type": "string",
                        "description": "The secrets for the storage bucket. Either values encoded with the \"jsonencode\" function, pre-escaped JSON string, or a\nfile:// or env:// path. Set to a string \"null\" to clear any existing values. NOTE: Unlike \"attributes_json\", removing\nthis block will NOT clear secrets from the storage bucket; this allows injecting secrets for one call, then removing\nthem for storage.\n",
                        "secret": true
                    },
                    "workerFilter": {
                        "type": "string",
                        "description": "Filters to the worker(s) that can handle requests for this storage bucket. The filter must match an existing worker in\norder to create a storage bucket.\n"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/target:Target": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Optionally, a valid network address to connect to for this target. Cannot be used alongside host_source_ids.\n"
                },
                "brokeredCredentialSourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of brokered credential source ID's.\n"
                },
                "defaultClientPort": {
                    "type": "integer",
                    "description": "The default client port for this target.\n"
                },
                "defaultPort": {
                    "type": "integer",
                    "description": "The default port for this target.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The target description.\n"
                },
                "egressWorkerFilter": {
                    "type": "string",
                    "description": "Boolean expression to filter the workers used to access this target\n"
                },
                "enableSessionRecording": {
                    "type": "boolean",
                    "description": "HCP/Ent Only. Enable sessions recording for this target. Only applicable for SSH targets.\n"
                },
                "hostSourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of host source ID's. Cannot be used alongside address.\n"
                },
                "ingressWorkerFilter": {
                    "type": "string",
                    "description": "HCP Only. Boolean expression to filter the workers a user will connect to when initiating a session against this target\n"
                },
                "injectedApplicationCredentialSourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of injected application credential source ID's.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The target name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n"
                },
                "sessionConnectionLimit": {
                    "type": "integer"
                },
                "sessionMaxSeconds": {
                    "type": "integer"
                },
                "storageBucketId": {
                    "type": "string",
                    "description": "HCP/Ent Only. Storage bucket for this target. Only applicable for SSH targets.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The target resource type.\n"
                },
                "workerFilter": {
                    "type": "string",
                    "description": "Boolean expression to filter the workers for this target\n",
                    "deprecationMessage": "Deprecated. Use `egress_worker_filter` and `ingress_worker_filter` instead"
                }
            },
            "required": [
                "name",
                "scopeId",
                "sessionConnectionLimit",
                "sessionMaxSeconds",
                "type"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "Optionally, a valid network address to connect to for this target. Cannot be used alongside host_source_ids.\n"
                },
                "brokeredCredentialSourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of brokered credential source ID's.\n"
                },
                "defaultClientPort": {
                    "type": "integer",
                    "description": "The default client port for this target.\n"
                },
                "defaultPort": {
                    "type": "integer",
                    "description": "The default port for this target.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The target description.\n"
                },
                "egressWorkerFilter": {
                    "type": "string",
                    "description": "Boolean expression to filter the workers used to access this target\n"
                },
                "enableSessionRecording": {
                    "type": "boolean",
                    "description": "HCP/Ent Only. Enable sessions recording for this target. Only applicable for SSH targets.\n"
                },
                "hostSourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of host source ID's. Cannot be used alongside address.\n"
                },
                "ingressWorkerFilter": {
                    "type": "string",
                    "description": "HCP Only. Boolean expression to filter the workers a user will connect to when initiating a session against this target\n"
                },
                "injectedApplicationCredentialSourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of injected application credential source ID's.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The target name. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n",
                    "willReplaceOnChanges": true
                },
                "sessionConnectionLimit": {
                    "type": "integer"
                },
                "sessionMaxSeconds": {
                    "type": "integer"
                },
                "storageBucketId": {
                    "type": "string",
                    "description": "HCP/Ent Only. Storage bucket for this target. Only applicable for SSH targets.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The target resource type.\n",
                    "willReplaceOnChanges": true
                },
                "workerFilter": {
                    "type": "string",
                    "description": "Boolean expression to filter the workers for this target\n",
                    "deprecationMessage": "Deprecated. Use `egress_worker_filter` and `ingress_worker_filter` instead"
                }
            },
            "requiredInputs": [
                "scopeId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Target resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Optionally, a valid network address to connect to for this target. Cannot be used alongside host_source_ids.\n"
                    },
                    "brokeredCredentialSourceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of brokered credential source ID's.\n"
                    },
                    "defaultClientPort": {
                        "type": "integer",
                        "description": "The default client port for this target.\n"
                    },
                    "defaultPort": {
                        "type": "integer",
                        "description": "The default port for this target.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The target description.\n"
                    },
                    "egressWorkerFilter": {
                        "type": "string",
                        "description": "Boolean expression to filter the workers used to access this target\n"
                    },
                    "enableSessionRecording": {
                        "type": "boolean",
                        "description": "HCP/Ent Only. Enable sessions recording for this target. Only applicable for SSH targets.\n"
                    },
                    "hostSourceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of host source ID's. Cannot be used alongside address.\n"
                    },
                    "ingressWorkerFilter": {
                        "type": "string",
                        "description": "HCP Only. Boolean expression to filter the workers a user will connect to when initiating a session against this target\n"
                    },
                    "injectedApplicationCredentialSourceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of injected application credential source ID's.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The target name. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n",
                        "willReplaceOnChanges": true
                    },
                    "sessionConnectionLimit": {
                        "type": "integer"
                    },
                    "sessionMaxSeconds": {
                        "type": "integer"
                    },
                    "storageBucketId": {
                        "type": "string",
                        "description": "HCP/Ent Only. Storage bucket for this target. Only applicable for SSH targets.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The target resource type.\n",
                        "willReplaceOnChanges": true
                    },
                    "workerFilter": {
                        "type": "string",
                        "description": "Boolean expression to filter the workers for this target\n",
                        "deprecationMessage": "Deprecated. Use `egress_worker_filter` and `ingress_worker_filter` instead"
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/user:User": {
            "properties": {
                "accountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Account ID's to associate with this user resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The user description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The username. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n"
                }
            },
            "required": [
                "name",
                "scopeId"
            ],
            "inputProperties": {
                "accountIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Account ID's to associate with this user resource.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The user description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The username. Defaults to the resource name.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scopeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Account ID's to associate with this user resource.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The user description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The username. Defaults to the resource name.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "boundary:index/worker:Worker": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The accessible address of the self managed worker.\n"
                },
                "authorizedActions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of actions that the worker is entitled to perform.\n"
                },
                "controllerGeneratedActivationToken": {
                    "type": "string",
                    "description": "A single use token generated by the controller to be passed to the self-managed worker.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for the worker.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the worker.\n"
                },
                "releaseVersion": {
                    "type": "integer",
                    "description": "The version of the Boundary binary running on the self managed worker.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope for the worker. Defaults to `global`.\n"
                },
                "workerGeneratedAuthToken": {
                    "type": "string",
                    "description": "The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this\nblank will result in a controller generated token.\n"
                }
            },
            "required": [
                "address",
                "authorizedActions",
                "controllerGeneratedActivationToken",
                "name",
                "releaseVersion"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description for the worker.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the worker.\n"
                },
                "scopeId": {
                    "type": "string",
                    "description": "The scope for the worker. Defaults to `global`.\n"
                },
                "workerGeneratedAuthToken": {
                    "type": "string",
                    "description": "The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this\nblank will result in a controller generated token.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Worker resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The accessible address of the self managed worker.\n"
                    },
                    "authorizedActions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of actions that the worker is entitled to perform.\n"
                    },
                    "controllerGeneratedActivationToken": {
                        "type": "string",
                        "description": "A single use token generated by the controller to be passed to the self-managed worker.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the worker.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the worker.\n"
                    },
                    "releaseVersion": {
                        "type": "integer",
                        "description": "The version of the Boundary binary running on the self managed worker.\n"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The scope for the worker. Defaults to `global`.\n"
                    },
                    "workerGeneratedAuthToken": {
                        "type": "string",
                        "description": "The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this\nblank will result in a controller generated token.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "boundary:index/getAccount:getAccount": {
            "inputs": {
                "description": "A collection of arguments for invoking getAccount.\n",
                "properties": {
                    "authMethodId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "authMethodId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "authMethodId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "$ref": "#/types/boundary:index/getAccountScope:getAccountScope"
                        },
                        "type": "array"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "authMethodId",
                    "description",
                    "id",
                    "name",
                    "scopes",
                    "type"
                ],
                "type": "object"
            }
        },
        "boundary:index/getAuthMethod:getAuthMethod": {
            "inputs": {
                "description": "A collection of arguments for invoking getAuthMethod.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAuthMethod.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "$ref": "#/types/boundary:index/getAuthMethodScope:getAuthMethodScope"
                        },
                        "type": "array"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "id",
                    "name",
                    "scopes",
                    "type"
                ],
                "type": "object"
            }
        },
        "boundary:index/getGroup:getGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "memberIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "$ref": "#/types/boundary:index/getGroupScope:getGroupScope"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "id",
                    "memberIds",
                    "name",
                    "scopes"
                ],
                "type": "object"
            }
        },
        "boundary:index/getScope:getScope": {
            "inputs": {
                "description": "A collection of arguments for invoking getScope.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "scopeId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getScope.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "id",
                    "name",
                    "scopeId"
                ],
                "type": "object"
            }
        },
        "boundary:index/getUser:getUser": {
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "accountIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "authorizedActions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "loginName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "primaryAccountId": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string"
                    },
                    "scopes": {
                        "items": {
                            "$ref": "#/types/boundary:index/getUserScope:getUserScope"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "accountIds",
                    "authorizedActions",
                    "description",
                    "id",
                    "loginName",
                    "name",
                    "primaryAccountId",
                    "scopes"
                ],
                "type": "object"
            }
        }
    }
}