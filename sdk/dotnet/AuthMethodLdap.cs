// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Boundary
{
    [BoundaryResourceType("boundary:index/authMethodLdap:AuthMethodLdap")]
    public partial class AuthMethodLdap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account attribute maps fullname and email.
        /// </summary>
        [Output("accountAttributeMaps")]
        public Output<ImmutableArray<string>> AccountAttributeMaps { get; private set; } = null!;

        /// <summary>
        /// Use anon bind when performing LDAP group searches (optional).
        /// </summary>
        [Output("anonGroupSearch")]
        public Output<bool?> AnonGroupSearch { get; private set; } = null!;

        /// <summary>
        /// The distinguished name of entry to bind when performing user and group searches (optional).
        /// </summary>
        [Output("bindDn")]
        public Output<string?> BindDn { get; private set; } = null!;

        /// <summary>
        /// The password to use along with bind-dn performing user and group searches (optional).
        /// </summary>
        [Output("bindPassword")]
        public Output<string?> BindPassword { get; private set; } = null!;

        /// <summary>
        /// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of
        /// the value.
        /// </summary>
        [Output("bindPasswordHmac")]
        public Output<string> BindPasswordHmac { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP
        /// server(optional). This may be specified multiple times
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<string>> Certificates { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP
        /// server(optional).
        /// </summary>
        [Output("clientCertificate")]
        public Output<string?> ClientCertificate { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
        /// </summary>
        [Output("clientCertificateKey")]
        public Output<string?> ClientCertificateKey { get; private set; } = null!;

        /// <summary>
        /// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial
        /// setting of the value.
        /// </summary>
        [Output("clientCertificateKeyHmac")]
        public Output<string> ClientCertificateKeyHmac { get; private set; } = null!;

        /// <summary>
        /// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching,
        /// DerefFindingBaseObj, and DerefAlways (optional).
        /// </summary>
        [Output("dereferenceAliases")]
        public Output<string> DereferenceAliases { get; private set; } = null!;

        /// <summary>
        /// The auth method description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Use anon bind to discover the bind DN of a user (optional).
        /// </summary>
        [Output("discoverDn")]
        public Output<bool?> DiscoverDn { get; private set; } = null!;

        /// <summary>
        /// Find the authenticated user's groups during authentication (optional).
        /// </summary>
        [Output("enableGroups")]
        public Output<bool?> EnableGroups { get; private set; } = null!;

        /// <summary>
        /// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
        /// </summary>
        [Output("groupAttr")]
        public Output<string?> GroupAttr { get; private set; } = null!;

        /// <summary>
        /// The base DN under which to perform group search.
        /// </summary>
        [Output("groupDn")]
        public Output<string?> GroupDn { get; private set; } = null!;

        /// <summary>
        /// A go template used to construct a LDAP group search filter (optional).
        /// </summary>
        [Output("groupFilter")]
        public Output<string?> GroupFilter { get; private set; } = null!;

        /// <summary>
        /// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
        /// </summary>
        [Output("insecureTls")]
        public Output<bool?> InsecureTls { get; private set; } = null!;

        /// <summary>
        /// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
        /// a scope means the the user will be automatically created when they login using an LDAP account.
        /// </summary>
        [Output("isPrimaryForScope")]
        public Output<bool?> IsPrimaryForScope { get; private set; } = null!;

        /// <summary>
        /// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups
        /// (optional).
        /// </summary>
        [Output("maximumPageSize")]
        public Output<int?> MaximumPageSize { get; private set; } = null!;

        /// <summary>
        /// The auth method name. Defaults to the resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The scope ID.
        /// </summary>
        [Output("scopeId")]
        public Output<string> ScopeId { get; private set; } = null!;

        /// <summary>
        /// Issue StartTLS command after connecting (optional).
        /// </summary>
        [Output("startTls")]
        public Output<bool?> StartTls { get; private set; } = null!;

        /// <summary>
        /// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The type of auth method; hardcoded.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
        /// </summary>
        [Output("upnDomain")]
        public Output<string?> UpnDomain { get; private set; } = null!;

        /// <summary>
        /// The LDAP URLs that specify LDAP servers to connect to (required). May be specified multiple times.
        /// </summary>
        [Output("urls")]
        public Output<ImmutableArray<string>> Urls { get; private set; } = null!;

        /// <summary>
        /// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
        /// </summary>
        [Output("useTokenGroups")]
        public Output<bool?> UseTokenGroups { get; private set; } = null!;

        /// <summary>
        /// The attribute on user entry matching the username passed when authenticating (optional).
        /// </summary>
        [Output("userAttr")]
        public Output<string?> UserAttr { get; private set; } = null!;

        /// <summary>
        /// The base DN under which to perform user search (optional).
        /// </summary>
        [Output("userDn")]
        public Output<string?> UserDn { get; private set; } = null!;

        /// <summary>
        /// A go template used to construct a LDAP user search filter (optional).
        /// </summary>
        [Output("userFilter")]
        public Output<string?> UserFilter { get; private set; } = null!;


        /// <summary>
        /// Create a AuthMethodLdap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthMethodLdap(string name, AuthMethodLdapArgs args, CustomResourceOptions? options = null)
            : base("boundary:index/authMethodLdap:AuthMethodLdap", name, args ?? new AuthMethodLdapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthMethodLdap(string name, Input<string> id, AuthMethodLdapState? state = null, CustomResourceOptions? options = null)
            : base("boundary:index/authMethodLdap:AuthMethodLdap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthMethodLdap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthMethodLdap Get(string name, Input<string> id, AuthMethodLdapState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthMethodLdap(name, id, state, options);
        }
    }

    public sealed class AuthMethodLdapArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountAttributeMaps")]
        private InputList<string>? _accountAttributeMaps;

        /// <summary>
        /// Account attribute maps fullname and email.
        /// </summary>
        public InputList<string> AccountAttributeMaps
        {
            get => _accountAttributeMaps ?? (_accountAttributeMaps = new InputList<string>());
            set => _accountAttributeMaps = value;
        }

        /// <summary>
        /// Use anon bind when performing LDAP group searches (optional).
        /// </summary>
        [Input("anonGroupSearch")]
        public Input<bool>? AnonGroupSearch { get; set; }

        /// <summary>
        /// The distinguished name of entry to bind when performing user and group searches (optional).
        /// </summary>
        [Input("bindDn")]
        public Input<string>? BindDn { get; set; }

        /// <summary>
        /// The password to use along with bind-dn performing user and group searches (optional).
        /// </summary>
        [Input("bindPassword")]
        public Input<string>? BindPassword { get; set; }

        /// <summary>
        /// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of
        /// the value.
        /// </summary>
        [Input("bindPasswordHmac")]
        public Input<string>? BindPasswordHmac { get; set; }

        [Input("certificates")]
        private InputList<string>? _certificates;

        /// <summary>
        /// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP
        /// server(optional). This may be specified multiple times
        /// </summary>
        public InputList<string> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<string>());
            set => _certificates = value;
        }

        /// <summary>
        /// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP
        /// server(optional).
        /// </summary>
        [Input("clientCertificate")]
        public Input<string>? ClientCertificate { get; set; }

        /// <summary>
        /// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
        /// </summary>
        [Input("clientCertificateKey")]
        public Input<string>? ClientCertificateKey { get; set; }

        /// <summary>
        /// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial
        /// setting of the value.
        /// </summary>
        [Input("clientCertificateKeyHmac")]
        public Input<string>? ClientCertificateKeyHmac { get; set; }

        /// <summary>
        /// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching,
        /// DerefFindingBaseObj, and DerefAlways (optional).
        /// </summary>
        [Input("dereferenceAliases")]
        public Input<string>? DereferenceAliases { get; set; }

        /// <summary>
        /// The auth method description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Use anon bind to discover the bind DN of a user (optional).
        /// </summary>
        [Input("discoverDn")]
        public Input<bool>? DiscoverDn { get; set; }

        /// <summary>
        /// Find the authenticated user's groups during authentication (optional).
        /// </summary>
        [Input("enableGroups")]
        public Input<bool>? EnableGroups { get; set; }

        /// <summary>
        /// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
        /// </summary>
        [Input("groupAttr")]
        public Input<string>? GroupAttr { get; set; }

        /// <summary>
        /// The base DN under which to perform group search.
        /// </summary>
        [Input("groupDn")]
        public Input<string>? GroupDn { get; set; }

        /// <summary>
        /// A go template used to construct a LDAP group search filter (optional).
        /// </summary>
        [Input("groupFilter")]
        public Input<string>? GroupFilter { get; set; }

        /// <summary>
        /// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
        /// </summary>
        [Input("insecureTls")]
        public Input<bool>? InsecureTls { get; set; }

        /// <summary>
        /// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
        /// a scope means the the user will be automatically created when they login using an LDAP account.
        /// </summary>
        [Input("isPrimaryForScope")]
        public Input<bool>? IsPrimaryForScope { get; set; }

        /// <summary>
        /// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups
        /// (optional).
        /// </summary>
        [Input("maximumPageSize")]
        public Input<int>? MaximumPageSize { get; set; }

        /// <summary>
        /// The auth method name. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The scope ID.
        /// </summary>
        [Input("scopeId", required: true)]
        public Input<string> ScopeId { get; set; } = null!;

        /// <summary>
        /// Issue StartTLS command after connecting (optional).
        /// </summary>
        [Input("startTls")]
        public Input<bool>? StartTls { get; set; }

        /// <summary>
        /// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The type of auth method; hardcoded.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
        /// </summary>
        [Input("upnDomain")]
        public Input<string>? UpnDomain { get; set; }

        [Input("urls")]
        private InputList<string>? _urls;

        /// <summary>
        /// The LDAP URLs that specify LDAP servers to connect to (required). May be specified multiple times.
        /// </summary>
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        /// <summary>
        /// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
        /// </summary>
        [Input("useTokenGroups")]
        public Input<bool>? UseTokenGroups { get; set; }

        /// <summary>
        /// The attribute on user entry matching the username passed when authenticating (optional).
        /// </summary>
        [Input("userAttr")]
        public Input<string>? UserAttr { get; set; }

        /// <summary>
        /// The base DN under which to perform user search (optional).
        /// </summary>
        [Input("userDn")]
        public Input<string>? UserDn { get; set; }

        /// <summary>
        /// A go template used to construct a LDAP user search filter (optional).
        /// </summary>
        [Input("userFilter")]
        public Input<string>? UserFilter { get; set; }

        public AuthMethodLdapArgs()
        {
        }
        public static new AuthMethodLdapArgs Empty => new AuthMethodLdapArgs();
    }

    public sealed class AuthMethodLdapState : global::Pulumi.ResourceArgs
    {
        [Input("accountAttributeMaps")]
        private InputList<string>? _accountAttributeMaps;

        /// <summary>
        /// Account attribute maps fullname and email.
        /// </summary>
        public InputList<string> AccountAttributeMaps
        {
            get => _accountAttributeMaps ?? (_accountAttributeMaps = new InputList<string>());
            set => _accountAttributeMaps = value;
        }

        /// <summary>
        /// Use anon bind when performing LDAP group searches (optional).
        /// </summary>
        [Input("anonGroupSearch")]
        public Input<bool>? AnonGroupSearch { get; set; }

        /// <summary>
        /// The distinguished name of entry to bind when performing user and group searches (optional).
        /// </summary>
        [Input("bindDn")]
        public Input<string>? BindDn { get; set; }

        /// <summary>
        /// The password to use along with bind-dn performing user and group searches (optional).
        /// </summary>
        [Input("bindPassword")]
        public Input<string>? BindPassword { get; set; }

        /// <summary>
        /// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of
        /// the value.
        /// </summary>
        [Input("bindPasswordHmac")]
        public Input<string>? BindPasswordHmac { get; set; }

        [Input("certificates")]
        private InputList<string>? _certificates;

        /// <summary>
        /// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP
        /// server(optional). This may be specified multiple times
        /// </summary>
        public InputList<string> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<string>());
            set => _certificates = value;
        }

        /// <summary>
        /// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP
        /// server(optional).
        /// </summary>
        [Input("clientCertificate")]
        public Input<string>? ClientCertificate { get; set; }

        /// <summary>
        /// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
        /// </summary>
        [Input("clientCertificateKey")]
        public Input<string>? ClientCertificateKey { get; set; }

        /// <summary>
        /// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial
        /// setting of the value.
        /// </summary>
        [Input("clientCertificateKeyHmac")]
        public Input<string>? ClientCertificateKeyHmac { get; set; }

        /// <summary>
        /// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching,
        /// DerefFindingBaseObj, and DerefAlways (optional).
        /// </summary>
        [Input("dereferenceAliases")]
        public Input<string>? DereferenceAliases { get; set; }

        /// <summary>
        /// The auth method description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Use anon bind to discover the bind DN of a user (optional).
        /// </summary>
        [Input("discoverDn")]
        public Input<bool>? DiscoverDn { get; set; }

        /// <summary>
        /// Find the authenticated user's groups during authentication (optional).
        /// </summary>
        [Input("enableGroups")]
        public Input<bool>? EnableGroups { get; set; }

        /// <summary>
        /// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
        /// </summary>
        [Input("groupAttr")]
        public Input<string>? GroupAttr { get; set; }

        /// <summary>
        /// The base DN under which to perform group search.
        /// </summary>
        [Input("groupDn")]
        public Input<string>? GroupDn { get; set; }

        /// <summary>
        /// A go template used to construct a LDAP group search filter (optional).
        /// </summary>
        [Input("groupFilter")]
        public Input<string>? GroupFilter { get; set; }

        /// <summary>
        /// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
        /// </summary>
        [Input("insecureTls")]
        public Input<bool>? InsecureTls { get; set; }

        /// <summary>
        /// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
        /// a scope means the the user will be automatically created when they login using an LDAP account.
        /// </summary>
        [Input("isPrimaryForScope")]
        public Input<bool>? IsPrimaryForScope { get; set; }

        /// <summary>
        /// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups
        /// (optional).
        /// </summary>
        [Input("maximumPageSize")]
        public Input<int>? MaximumPageSize { get; set; }

        /// <summary>
        /// The auth method name. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The scope ID.
        /// </summary>
        [Input("scopeId")]
        public Input<string>? ScopeId { get; set; }

        /// <summary>
        /// Issue StartTLS command after connecting (optional).
        /// </summary>
        [Input("startTls")]
        public Input<bool>? StartTls { get; set; }

        /// <summary>
        /// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The type of auth method; hardcoded.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
        /// </summary>
        [Input("upnDomain")]
        public Input<string>? UpnDomain { get; set; }

        [Input("urls")]
        private InputList<string>? _urls;

        /// <summary>
        /// The LDAP URLs that specify LDAP servers to connect to (required). May be specified multiple times.
        /// </summary>
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        /// <summary>
        /// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
        /// </summary>
        [Input("useTokenGroups")]
        public Input<bool>? UseTokenGroups { get; set; }

        /// <summary>
        /// The attribute on user entry matching the username passed when authenticating (optional).
        /// </summary>
        [Input("userAttr")]
        public Input<string>? UserAttr { get; set; }

        /// <summary>
        /// The base DN under which to perform user search (optional).
        /// </summary>
        [Input("userDn")]
        public Input<string>? UserDn { get; set; }

        /// <summary>
        /// A go template used to construct a LDAP user search filter (optional).
        /// </summary>
        [Input("userFilter")]
        public Input<string>? UserFilter { get; set; }

        public AuthMethodLdapState()
        {
        }
        public static new AuthMethodLdapState Empty => new AuthMethodLdapState();
    }
}
