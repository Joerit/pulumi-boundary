// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Boundary
{
    /// <summary>
    /// The credential library for Vault resource allows you to configure a Boundary credential library for Vault.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Boundary = Pulumi.Boundary;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var org = new Boundary.Scope("org", new()
    ///     {
    ///         Name = "organization_one",
    ///         Description = "My first scope!",
    ///         ScopeId = "global",
    ///         AutoCreateAdminRole = true,
    ///         AutoCreateDefaultRole = true,
    ///     });
    /// 
    ///     var project = new Boundary.Scope("project", new()
    ///     {
    ///         Name = "project_one",
    ///         Description = "My first scope!",
    ///         ScopeId = org.Id,
    ///         AutoCreateAdminRole = true,
    ///     });
    /// 
    ///     var foo = new Boundary.CredentialStoreVault("foo", new()
    ///     {
    ///         Name = "foo",
    ///         Description = "My first Vault credential store!",
    ///         Address = "http://127.0.0.1:8200",
    ///         Token = "s.0ufRo6XEGU2jOqnIr7OlFYP5",
    ///         ScopeId = project.Id,
    ///     });
    /// 
    ///     var fooCredentialLibraryVaultSshCertificate = new Boundary.CredentialLibraryVaultSshCertificate("foo", new()
    ///     {
    ///         Name = "foo",
    ///         Description = "My first Vault SSH certificate credential library!",
    ///         CredentialStoreId = foo.Id,
    ///         Path = "ssh/sign/foo",
    ///         Username = "foo",
    ///     });
    /// 
    ///     var bar = new Boundary.CredentialLibraryVaultSshCertificate("bar", new()
    ///     {
    ///         Name = "bar",
    ///         Description = "My second Vault SSH certificate credential library!",
    ///         CredentialStoreId = foo.Id,
    ///         Path = "ssh/sign/foo",
    ///         Username = "foo",
    ///         KeyType = "ecdsa",
    ///         KeyBits = 384,
    ///         Extensions = 
    ///         {
    ///             { "permit-pty", "" },
    ///         },
    ///     });
    /// 
    ///     var baz = new Boundary.CredentialLibraryVaultSshCertificate("baz", new()
    ///     {
    ///         Name = "baz",
    ///         Description = "vault ",
    ///         CredentialStoreId = foo.Id,
    ///         Path = "ssh/issue/foo",
    ///         Username = "foo",
    ///         KeyType = "rsa",
    ///         KeyBits = 4096,
    ///         Extensions = 
    ///         {
    ///             { "permit-pty", "" },
    ///             { "permit-X11-forwarding", "" },
    ///         },
    ///         CriticalOptions = 
    ///         {
    ///             { "force-command", "/bin/some_script" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import boundary:index/credentialLibraryVaultSshCertificate:CredentialLibraryVaultSshCertificate foo &lt;my-id&gt;
    /// ```
    /// </summary>
    [BoundaryResourceType("boundary:index/credentialLibraryVaultSshCertificate:CredentialLibraryVaultSshCertificate")]
    public partial class CredentialLibraryVaultSshCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Principals to be signed as "valid_principles" in addition to username.
        /// </summary>
        [Output("additionalValidPrincipals")]
        public Output<ImmutableArray<string>> AdditionalValidPrincipals { get; private set; } = null!;

        /// <summary>
        /// The ID of the credential store that this library belongs to.
        /// </summary>
        [Output("credentialStoreId")]
        public Output<string> CredentialStoreId { get; private set; } = null!;

        /// <summary>
        /// Specifies a map of the critical options that the certificate should be signed for.
        /// </summary>
        [Output("criticalOptions")]
        public Output<ImmutableDictionary<string, string>?> CriticalOptions { get; private set; } = null!;

        /// <summary>
        /// The Vault credential library description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies a map of the extensions that the certificate should be signed for.
        /// </summary>
        [Output("extensions")]
        public Output<ImmutableDictionary<string, string>?> Extensions { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of bits to use for the generated keys.
        /// </summary>
        [Output("keyBits")]
        public Output<int?> KeyBits { get; private set; } = null!;

        /// <summary>
        /// Specifies the key id a certificate should have.
        /// </summary>
        [Output("keyId")]
        public Output<string?> KeyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the desired key type; must be ed25519, ecdsa, or rsa.
        /// </summary>
        [Output("keyType")]
        public Output<string?> KeyType { get; private set; } = null!;

        /// <summary>
        /// The Vault credential library name. Defaults to the resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The path in Vault to request credentials from.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Specifies the requested time to live for a certificate returned from the library.
        /// </summary>
        [Output("ttl")]
        public Output<string?> Ttl { get; private set; } = null!;

        /// <summary>
        /// The username to use with the certificate returned by the library.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a CredentialLibraryVaultSshCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CredentialLibraryVaultSshCertificate(string name, CredentialLibraryVaultSshCertificateArgs args, CustomResourceOptions? options = null)
            : base("boundary:index/credentialLibraryVaultSshCertificate:CredentialLibraryVaultSshCertificate", name, args ?? new CredentialLibraryVaultSshCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CredentialLibraryVaultSshCertificate(string name, Input<string> id, CredentialLibraryVaultSshCertificateState? state = null, CustomResourceOptions? options = null)
            : base("boundary:index/credentialLibraryVaultSshCertificate:CredentialLibraryVaultSshCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CredentialLibraryVaultSshCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CredentialLibraryVaultSshCertificate Get(string name, Input<string> id, CredentialLibraryVaultSshCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new CredentialLibraryVaultSshCertificate(name, id, state, options);
        }
    }

    public sealed class CredentialLibraryVaultSshCertificateArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalValidPrincipals")]
        private InputList<string>? _additionalValidPrincipals;

        /// <summary>
        /// Principals to be signed as "valid_principles" in addition to username.
        /// </summary>
        public InputList<string> AdditionalValidPrincipals
        {
            get => _additionalValidPrincipals ?? (_additionalValidPrincipals = new InputList<string>());
            set => _additionalValidPrincipals = value;
        }

        /// <summary>
        /// The ID of the credential store that this library belongs to.
        /// </summary>
        [Input("credentialStoreId", required: true)]
        public Input<string> CredentialStoreId { get; set; } = null!;

        [Input("criticalOptions")]
        private InputMap<string>? _criticalOptions;

        /// <summary>
        /// Specifies a map of the critical options that the certificate should be signed for.
        /// </summary>
        public InputMap<string> CriticalOptions
        {
            get => _criticalOptions ?? (_criticalOptions = new InputMap<string>());
            set => _criticalOptions = value;
        }

        /// <summary>
        /// The Vault credential library description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("extensions")]
        private InputMap<string>? _extensions;

        /// <summary>
        /// Specifies a map of the extensions that the certificate should be signed for.
        /// </summary>
        public InputMap<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputMap<string>());
            set => _extensions = value;
        }

        /// <summary>
        /// Specifies the number of bits to use for the generated keys.
        /// </summary>
        [Input("keyBits")]
        public Input<int>? KeyBits { get; set; }

        /// <summary>
        /// Specifies the key id a certificate should have.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// Specifies the desired key type; must be ed25519, ecdsa, or rsa.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// The Vault credential library name. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The path in Vault to request credentials from.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Specifies the requested time to live for a certificate returned from the library.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        /// <summary>
        /// The username to use with the certificate returned by the library.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public CredentialLibraryVaultSshCertificateArgs()
        {
        }
        public static new CredentialLibraryVaultSshCertificateArgs Empty => new CredentialLibraryVaultSshCertificateArgs();
    }

    public sealed class CredentialLibraryVaultSshCertificateState : global::Pulumi.ResourceArgs
    {
        [Input("additionalValidPrincipals")]
        private InputList<string>? _additionalValidPrincipals;

        /// <summary>
        /// Principals to be signed as "valid_principles" in addition to username.
        /// </summary>
        public InputList<string> AdditionalValidPrincipals
        {
            get => _additionalValidPrincipals ?? (_additionalValidPrincipals = new InputList<string>());
            set => _additionalValidPrincipals = value;
        }

        /// <summary>
        /// The ID of the credential store that this library belongs to.
        /// </summary>
        [Input("credentialStoreId")]
        public Input<string>? CredentialStoreId { get; set; }

        [Input("criticalOptions")]
        private InputMap<string>? _criticalOptions;

        /// <summary>
        /// Specifies a map of the critical options that the certificate should be signed for.
        /// </summary>
        public InputMap<string> CriticalOptions
        {
            get => _criticalOptions ?? (_criticalOptions = new InputMap<string>());
            set => _criticalOptions = value;
        }

        /// <summary>
        /// The Vault credential library description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("extensions")]
        private InputMap<string>? _extensions;

        /// <summary>
        /// Specifies a map of the extensions that the certificate should be signed for.
        /// </summary>
        public InputMap<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputMap<string>());
            set => _extensions = value;
        }

        /// <summary>
        /// Specifies the number of bits to use for the generated keys.
        /// </summary>
        [Input("keyBits")]
        public Input<int>? KeyBits { get; set; }

        /// <summary>
        /// Specifies the key id a certificate should have.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// Specifies the desired key type; must be ed25519, ecdsa, or rsa.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// The Vault credential library name. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The path in Vault to request credentials from.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Specifies the requested time to live for a certificate returned from the library.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        /// <summary>
        /// The username to use with the certificate returned by the library.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public CredentialLibraryVaultSshCertificateState()
        {
        }
        public static new CredentialLibraryVaultSshCertificateState Empty => new CredentialLibraryVaultSshCertificateState();
    }
}
