// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Boundary
{
    [BoundaryResourceType("boundary:index/credentialSshPrivateKey:CredentialSshPrivateKey")]
    public partial class CredentialSshPrivateKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the credential store this credential belongs to.
        /// </summary>
        [Output("credentialStoreId")]
        public Output<string> CredentialStoreId { get; private set; } = null!;

        /// <summary>
        /// The description of the credential.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the credential. Defaults to the resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The private key associated with the credential.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// The private key hmac.
        /// </summary>
        [Output("privateKeyHmac")]
        public Output<string> PrivateKeyHmac { get; private set; } = null!;

        /// <summary>
        /// The passphrase of the private key associated with the credential.
        /// </summary>
        [Output("privateKeyPassphrase")]
        public Output<string?> PrivateKeyPassphrase { get; private set; } = null!;

        /// <summary>
        /// The private key passphrase hmac.
        /// </summary>
        [Output("privateKeyPassphraseHmac")]
        public Output<string> PrivateKeyPassphraseHmac { get; private set; } = null!;

        /// <summary>
        /// The username associated with the credential.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a CredentialSshPrivateKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CredentialSshPrivateKey(string name, CredentialSshPrivateKeyArgs args, CustomResourceOptions? options = null)
            : base("boundary:index/credentialSshPrivateKey:CredentialSshPrivateKey", name, args ?? new CredentialSshPrivateKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CredentialSshPrivateKey(string name, Input<string> id, CredentialSshPrivateKeyState? state = null, CustomResourceOptions? options = null)
            : base("boundary:index/credentialSshPrivateKey:CredentialSshPrivateKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "privateKey",
                    "privateKeyPassphrase",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CredentialSshPrivateKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CredentialSshPrivateKey Get(string name, Input<string> id, CredentialSshPrivateKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new CredentialSshPrivateKey(name, id, state, options);
        }
    }

    public sealed class CredentialSshPrivateKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the credential store this credential belongs to.
        /// </summary>
        [Input("credentialStoreId", required: true)]
        public Input<string> CredentialStoreId { get; set; } = null!;

        /// <summary>
        /// The description of the credential.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the credential. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey", required: true)]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private key associated with the credential.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKeyPassphrase")]
        private Input<string>? _privateKeyPassphrase;

        /// <summary>
        /// The passphrase of the private key associated with the credential.
        /// </summary>
        public Input<string>? PrivateKeyPassphrase
        {
            get => _privateKeyPassphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyPassphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The username associated with the credential.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public CredentialSshPrivateKeyArgs()
        {
        }
        public static new CredentialSshPrivateKeyArgs Empty => new CredentialSshPrivateKeyArgs();
    }

    public sealed class CredentialSshPrivateKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the credential store this credential belongs to.
        /// </summary>
        [Input("credentialStoreId")]
        public Input<string>? CredentialStoreId { get; set; }

        /// <summary>
        /// The description of the credential.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the credential. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private key associated with the credential.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The private key hmac.
        /// </summary>
        [Input("privateKeyHmac")]
        public Input<string>? PrivateKeyHmac { get; set; }

        [Input("privateKeyPassphrase")]
        private Input<string>? _privateKeyPassphrase;

        /// <summary>
        /// The passphrase of the private key associated with the credential.
        /// </summary>
        public Input<string>? PrivateKeyPassphrase
        {
            get => _privateKeyPassphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyPassphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The private key passphrase hmac.
        /// </summary>
        [Input("privateKeyPassphraseHmac")]
        public Input<string>? PrivateKeyPassphraseHmac { get; set; }

        /// <summary>
        /// The username associated with the credential.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public CredentialSshPrivateKeyState()
        {
        }
        public static new CredentialSshPrivateKeyState Empty => new CredentialSshPrivateKeyState();
    }
}
