// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Boundary
{
    public static class GetUser
    {
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("boundary:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("boundary:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());

        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("boundary:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("scopeId")]
        public string? ScopeId { get; set; }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("scopeId")]
        public Input<string>? ScopeId { get; set; }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        public readonly ImmutableArray<string> AccountIds;
        public readonly ImmutableArray<string> AuthorizedActions;
        public readonly string Description;
        public readonly string Id;
        public readonly string LoginName;
        public readonly string Name;
        public readonly string PrimaryAccountId;
        public readonly string? ScopeId;
        public readonly ImmutableArray<Outputs.GetUserScopeResult> Scopes;

        [OutputConstructor]
        private GetUserResult(
            ImmutableArray<string> accountIds,

            ImmutableArray<string> authorizedActions,

            string description,

            string id,

            string loginName,

            string name,

            string primaryAccountId,

            string? scopeId,

            ImmutableArray<Outputs.GetUserScopeResult> scopes)
        {
            AccountIds = accountIds;
            AuthorizedActions = authorizedActions;
            Description = description;
            Id = id;
            LoginName = loginName;
            Name = name;
            PrimaryAccountId = primaryAccountId;
            ScopeId = scopeId;
            Scopes = scopes;
        }
    }
}
