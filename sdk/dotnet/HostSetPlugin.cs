// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Boundary
{
    /// <summary>
    /// The host_set_plugin resource allows you to configure a Boundary host set. Host sets are always part of a host catalog, so a host catalog resource should be used inline or you should have the host catalog ID in hand to successfully configure a host set.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Boundary = Pulumi.Boundary;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var org = new Boundary.Scope("org", new()
    ///     {
    ///         Name = "organization_one",
    ///         Description = "My first scope!",
    ///         ScopeId = "global",
    ///         AutoCreateAdminRole = true,
    ///         AutoCreateDefaultRole = true,
    ///     });
    /// 
    ///     var project = new Boundary.Scope("project", new()
    ///     {
    ///         Name = "project_one",
    ///         Description = "My first scope!",
    ///         ScopeId = org.Id,
    ///         AutoCreateAdminRole = true,
    ///     });
    /// 
    ///     // For more information about the aws plugin, please visit here:
    ///     // https://github.com/hashicorp/boundary-plugin-host-aws
    ///     //
    ///     // For more information about aws users, please visit here:
    ///     // https://learn.hashicorp.com/tutorials/boundary/aws-host-catalogs?in=boundary/oss-access-management#configure-terraform-and-iam-user-privileges
    ///     var awsExample = new Boundary.HostCatalogPlugin("aws_example", new()
    ///     {
    ///         Name = "My aws catalog",
    ///         Description = "My first host catalog!",
    ///         ScopeId = project.Id,
    ///         PluginName = "aws",
    ///         AttributesJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["region"] = "us-east-1",
    ///         }),
    ///         SecretsJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["access_key_id"] = "aws_access_key_id_value",
    ///             ["secret_access_key"] = "aws_secret_access_key_value",
    ///         }),
    ///     });
    /// 
    ///     var web = new Boundary.HostSetPlugin("web", new()
    ///     {
    ///         Name = "My web host set plugin",
    ///         HostCatalogId = awsExample.Id,
    ///         AttributesJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["filters"] = new[]
    ///             {
    ///                 "tag:service-type=web",
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var foobar = new Boundary.HostSetPlugin("foobar", new()
    ///     {
    ///         Name = "My foobar host set plugin",
    ///         HostCatalogId = awsExample.Id,
    ///         PreferredEndpoints = new[]
    ///         {
    ///             "cidr:54.0.0.0/8",
    ///         },
    ///         AttributesJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["filters"] = new[]
    ///             {
    ///                 "tag-key=foo",
    ///                 "tag-key=bar",
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var launch = new Boundary.HostSetPlugin("launch", new()
    ///     {
    ///         Name = "My launch host set plugin",
    ///         HostCatalogId = awsExample.Id,
    ///         SyncIntervalSeconds = 60,
    ///         AttributesJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["filters"] = new[]
    ///             {
    ///                 "tag:development=prod,dev",
    ///                 "launch-time=2022-01-04T*",
    ///             },
    ///         }),
    ///     });
    /// 
    ///     // For more information about the azure plugin, please visit here:
    ///     // https://github.com/hashicorp/boundary-plugin-host-azure
    ///     //
    ///     // For more information about azure ad applications, please visit here:
    ///     // https://learn.hashicorp.com/tutorials/boundary/azure-host-catalogs#register-a-new-azure-ad-application-1
    ///     var azureExample = new Boundary.HostCatalogPlugin("azure_example", new()
    ///     {
    ///         Name = "My azure catalog",
    ///         Description = "My second host catalog!",
    ///         ScopeId = project.Id,
    ///         PluginName = "azure",
    ///         AttributesJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["disable_credential_rotation"] = "true",
    ///             ["tenant_id"] = "ARM_TENANT_ID",
    ///             ["subscription_id"] = "ARM_SUBSCRIPTION_ID",
    ///             ["client_id"] = "ARM_CLIENT_ID",
    ///         }),
    ///         SecretsJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["secret_value"] = "ARM_CLIENT_SECRET",
    ///         }),
    ///     });
    /// 
    ///     var database = new Boundary.HostSetPlugin("database", new()
    ///     {
    ///         Name = "My database host set plugin",
    ///         HostCatalogId = azureExample.Id,
    ///         AttributesJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["filter"] = "tagName eq 'service-type' and tagValue eq 'database'",
    ///         }),
    ///     });
    /// 
    ///     var foodev = new Boundary.HostSetPlugin("foodev", new()
    ///     {
    ///         Name = "My foodev host set plugin",
    ///         HostCatalogId = azureExample.Id,
    ///         PreferredEndpoints = new[]
    ///         {
    ///             "cidr:54.0.0.0/8",
    ///         },
    ///         SyncIntervalSeconds = 60,
    ///         AttributesJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["filter"] = "tagName eq 'tag-key' and tagValue eq 'foo'",
    ///             ["filter"] = "tagName eq 'application' and tagValue eq 'dev'",
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import boundary:index/hostSetPlugin:HostSetPlugin foo &lt;my-id&gt;
    /// ```
    /// </summary>
    [BoundaryResourceType("boundary:index/hostSetPlugin:HostSetPlugin")]
    public partial class HostSetPlugin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The attributes for the host set. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" or remove the block to clear all attributes in the host set.
        /// </summary>
        [Output("attributesJson")]
        public Output<string?> AttributesJson { get; private set; } = null!;

        /// <summary>
        /// The host set description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The catalog for the host set.
        /// </summary>
        [Output("hostCatalogId")]
        public Output<string> HostCatalogId { get; private set; } = null!;

        /// <summary>
        /// The host set name. Defaults to the resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ordered list of preferred endpoints.
        /// </summary>
        [Output("preferredEndpoints")]
        public Output<ImmutableArray<string>> PreferredEndpoints { get; private set; } = null!;

        /// <summary>
        /// The value to set for the sync interval seconds.
        /// </summary>
        [Output("syncIntervalSeconds")]
        public Output<int?> SyncIntervalSeconds { get; private set; } = null!;

        /// <summary>
        /// The type of host set
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a HostSetPlugin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HostSetPlugin(string name, HostSetPluginArgs args, CustomResourceOptions? options = null)
            : base("boundary:index/hostSetPlugin:HostSetPlugin", name, args ?? new HostSetPluginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HostSetPlugin(string name, Input<string> id, HostSetPluginState? state = null, CustomResourceOptions? options = null)
            : base("boundary:index/hostSetPlugin:HostSetPlugin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HostSetPlugin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HostSetPlugin Get(string name, Input<string> id, HostSetPluginState? state = null, CustomResourceOptions? options = null)
        {
            return new HostSetPlugin(name, id, state, options);
        }
    }

    public sealed class HostSetPluginArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The attributes for the host set. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" or remove the block to clear all attributes in the host set.
        /// </summary>
        [Input("attributesJson")]
        public Input<string>? AttributesJson { get; set; }

        /// <summary>
        /// The host set description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The catalog for the host set.
        /// </summary>
        [Input("hostCatalogId", required: true)]
        public Input<string> HostCatalogId { get; set; } = null!;

        /// <summary>
        /// The host set name. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("preferredEndpoints")]
        private InputList<string>? _preferredEndpoints;

        /// <summary>
        /// The ordered list of preferred endpoints.
        /// </summary>
        public InputList<string> PreferredEndpoints
        {
            get => _preferredEndpoints ?? (_preferredEndpoints = new InputList<string>());
            set => _preferredEndpoints = value;
        }

        /// <summary>
        /// The value to set for the sync interval seconds.
        /// </summary>
        [Input("syncIntervalSeconds")]
        public Input<int>? SyncIntervalSeconds { get; set; }

        /// <summary>
        /// The type of host set
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public HostSetPluginArgs()
        {
        }
        public static new HostSetPluginArgs Empty => new HostSetPluginArgs();
    }

    public sealed class HostSetPluginState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The attributes for the host set. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" or remove the block to clear all attributes in the host set.
        /// </summary>
        [Input("attributesJson")]
        public Input<string>? AttributesJson { get; set; }

        /// <summary>
        /// The host set description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The catalog for the host set.
        /// </summary>
        [Input("hostCatalogId")]
        public Input<string>? HostCatalogId { get; set; }

        /// <summary>
        /// The host set name. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("preferredEndpoints")]
        private InputList<string>? _preferredEndpoints;

        /// <summary>
        /// The ordered list of preferred endpoints.
        /// </summary>
        public InputList<string> PreferredEndpoints
        {
            get => _preferredEndpoints ?? (_preferredEndpoints = new InputList<string>());
            set => _preferredEndpoints = value;
        }

        /// <summary>
        /// The value to set for the sync interval seconds.
        /// </summary>
        [Input("syncIntervalSeconds")]
        public Input<int>? SyncIntervalSeconds { get; set; }

        /// <summary>
        /// The type of host set
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public HostSetPluginState()
        {
        }
        public static new HostSetPluginState Empty => new HostSetPluginState();
    }
}
