// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Boundary
{
    /// <summary>
    /// The storage policy resource allows you to configure a Boundary storage policy. Storage policies allow an admin to configure how long session recordings must be stored and when to delete them. Storage policies must be applied to the global scope or an org scope in order to take effect.
    /// </summary>
    [BoundaryResourceType("boundary:index/policyStorage:PolicyStorage")]
    public partial class PolicyStorage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically delete. However, delete*after*days and retain*for*days cannot both be 0.
        /// </summary>
        [Output("deleteAfterDays")]
        public Output<int?> DeleteAfterDays { get; private set; } = null!;

        /// <summary>
        /// Whether or not the associated delete*after*days value can be overridden by org scopes. Note: if the associated delete*after*days value is 0, overridable is ignored
        /// </summary>
        [Output("deleteAfterOverridable")]
        public Output<bool?> DeleteAfterOverridable { get; private set; } = null!;

        /// <summary>
        /// The policy description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The policy name. Defaults to the resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However, retain*for*days and delete*after*days cannot both be 0.
        /// </summary>
        [Output("retainForDays")]
        public Output<int?> RetainForDays { get; private set; } = null!;

        /// <summary>
        /// Whether or not the associated retain*for*days value can be overridden by org scopes. Note: if the associated retain*for*days value is 0, overridable is ignored.
        /// </summary>
        [Output("retainForOverridable")]
        public Output<bool?> RetainForOverridable { get; private set; } = null!;

        /// <summary>
        /// The scope for this policy.
        /// </summary>
        [Output("scopeId")]
        public Output<string> ScopeId { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyStorage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyStorage(string name, PolicyStorageArgs args, CustomResourceOptions? options = null)
            : base("boundary:index/policyStorage:PolicyStorage", name, args ?? new PolicyStorageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyStorage(string name, Input<string> id, PolicyStorageState? state = null, CustomResourceOptions? options = null)
            : base("boundary:index/policyStorage:PolicyStorage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyStorage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyStorage Get(string name, Input<string> id, PolicyStorageState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyStorage(name, id, state, options);
        }
    }

    public sealed class PolicyStorageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically delete. However, delete*after*days and retain*for*days cannot both be 0.
        /// </summary>
        [Input("deleteAfterDays")]
        public Input<int>? DeleteAfterDays { get; set; }

        /// <summary>
        /// Whether or not the associated delete*after*days value can be overridden by org scopes. Note: if the associated delete*after*days value is 0, overridable is ignored
        /// </summary>
        [Input("deleteAfterOverridable")]
        public Input<bool>? DeleteAfterOverridable { get; set; }

        /// <summary>
        /// The policy description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The policy name. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However, retain*for*days and delete*after*days cannot both be 0.
        /// </summary>
        [Input("retainForDays")]
        public Input<int>? RetainForDays { get; set; }

        /// <summary>
        /// Whether or not the associated retain*for*days value can be overridden by org scopes. Note: if the associated retain*for*days value is 0, overridable is ignored.
        /// </summary>
        [Input("retainForOverridable")]
        public Input<bool>? RetainForOverridable { get; set; }

        /// <summary>
        /// The scope for this policy.
        /// </summary>
        [Input("scopeId", required: true)]
        public Input<string> ScopeId { get; set; } = null!;

        public PolicyStorageArgs()
        {
        }
        public static new PolicyStorageArgs Empty => new PolicyStorageArgs();
    }

    public sealed class PolicyStorageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically delete. However, delete*after*days and retain*for*days cannot both be 0.
        /// </summary>
        [Input("deleteAfterDays")]
        public Input<int>? DeleteAfterDays { get; set; }

        /// <summary>
        /// Whether or not the associated delete*after*days value can be overridden by org scopes. Note: if the associated delete*after*days value is 0, overridable is ignored
        /// </summary>
        [Input("deleteAfterOverridable")]
        public Input<bool>? DeleteAfterOverridable { get; set; }

        /// <summary>
        /// The policy description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The policy name. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However, retain*for*days and delete*after*days cannot both be 0.
        /// </summary>
        [Input("retainForDays")]
        public Input<int>? RetainForDays { get; set; }

        /// <summary>
        /// Whether or not the associated retain*for*days value can be overridden by org scopes. Note: if the associated retain*for*days value is 0, overridable is ignored.
        /// </summary>
        [Input("retainForOverridable")]
        public Input<bool>? RetainForOverridable { get; set; }

        /// <summary>
        /// The scope for this policy.
        /// </summary>
        [Input("scopeId")]
        public Input<string>? ScopeId { get; set; }

        public PolicyStorageState()
        {
        }
        public static new PolicyStorageState Empty => new PolicyStorageState();
    }
}
