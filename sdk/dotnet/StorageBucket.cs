// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Boundary
{
    /// <summary>
    /// The storage bucket resource allows you to configure a Boundary storage bucket. A storage bucket can only belong to the Global scope or an Org scope. At this time, the only supported storage for storage buckets is AWS S3. This feature requires Boundary Enterprise or Boundary HCP.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Boundary = Pulumi.Boundary;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var org = new Boundary.Scope("org", new()
    ///     {
    ///         Name = "organization_one",
    ///         Description = "My first scope!",
    ///         ScopeId = @global.Id,
    ///         AutoCreateAdminRole = true,
    ///         AutoCreateDefaultRole = true,
    ///     });
    /// 
    ///     var awsStaticCredentialsExample = new Boundary.StorageBucket("aws_static_credentials_example", new()
    ///     {
    ///         Name = "My aws storage bucket with static credentials",
    ///         Description = "My first storage bucket!",
    ///         ScopeId = org.Id,
    ///         PluginName = "aws",
    ///         BucketName = "mybucket",
    ///         AttributesJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["region"] = "us-east-1",
    ///         }),
    ///         SecretsJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["access_key_id"] = "aws_access_key_id_value",
    ///             ["secret_access_key"] = "aws_secret_access_key_value",
    ///         }),
    ///         WorkerFilter = "\"pki\" in \"/tags/type\"",
    ///     });
    /// 
    ///     var awsDynamicCredentialsExample = new Boundary.StorageBucket("aws_dynamic_credentials_example", new()
    ///     {
    ///         Name = "My aws storage bucket with dynamic credentials",
    ///         Description = "My first storage bucket!",
    ///         ScopeId = org.Id,
    ///         PluginName = "aws",
    ///         BucketName = "mybucket",
    ///         AttributesJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["region"] = "us-east-1",
    ///             ["role_arn"] = "arn:aws:iam::123456789012:role/S3Access",
    ///             ["disable_credential_rotation"] = "true",
    ///         }),
    ///         WorkerFilter = "\"pki\" in \"/tags/type\"",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import boundary:index/storageBucket:StorageBucket foo &lt;my-id&gt;
    /// ```
    /// </summary>
    [BoundaryResourceType("boundary:index/storageBucket:StorageBucket")]
    public partial class StorageBucket : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The attributes for the storage bucket. The "region" attribute field is required when creating an AWS storage bucket. Values are either encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" or remove the block to clear all attributes in the storage bucket.
        /// </summary>
        [Output("attributesJson")]
        public Output<string?> AttributesJson { get; private set; } = null!;

        /// <summary>
        /// The name of the bucket within the external object store service.
        /// </summary>
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        /// <summary>
        /// The prefix used to organize the data held within the external object store.
        /// </summary>
        [Output("bucketPrefix")]
        public Output<string?> BucketPrefix { get; private set; } = null!;

        /// <summary>
        /// The storage bucket description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Internal only. Used to force update so that we can always check the value of secrets.
        /// </summary>
        [Output("internalForceUpdate")]
        public Output<string> InternalForceUpdate { get; private set; } = null!;

        /// <summary>
        /// Internal only. The Boundary-provided HMAC used to calculate the current value of the HMAC'd config. Used for drift detection.
        /// </summary>
        [Output("internalHmacUsedForSecretsConfigHmac")]
        public Output<string> InternalHmacUsedForSecretsConfigHmac { get; private set; } = null!;

        /// <summary>
        /// Internal only. HMAC of (serverSecretsHmac + config secrets). Used for proper secrets handling.
        /// </summary>
        [Output("internalSecretsConfigHmac")]
        public Output<string> InternalSecretsConfigHmac { get; private set; } = null!;

        /// <summary>
        /// The storage bucket name. Defaults to the resource name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the plugin that should back the resource. This or plugin_name must be defined.
        /// </summary>
        [Output("pluginId")]
        public Output<string> PluginId { get; private set; } = null!;

        /// <summary>
        /// The name of the plugin that should back the resource. This or plugin_id must be defined.
        /// </summary>
        [Output("pluginName")]
        public Output<string?> PluginName { get; private set; } = null!;

        /// <summary>
        /// The scope for this storage bucket.
        /// </summary>
        [Output("scopeId")]
        public Output<string> ScopeId { get; private set; } = null!;

        /// <summary>
        /// The HMAC'd secrets value returned from the server.
        /// </summary>
        [Output("secretsHmac")]
        public Output<string> SecretsHmac { get; private set; } = null!;

        /// <summary>
        /// The secrets for the storage bucket. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" to clear any existing values. NOTE: Unlike "attributes_json", removing this block will NOT clear secrets from the storage bucket; this allows injecting secrets for one call, then removing them for storage.
        /// </summary>
        [Output("secretsJson")]
        public Output<string?> SecretsJson { get; private set; } = null!;

        /// <summary>
        /// Filters to the worker(s) that can handle requests for this storage bucket. The filter must match an existing worker in order to create a storage bucket.
        /// </summary>
        [Output("workerFilter")]
        public Output<string> WorkerFilter { get; private set; } = null!;


        /// <summary>
        /// Create a StorageBucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageBucket(string name, StorageBucketArgs args, CustomResourceOptions? options = null)
            : base("boundary:index/storageBucket:StorageBucket", name, args ?? new StorageBucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageBucket(string name, Input<string> id, StorageBucketState? state = null, CustomResourceOptions? options = null)
            : base("boundary:index/storageBucket:StorageBucket", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secretsJson",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageBucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageBucket Get(string name, Input<string> id, StorageBucketState? state = null, CustomResourceOptions? options = null)
        {
            return new StorageBucket(name, id, state, options);
        }
    }

    public sealed class StorageBucketArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The attributes for the storage bucket. The "region" attribute field is required when creating an AWS storage bucket. Values are either encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" or remove the block to clear all attributes in the storage bucket.
        /// </summary>
        [Input("attributesJson")]
        public Input<string>? AttributesJson { get; set; }

        /// <summary>
        /// The name of the bucket within the external object store service.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// The prefix used to organize the data held within the external object store.
        /// </summary>
        [Input("bucketPrefix")]
        public Input<string>? BucketPrefix { get; set; }

        /// <summary>
        /// The storage bucket description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The storage bucket name. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the plugin that should back the resource. This or plugin_name must be defined.
        /// </summary>
        [Input("pluginId")]
        public Input<string>? PluginId { get; set; }

        /// <summary>
        /// The name of the plugin that should back the resource. This or plugin_id must be defined.
        /// </summary>
        [Input("pluginName")]
        public Input<string>? PluginName { get; set; }

        /// <summary>
        /// The scope for this storage bucket.
        /// </summary>
        [Input("scopeId", required: true)]
        public Input<string> ScopeId { get; set; } = null!;

        [Input("secretsJson")]
        private Input<string>? _secretsJson;

        /// <summary>
        /// The secrets for the storage bucket. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" to clear any existing values. NOTE: Unlike "attributes_json", removing this block will NOT clear secrets from the storage bucket; this allows injecting secrets for one call, then removing them for storage.
        /// </summary>
        public Input<string>? SecretsJson
        {
            get => _secretsJson;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretsJson = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Filters to the worker(s) that can handle requests for this storage bucket. The filter must match an existing worker in order to create a storage bucket.
        /// </summary>
        [Input("workerFilter", required: true)]
        public Input<string> WorkerFilter { get; set; } = null!;

        public StorageBucketArgs()
        {
        }
        public static new StorageBucketArgs Empty => new StorageBucketArgs();
    }

    public sealed class StorageBucketState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The attributes for the storage bucket. The "region" attribute field is required when creating an AWS storage bucket. Values are either encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" or remove the block to clear all attributes in the storage bucket.
        /// </summary>
        [Input("attributesJson")]
        public Input<string>? AttributesJson { get; set; }

        /// <summary>
        /// The name of the bucket within the external object store service.
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// The prefix used to organize the data held within the external object store.
        /// </summary>
        [Input("bucketPrefix")]
        public Input<string>? BucketPrefix { get; set; }

        /// <summary>
        /// The storage bucket description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Internal only. Used to force update so that we can always check the value of secrets.
        /// </summary>
        [Input("internalForceUpdate")]
        public Input<string>? InternalForceUpdate { get; set; }

        /// <summary>
        /// Internal only. The Boundary-provided HMAC used to calculate the current value of the HMAC'd config. Used for drift detection.
        /// </summary>
        [Input("internalHmacUsedForSecretsConfigHmac")]
        public Input<string>? InternalHmacUsedForSecretsConfigHmac { get; set; }

        /// <summary>
        /// Internal only. HMAC of (serverSecretsHmac + config secrets). Used for proper secrets handling.
        /// </summary>
        [Input("internalSecretsConfigHmac")]
        public Input<string>? InternalSecretsConfigHmac { get; set; }

        /// <summary>
        /// The storage bucket name. Defaults to the resource name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the plugin that should back the resource. This or plugin_name must be defined.
        /// </summary>
        [Input("pluginId")]
        public Input<string>? PluginId { get; set; }

        /// <summary>
        /// The name of the plugin that should back the resource. This or plugin_id must be defined.
        /// </summary>
        [Input("pluginName")]
        public Input<string>? PluginName { get; set; }

        /// <summary>
        /// The scope for this storage bucket.
        /// </summary>
        [Input("scopeId")]
        public Input<string>? ScopeId { get; set; }

        /// <summary>
        /// The HMAC'd secrets value returned from the server.
        /// </summary>
        [Input("secretsHmac")]
        public Input<string>? SecretsHmac { get; set; }

        [Input("secretsJson")]
        private Input<string>? _secretsJson;

        /// <summary>
        /// The secrets for the storage bucket. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file:// or env:// path. Set to a string "null" to clear any existing values. NOTE: Unlike "attributes_json", removing this block will NOT clear secrets from the storage bucket; this allows injecting secrets for one call, then removing them for storage.
        /// </summary>
        public Input<string>? SecretsJson
        {
            get => _secretsJson;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretsJson = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Filters to the worker(s) that can handle requests for this storage bucket. The filter must match an existing worker in order to create a storage bucket.
        /// </summary>
        [Input("workerFilter")]
        public Input<string>? WorkerFilter { get; set; }

        public StorageBucketState()
        {
        }
        public static new StorageBucketState Empty => new StorageBucketState();
    }
}
