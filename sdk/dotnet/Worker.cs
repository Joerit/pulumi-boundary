// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Boundary
{
    /// <summary>
    /// The resource allows you to create a self-managed worker object.
    /// 
    /// ## Example Usage
    /// 
    /// ### Controller-led worker
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Boundary = Pulumi.Boundary;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var controllerLed = new Boundary.Worker("controller_led", new()
    ///     {
    ///         ScopeId = "global",
    ///         Name = "controller-led-worker-1",
    ///         Description = "self managed worker with controller led auth",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Worker-led worker
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Boundary = Pulumi.Boundary;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var workerLed = new Boundary.Worker("worker_led", new()
    ///     {
    ///         ScopeId = "global",
    ///         Name = "worker-led-worker-1",
    ///         Description = "self managed worker with worker led auth",
    ///         WorkerGeneratedAuthToken = workerGeneratedAuthToken,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import boundary:index/worker:Worker foo &lt;my-id&gt;
    /// ```
    /// </summary>
    [BoundaryResourceType("boundary:index/worker:Worker")]
    public partial class Worker : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The accessible address of the self managed worker.
        /// </summary>
        [Output("address")]
        public Output<string> Address { get; private set; } = null!;

        /// <summary>
        /// A list of actions that the worker is entitled to perform.
        /// </summary>
        [Output("authorizedActions")]
        public Output<ImmutableArray<string>> AuthorizedActions { get; private set; } = null!;

        /// <summary>
        /// A single use token generated by the controller to be passed to the self-managed worker.
        /// </summary>
        [Output("controllerGeneratedActivationToken")]
        public Output<string> ControllerGeneratedActivationToken { get; private set; } = null!;

        /// <summary>
        /// The description for the worker.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name for the worker.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The version of the Boundary binary running on the self managed worker.
        /// </summary>
        [Output("releaseVersion")]
        public Output<int> ReleaseVersion { get; private set; } = null!;

        /// <summary>
        /// The scope for the worker. Defaults to `global`.
        /// </summary>
        [Output("scopeId")]
        public Output<string?> ScopeId { get; private set; } = null!;

        /// <summary>
        /// The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        /// </summary>
        [Output("workerGeneratedAuthToken")]
        public Output<string?> WorkerGeneratedAuthToken { get; private set; } = null!;


        /// <summary>
        /// Create a Worker resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Worker(string name, WorkerArgs? args = null, CustomResourceOptions? options = null)
            : base("boundary:index/worker:Worker", name, args ?? new WorkerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Worker(string name, Input<string> id, WorkerState? state = null, CustomResourceOptions? options = null)
            : base("boundary:index/worker:Worker", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Worker resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Worker Get(string name, Input<string> id, WorkerState? state = null, CustomResourceOptions? options = null)
        {
            return new Worker(name, id, state, options);
        }
    }

    public sealed class WorkerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description for the worker.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name for the worker.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The scope for the worker. Defaults to `global`.
        /// </summary>
        [Input("scopeId")]
        public Input<string>? ScopeId { get; set; }

        /// <summary>
        /// The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        /// </summary>
        [Input("workerGeneratedAuthToken")]
        public Input<string>? WorkerGeneratedAuthToken { get; set; }

        public WorkerArgs()
        {
        }
        public static new WorkerArgs Empty => new WorkerArgs();
    }

    public sealed class WorkerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The accessible address of the self managed worker.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        [Input("authorizedActions")]
        private InputList<string>? _authorizedActions;

        /// <summary>
        /// A list of actions that the worker is entitled to perform.
        /// </summary>
        public InputList<string> AuthorizedActions
        {
            get => _authorizedActions ?? (_authorizedActions = new InputList<string>());
            set => _authorizedActions = value;
        }

        /// <summary>
        /// A single use token generated by the controller to be passed to the self-managed worker.
        /// </summary>
        [Input("controllerGeneratedActivationToken")]
        public Input<string>? ControllerGeneratedActivationToken { get; set; }

        /// <summary>
        /// The description for the worker.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name for the worker.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The version of the Boundary binary running on the self managed worker.
        /// </summary>
        [Input("releaseVersion")]
        public Input<int>? ReleaseVersion { get; set; }

        /// <summary>
        /// The scope for the worker. Defaults to `global`.
        /// </summary>
        [Input("scopeId")]
        public Input<string>? ScopeId { get; set; }

        /// <summary>
        /// The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        /// </summary>
        [Input("workerGeneratedAuthToken")]
        public Input<string>? WorkerGeneratedAuthToken { get; set; }

        public WorkerState()
        {
        }
        public static new WorkerState Empty => new WorkerState();
    }
}
