// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"errors"
	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The target alias resource allows you to configure a Boundary target alias.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/joerit/pulumi-boundary/sdk/go/boundary"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			org, err := boundary.NewScope(ctx, "org", &boundary.ScopeArgs{
//				Name:                  pulumi.String("organization_one"),
//				Description:           pulumi.String("global scope"),
//				ScopeId:               pulumi.String("global"),
//				AutoCreateAdminRole:   pulumi.Bool(true),
//				AutoCreateDefaultRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			project, err := boundary.NewScope(ctx, "project", &boundary.ScopeArgs{
//				Name:                pulumi.String("project_one"),
//				Description:         pulumi.String("My first scope!"),
//				ScopeId:             org.ID(),
//				AutoCreateAdminRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			foo, err := boundary.NewHostCatalogStatic(ctx, "foo", &boundary.HostCatalogStaticArgs{
//				Name:        pulumi.String("test"),
//				Description: pulumi.String("test catalog"),
//				ScopeId:     project.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooHostStatic, err := boundary.NewHostStatic(ctx, "foo", &boundary.HostStaticArgs{
//				Name:          pulumi.String("foo"),
//				HostCatalogId: foo.ID(),
//				Address:       pulumi.String("10.0.0.1"),
//			})
//			if err != nil {
//				return err
//			}
//			bar, err := boundary.NewHostStatic(ctx, "bar", &boundary.HostStaticArgs{
//				Name:          pulumi.String("bar"),
//				HostCatalogId: foo.ID(),
//				Address:       pulumi.String("127.0.0.1"),
//			})
//			if err != nil {
//				return err
//			}
//			fooHostSetStatic, err := boundary.NewHostSetStatic(ctx, "foo", &boundary.HostSetStaticArgs{
//				Name:          pulumi.String("foo"),
//				HostCatalogId: foo.ID(),
//				HostIds: pulumi.StringArray{
//					fooHostStatic.ID(),
//					bar.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooTarget, err := boundary.NewTarget(ctx, "foo", &boundary.TargetArgs{
//				Name:        pulumi.String("foo"),
//				Description: pulumi.String("Foo target"),
//				Type:        pulumi.String("tcp"),
//				DefaultPort: pulumi.Int(22),
//				ScopeId:     project.ID(),
//				HostSourceIds: pulumi.StringArray{
//					fooHostSetStatic.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = boundary.NewAliasTarget(ctx, "example_alias_target", &boundary.AliasTargetArgs{
//				Name:                   pulumi.String("example_alias_target"),
//				Description:            pulumi.String("Example alias to target foo using host boundary_host_static.bar"),
//				ScopeId:                pulumi.String("global"),
//				Value:                  pulumi.String("example.bar.foo.boundary"),
//				DestinationId:          fooTarget.ID(),
//				AuthorizeSessionHostId: bar.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import boundary:index/aliasTarget:AliasTarget example_alias_target <my-id>
// ```
type AliasTarget struct {
	pulumi.CustomResourceState

	// The host id to pass to Boundary when performing an authorize session action.
	AuthorizeSessionHostId pulumi.StringPtrOutput `pulumi:"authorizeSessionHostId"`
	// The alias description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination of the alias.
	DestinationId pulumi.StringPtrOutput `pulumi:"destinationId"`
	// The alias name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope ID.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// The type of alias; hardcoded.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The value of the alias.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewAliasTarget registers a new resource with the given unique name, arguments, and options.
func NewAliasTarget(ctx *pulumi.Context,
	name string, args *AliasTargetArgs, opts ...pulumi.ResourceOption) (*AliasTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AliasTarget
	err := ctx.RegisterResource("boundary:index/aliasTarget:AliasTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAliasTarget gets an existing AliasTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAliasTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AliasTargetState, opts ...pulumi.ResourceOption) (*AliasTarget, error) {
	var resource AliasTarget
	err := ctx.ReadResource("boundary:index/aliasTarget:AliasTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AliasTarget resources.
type aliasTargetState struct {
	// The host id to pass to Boundary when performing an authorize session action.
	AuthorizeSessionHostId *string `pulumi:"authorizeSessionHostId"`
	// The alias description.
	Description *string `pulumi:"description"`
	// The destination of the alias.
	DestinationId *string `pulumi:"destinationId"`
	// The alias name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId *string `pulumi:"scopeId"`
	// The type of alias; hardcoded.
	Type *string `pulumi:"type"`
	// The value of the alias.
	Value *string `pulumi:"value"`
}

type AliasTargetState struct {
	// The host id to pass to Boundary when performing an authorize session action.
	AuthorizeSessionHostId pulumi.StringPtrInput
	// The alias description.
	Description pulumi.StringPtrInput
	// The destination of the alias.
	DestinationId pulumi.StringPtrInput
	// The alias name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringPtrInput
	// The type of alias; hardcoded.
	Type pulumi.StringPtrInput
	// The value of the alias.
	Value pulumi.StringPtrInput
}

func (AliasTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*aliasTargetState)(nil)).Elem()
}

type aliasTargetArgs struct {
	// The host id to pass to Boundary when performing an authorize session action.
	AuthorizeSessionHostId *string `pulumi:"authorizeSessionHostId"`
	// The alias description.
	Description *string `pulumi:"description"`
	// The destination of the alias.
	DestinationId *string `pulumi:"destinationId"`
	// The alias name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId string `pulumi:"scopeId"`
	// The type of alias; hardcoded.
	Type *string `pulumi:"type"`
	// The value of the alias.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a AliasTarget resource.
type AliasTargetArgs struct {
	// The host id to pass to Boundary when performing an authorize session action.
	AuthorizeSessionHostId pulumi.StringPtrInput
	// The alias description.
	Description pulumi.StringPtrInput
	// The destination of the alias.
	DestinationId pulumi.StringPtrInput
	// The alias name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringInput
	// The type of alias; hardcoded.
	Type pulumi.StringPtrInput
	// The value of the alias.
	Value pulumi.StringInput
}

func (AliasTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aliasTargetArgs)(nil)).Elem()
}

type AliasTargetInput interface {
	pulumi.Input

	ToAliasTargetOutput() AliasTargetOutput
	ToAliasTargetOutputWithContext(ctx context.Context) AliasTargetOutput
}

func (*AliasTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasTarget)(nil)).Elem()
}

func (i *AliasTarget) ToAliasTargetOutput() AliasTargetOutput {
	return i.ToAliasTargetOutputWithContext(context.Background())
}

func (i *AliasTarget) ToAliasTargetOutputWithContext(ctx context.Context) AliasTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasTargetOutput)
}

// AliasTargetArrayInput is an input type that accepts AliasTargetArray and AliasTargetArrayOutput values.
// You can construct a concrete instance of `AliasTargetArrayInput` via:
//
//	AliasTargetArray{ AliasTargetArgs{...} }
type AliasTargetArrayInput interface {
	pulumi.Input

	ToAliasTargetArrayOutput() AliasTargetArrayOutput
	ToAliasTargetArrayOutputWithContext(context.Context) AliasTargetArrayOutput
}

type AliasTargetArray []AliasTargetInput

func (AliasTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AliasTarget)(nil)).Elem()
}

func (i AliasTargetArray) ToAliasTargetArrayOutput() AliasTargetArrayOutput {
	return i.ToAliasTargetArrayOutputWithContext(context.Background())
}

func (i AliasTargetArray) ToAliasTargetArrayOutputWithContext(ctx context.Context) AliasTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasTargetArrayOutput)
}

// AliasTargetMapInput is an input type that accepts AliasTargetMap and AliasTargetMapOutput values.
// You can construct a concrete instance of `AliasTargetMapInput` via:
//
//	AliasTargetMap{ "key": AliasTargetArgs{...} }
type AliasTargetMapInput interface {
	pulumi.Input

	ToAliasTargetMapOutput() AliasTargetMapOutput
	ToAliasTargetMapOutputWithContext(context.Context) AliasTargetMapOutput
}

type AliasTargetMap map[string]AliasTargetInput

func (AliasTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AliasTarget)(nil)).Elem()
}

func (i AliasTargetMap) ToAliasTargetMapOutput() AliasTargetMapOutput {
	return i.ToAliasTargetMapOutputWithContext(context.Background())
}

func (i AliasTargetMap) ToAliasTargetMapOutputWithContext(ctx context.Context) AliasTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasTargetMapOutput)
}

type AliasTargetOutput struct{ *pulumi.OutputState }

func (AliasTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AliasTarget)(nil)).Elem()
}

func (o AliasTargetOutput) ToAliasTargetOutput() AliasTargetOutput {
	return o
}

func (o AliasTargetOutput) ToAliasTargetOutputWithContext(ctx context.Context) AliasTargetOutput {
	return o
}

// The host id to pass to Boundary when performing an authorize session action.
func (o AliasTargetOutput) AuthorizeSessionHostId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasTarget) pulumi.StringPtrOutput { return v.AuthorizeSessionHostId }).(pulumi.StringPtrOutput)
}

// The alias description.
func (o AliasTargetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasTarget) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination of the alias.
func (o AliasTargetOutput) DestinationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasTarget) pulumi.StringPtrOutput { return v.DestinationId }).(pulumi.StringPtrOutput)
}

// The alias name. Defaults to the resource name.
func (o AliasTargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AliasTarget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope ID.
func (o AliasTargetOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *AliasTarget) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// The type of alias; hardcoded.
func (o AliasTargetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AliasTarget) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the alias.
func (o AliasTargetOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *AliasTarget) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type AliasTargetArrayOutput struct{ *pulumi.OutputState }

func (AliasTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AliasTarget)(nil)).Elem()
}

func (o AliasTargetArrayOutput) ToAliasTargetArrayOutput() AliasTargetArrayOutput {
	return o
}

func (o AliasTargetArrayOutput) ToAliasTargetArrayOutputWithContext(ctx context.Context) AliasTargetArrayOutput {
	return o
}

func (o AliasTargetArrayOutput) Index(i pulumi.IntInput) AliasTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AliasTarget {
		return vs[0].([]*AliasTarget)[vs[1].(int)]
	}).(AliasTargetOutput)
}

type AliasTargetMapOutput struct{ *pulumi.OutputState }

func (AliasTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AliasTarget)(nil)).Elem()
}

func (o AliasTargetMapOutput) ToAliasTargetMapOutput() AliasTargetMapOutput {
	return o
}

func (o AliasTargetMapOutput) ToAliasTargetMapOutputWithContext(ctx context.Context) AliasTargetMapOutput {
	return o
}

func (o AliasTargetMapOutput) MapIndex(k pulumi.StringInput) AliasTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AliasTarget {
		return vs[0].(map[string]*AliasTarget)[vs[1].(string)]
	}).(AliasTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AliasTargetInput)(nil)).Elem(), &AliasTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*AliasTargetArrayInput)(nil)).Elem(), AliasTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AliasTargetMapInput)(nil)).Elem(), AliasTargetMap{})
	pulumi.RegisterOutputType(AliasTargetOutput{})
	pulumi.RegisterOutputType(AliasTargetArrayOutput{})
	pulumi.RegisterOutputType(AliasTargetMapOutput{})
}
