// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"errors"
	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The LDAP auth method resource allows you to configure a Boundary auth_method_ldap.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/joerit/pulumi-boundary/sdk/go/boundary"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := boundary.NewScope(ctx, "org", &boundary.ScopeArgs{
//				Name:                  pulumi.String("organization_one"),
//				Description:           pulumi.String("My first scope!"),
//				ScopeId:               pulumi.String("global"),
//				AutoCreateAdminRole:   pulumi.Bool(true),
//				AutoCreateDefaultRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = boundary.NewAuthMethodLdap(ctx, "forumsys_ldap", &boundary.AuthMethodLdapArgs{
//				Name:    pulumi.String("forumsys public LDAP"),
//				ScopeId: pulumi.String("global"),
//				Urls: pulumi.StringArray{
//					pulumi.String("ldap://ldap.forumsys.com"),
//				},
//				UserDn:       pulumi.String("dc=example,dc=com"),
//				UserAttr:     pulumi.String("uid"),
//				GroupDn:      pulumi.String("dc=example,dc=com"),
//				BindDn:       pulumi.String("cn=read-only-admin,dc=example,dc=com"),
//				BindPassword: pulumi.String("password"),
//				State:        pulumi.String("active-public"),
//				EnableGroups: pulumi.Bool(true),
//				DiscoverDn:   pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import boundary:index/authMethodLdap:AuthMethodLdap foo <my-id>
// ```
type AuthMethodLdap struct {
	pulumi.CustomResourceState

	// Account attribute maps fullname and email.
	AccountAttributeMaps pulumi.StringArrayOutput `pulumi:"accountAttributeMaps"`
	// Use anon bind when performing LDAP group searches (optional).
	AnonGroupSearch pulumi.BoolPtrOutput `pulumi:"anonGroupSearch"`
	// The distinguished name of entry to bind when performing user and group searches (optional).
	BindDn pulumi.StringPtrOutput `pulumi:"bindDn"`
	// The password to use along with bind-dn performing user and group searches (optional).
	BindPassword pulumi.StringPtrOutput `pulumi:"bindPassword"`
	// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	BindPasswordHmac pulumi.StringOutput `pulumi:"bindPasswordHmac"`
	// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
	Certificates pulumi.StringArrayOutput `pulumi:"certificates"`
	// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
	ClientCertificate pulumi.StringPtrOutput `pulumi:"clientCertificate"`
	// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
	ClientCertificateKey pulumi.StringPtrOutput `pulumi:"clientCertificateKey"`
	// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientCertificateKeyHmac pulumi.StringOutput `pulumi:"clientCertificateKeyHmac"`
	// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
	DereferenceAliases pulumi.StringOutput `pulumi:"dereferenceAliases"`
	// The auth method description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Use anon bind to discover the bind DN of a user (optional).
	DiscoverDn pulumi.BoolPtrOutput `pulumi:"discoverDn"`
	// Find the authenticated user's groups during authentication (optional).
	EnableGroups pulumi.BoolPtrOutput `pulumi:"enableGroups"`
	// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
	GroupAttr pulumi.StringPtrOutput `pulumi:"groupAttr"`
	// The base DN under which to perform group search.
	GroupDn pulumi.StringPtrOutput `pulumi:"groupDn"`
	// A go template used to construct a LDAP group search filter (optional).
	GroupFilter pulumi.StringPtrOutput `pulumi:"groupFilter"`
	// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
	InsecureTls pulumi.BoolPtrOutput `pulumi:"insecureTls"`
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	IsPrimaryForScope pulumi.BoolPtrOutput `pulumi:"isPrimaryForScope"`
	// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
	MaximumPageSize pulumi.IntPtrOutput `pulumi:"maximumPageSize"`
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope ID.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// Issue StartTLS command after connecting (optional).
	StartTls pulumi.BoolPtrOutput `pulumi:"startTls"`
	// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
	State pulumi.StringOutput `pulumi:"state"`
	// The type of auth method; hardcoded.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
	UpnDomain pulumi.StringPtrOutput `pulumi:"upnDomain"`
	// The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
	Urls pulumi.StringArrayOutput `pulumi:"urls"`
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
	UseTokenGroups pulumi.BoolPtrOutput `pulumi:"useTokenGroups"`
	// The attribute on user entry matching the username passed when authenticating (optional).
	UserAttr pulumi.StringPtrOutput `pulumi:"userAttr"`
	// The base DN under which to perform user search (optional).
	UserDn pulumi.StringPtrOutput `pulumi:"userDn"`
	// A go template used to construct a LDAP user search filter (optional).
	UserFilter pulumi.StringPtrOutput `pulumi:"userFilter"`
}

// NewAuthMethodLdap registers a new resource with the given unique name, arguments, and options.
func NewAuthMethodLdap(ctx *pulumi.Context,
	name string, args *AuthMethodLdapArgs, opts ...pulumi.ResourceOption) (*AuthMethodLdap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthMethodLdap
	err := ctx.RegisterResource("boundary:index/authMethodLdap:AuthMethodLdap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthMethodLdap gets an existing AuthMethodLdap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthMethodLdap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthMethodLdapState, opts ...pulumi.ResourceOption) (*AuthMethodLdap, error) {
	var resource AuthMethodLdap
	err := ctx.ReadResource("boundary:index/authMethodLdap:AuthMethodLdap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthMethodLdap resources.
type authMethodLdapState struct {
	// Account attribute maps fullname and email.
	AccountAttributeMaps []string `pulumi:"accountAttributeMaps"`
	// Use anon bind when performing LDAP group searches (optional).
	AnonGroupSearch *bool `pulumi:"anonGroupSearch"`
	// The distinguished name of entry to bind when performing user and group searches (optional).
	BindDn *string `pulumi:"bindDn"`
	// The password to use along with bind-dn performing user and group searches (optional).
	BindPassword *string `pulumi:"bindPassword"`
	// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	BindPasswordHmac *string `pulumi:"bindPasswordHmac"`
	// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
	Certificates []string `pulumi:"certificates"`
	// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
	ClientCertificate *string `pulumi:"clientCertificate"`
	// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
	ClientCertificateKey *string `pulumi:"clientCertificateKey"`
	// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientCertificateKeyHmac *string `pulumi:"clientCertificateKeyHmac"`
	// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
	DereferenceAliases *string `pulumi:"dereferenceAliases"`
	// The auth method description.
	Description *string `pulumi:"description"`
	// Use anon bind to discover the bind DN of a user (optional).
	DiscoverDn *bool `pulumi:"discoverDn"`
	// Find the authenticated user's groups during authentication (optional).
	EnableGroups *bool `pulumi:"enableGroups"`
	// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
	GroupAttr *string `pulumi:"groupAttr"`
	// The base DN under which to perform group search.
	GroupDn *string `pulumi:"groupDn"`
	// A go template used to construct a LDAP group search filter (optional).
	GroupFilter *string `pulumi:"groupFilter"`
	// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
	InsecureTls *bool `pulumi:"insecureTls"`
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	IsPrimaryForScope *bool `pulumi:"isPrimaryForScope"`
	// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
	MaximumPageSize *int `pulumi:"maximumPageSize"`
	// The auth method name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId *string `pulumi:"scopeId"`
	// Issue StartTLS command after connecting (optional).
	StartTls *bool `pulumi:"startTls"`
	// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
	State *string `pulumi:"state"`
	// The type of auth method; hardcoded.
	Type *string `pulumi:"type"`
	// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
	UpnDomain *string `pulumi:"upnDomain"`
	// The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
	Urls []string `pulumi:"urls"`
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
	UseTokenGroups *bool `pulumi:"useTokenGroups"`
	// The attribute on user entry matching the username passed when authenticating (optional).
	UserAttr *string `pulumi:"userAttr"`
	// The base DN under which to perform user search (optional).
	UserDn *string `pulumi:"userDn"`
	// A go template used to construct a LDAP user search filter (optional).
	UserFilter *string `pulumi:"userFilter"`
}

type AuthMethodLdapState struct {
	// Account attribute maps fullname and email.
	AccountAttributeMaps pulumi.StringArrayInput
	// Use anon bind when performing LDAP group searches (optional).
	AnonGroupSearch pulumi.BoolPtrInput
	// The distinguished name of entry to bind when performing user and group searches (optional).
	BindDn pulumi.StringPtrInput
	// The password to use along with bind-dn performing user and group searches (optional).
	BindPassword pulumi.StringPtrInput
	// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	BindPasswordHmac pulumi.StringPtrInput
	// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
	Certificates pulumi.StringArrayInput
	// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
	ClientCertificate pulumi.StringPtrInput
	// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
	ClientCertificateKey pulumi.StringPtrInput
	// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientCertificateKeyHmac pulumi.StringPtrInput
	// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
	DereferenceAliases pulumi.StringPtrInput
	// The auth method description.
	Description pulumi.StringPtrInput
	// Use anon bind to discover the bind DN of a user (optional).
	DiscoverDn pulumi.BoolPtrInput
	// Find the authenticated user's groups during authentication (optional).
	EnableGroups pulumi.BoolPtrInput
	// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
	GroupAttr pulumi.StringPtrInput
	// The base DN under which to perform group search.
	GroupDn pulumi.StringPtrInput
	// A go template used to construct a LDAP group search filter (optional).
	GroupFilter pulumi.StringPtrInput
	// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
	InsecureTls pulumi.BoolPtrInput
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	IsPrimaryForScope pulumi.BoolPtrInput
	// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
	MaximumPageSize pulumi.IntPtrInput
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringPtrInput
	// Issue StartTLS command after connecting (optional).
	StartTls pulumi.BoolPtrInput
	// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
	State pulumi.StringPtrInput
	// The type of auth method; hardcoded.
	Type pulumi.StringPtrInput
	// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
	UpnDomain pulumi.StringPtrInput
	// The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
	Urls pulumi.StringArrayInput
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
	UseTokenGroups pulumi.BoolPtrInput
	// The attribute on user entry matching the username passed when authenticating (optional).
	UserAttr pulumi.StringPtrInput
	// The base DN under which to perform user search (optional).
	UserDn pulumi.StringPtrInput
	// A go template used to construct a LDAP user search filter (optional).
	UserFilter pulumi.StringPtrInput
}

func (AuthMethodLdapState) ElementType() reflect.Type {
	return reflect.TypeOf((*authMethodLdapState)(nil)).Elem()
}

type authMethodLdapArgs struct {
	// Account attribute maps fullname and email.
	AccountAttributeMaps []string `pulumi:"accountAttributeMaps"`
	// Use anon bind when performing LDAP group searches (optional).
	AnonGroupSearch *bool `pulumi:"anonGroupSearch"`
	// The distinguished name of entry to bind when performing user and group searches (optional).
	BindDn *string `pulumi:"bindDn"`
	// The password to use along with bind-dn performing user and group searches (optional).
	BindPassword *string `pulumi:"bindPassword"`
	// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	BindPasswordHmac *string `pulumi:"bindPasswordHmac"`
	// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
	Certificates []string `pulumi:"certificates"`
	// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
	ClientCertificate *string `pulumi:"clientCertificate"`
	// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
	ClientCertificateKey *string `pulumi:"clientCertificateKey"`
	// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientCertificateKeyHmac *string `pulumi:"clientCertificateKeyHmac"`
	// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
	DereferenceAliases *string `pulumi:"dereferenceAliases"`
	// The auth method description.
	Description *string `pulumi:"description"`
	// Use anon bind to discover the bind DN of a user (optional).
	DiscoverDn *bool `pulumi:"discoverDn"`
	// Find the authenticated user's groups during authentication (optional).
	EnableGroups *bool `pulumi:"enableGroups"`
	// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
	GroupAttr *string `pulumi:"groupAttr"`
	// The base DN under which to perform group search.
	GroupDn *string `pulumi:"groupDn"`
	// A go template used to construct a LDAP group search filter (optional).
	GroupFilter *string `pulumi:"groupFilter"`
	// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
	InsecureTls *bool `pulumi:"insecureTls"`
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	IsPrimaryForScope *bool `pulumi:"isPrimaryForScope"`
	// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
	MaximumPageSize *int `pulumi:"maximumPageSize"`
	// The auth method name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId string `pulumi:"scopeId"`
	// Issue StartTLS command after connecting (optional).
	StartTls *bool `pulumi:"startTls"`
	// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
	State *string `pulumi:"state"`
	// The type of auth method; hardcoded.
	Type *string `pulumi:"type"`
	// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
	UpnDomain *string `pulumi:"upnDomain"`
	// The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
	Urls []string `pulumi:"urls"`
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
	UseTokenGroups *bool `pulumi:"useTokenGroups"`
	// The attribute on user entry matching the username passed when authenticating (optional).
	UserAttr *string `pulumi:"userAttr"`
	// The base DN under which to perform user search (optional).
	UserDn *string `pulumi:"userDn"`
	// A go template used to construct a LDAP user search filter (optional).
	UserFilter *string `pulumi:"userFilter"`
}

// The set of arguments for constructing a AuthMethodLdap resource.
type AuthMethodLdapArgs struct {
	// Account attribute maps fullname and email.
	AccountAttributeMaps pulumi.StringArrayInput
	// Use anon bind when performing LDAP group searches (optional).
	AnonGroupSearch pulumi.BoolPtrInput
	// The distinguished name of entry to bind when performing user and group searches (optional).
	BindDn pulumi.StringPtrInput
	// The password to use along with bind-dn performing user and group searches (optional).
	BindPassword pulumi.StringPtrInput
	// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
	BindPasswordHmac pulumi.StringPtrInput
	// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
	Certificates pulumi.StringArrayInput
	// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
	ClientCertificate pulumi.StringPtrInput
	// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
	ClientCertificateKey pulumi.StringPtrInput
	// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientCertificateKeyHmac pulumi.StringPtrInput
	// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
	DereferenceAliases pulumi.StringPtrInput
	// The auth method description.
	Description pulumi.StringPtrInput
	// Use anon bind to discover the bind DN of a user (optional).
	DiscoverDn pulumi.BoolPtrInput
	// Find the authenticated user's groups during authentication (optional).
	EnableGroups pulumi.BoolPtrInput
	// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
	GroupAttr pulumi.StringPtrInput
	// The base DN under which to perform group search.
	GroupDn pulumi.StringPtrInput
	// A go template used to construct a LDAP group search filter (optional).
	GroupFilter pulumi.StringPtrInput
	// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
	InsecureTls pulumi.BoolPtrInput
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
	IsPrimaryForScope pulumi.BoolPtrInput
	// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
	MaximumPageSize pulumi.IntPtrInput
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringInput
	// Issue StartTLS command after connecting (optional).
	StartTls pulumi.BoolPtrInput
	// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
	State pulumi.StringPtrInput
	// The type of auth method; hardcoded.
	Type pulumi.StringPtrInput
	// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
	UpnDomain pulumi.StringPtrInput
	// The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
	Urls pulumi.StringArrayInput
	// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
	UseTokenGroups pulumi.BoolPtrInput
	// The attribute on user entry matching the username passed when authenticating (optional).
	UserAttr pulumi.StringPtrInput
	// The base DN under which to perform user search (optional).
	UserDn pulumi.StringPtrInput
	// A go template used to construct a LDAP user search filter (optional).
	UserFilter pulumi.StringPtrInput
}

func (AuthMethodLdapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authMethodLdapArgs)(nil)).Elem()
}

type AuthMethodLdapInput interface {
	pulumi.Input

	ToAuthMethodLdapOutput() AuthMethodLdapOutput
	ToAuthMethodLdapOutputWithContext(ctx context.Context) AuthMethodLdapOutput
}

func (*AuthMethodLdap) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthMethodLdap)(nil)).Elem()
}

func (i *AuthMethodLdap) ToAuthMethodLdapOutput() AuthMethodLdapOutput {
	return i.ToAuthMethodLdapOutputWithContext(context.Background())
}

func (i *AuthMethodLdap) ToAuthMethodLdapOutputWithContext(ctx context.Context) AuthMethodLdapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodLdapOutput)
}

// AuthMethodLdapArrayInput is an input type that accepts AuthMethodLdapArray and AuthMethodLdapArrayOutput values.
// You can construct a concrete instance of `AuthMethodLdapArrayInput` via:
//
//	AuthMethodLdapArray{ AuthMethodLdapArgs{...} }
type AuthMethodLdapArrayInput interface {
	pulumi.Input

	ToAuthMethodLdapArrayOutput() AuthMethodLdapArrayOutput
	ToAuthMethodLdapArrayOutputWithContext(context.Context) AuthMethodLdapArrayOutput
}

type AuthMethodLdapArray []AuthMethodLdapInput

func (AuthMethodLdapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthMethodLdap)(nil)).Elem()
}

func (i AuthMethodLdapArray) ToAuthMethodLdapArrayOutput() AuthMethodLdapArrayOutput {
	return i.ToAuthMethodLdapArrayOutputWithContext(context.Background())
}

func (i AuthMethodLdapArray) ToAuthMethodLdapArrayOutputWithContext(ctx context.Context) AuthMethodLdapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodLdapArrayOutput)
}

// AuthMethodLdapMapInput is an input type that accepts AuthMethodLdapMap and AuthMethodLdapMapOutput values.
// You can construct a concrete instance of `AuthMethodLdapMapInput` via:
//
//	AuthMethodLdapMap{ "key": AuthMethodLdapArgs{...} }
type AuthMethodLdapMapInput interface {
	pulumi.Input

	ToAuthMethodLdapMapOutput() AuthMethodLdapMapOutput
	ToAuthMethodLdapMapOutputWithContext(context.Context) AuthMethodLdapMapOutput
}

type AuthMethodLdapMap map[string]AuthMethodLdapInput

func (AuthMethodLdapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthMethodLdap)(nil)).Elem()
}

func (i AuthMethodLdapMap) ToAuthMethodLdapMapOutput() AuthMethodLdapMapOutput {
	return i.ToAuthMethodLdapMapOutputWithContext(context.Background())
}

func (i AuthMethodLdapMap) ToAuthMethodLdapMapOutputWithContext(ctx context.Context) AuthMethodLdapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthMethodLdapMapOutput)
}

type AuthMethodLdapOutput struct{ *pulumi.OutputState }

func (AuthMethodLdapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthMethodLdap)(nil)).Elem()
}

func (o AuthMethodLdapOutput) ToAuthMethodLdapOutput() AuthMethodLdapOutput {
	return o
}

func (o AuthMethodLdapOutput) ToAuthMethodLdapOutputWithContext(ctx context.Context) AuthMethodLdapOutput {
	return o
}

// Account attribute maps fullname and email.
func (o AuthMethodLdapOutput) AccountAttributeMaps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringArrayOutput { return v.AccountAttributeMaps }).(pulumi.StringArrayOutput)
}

// Use anon bind when performing LDAP group searches (optional).
func (o AuthMethodLdapOutput) AnonGroupSearch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.BoolPtrOutput { return v.AnonGroupSearch }).(pulumi.BoolPtrOutput)
}

// The distinguished name of entry to bind when performing user and group searches (optional).
func (o AuthMethodLdapOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.BindDn }).(pulumi.StringPtrOutput)
}

// The password to use along with bind-dn performing user and group searches (optional).
func (o AuthMethodLdapOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.BindPassword }).(pulumi.StringPtrOutput)
}

// The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
func (o AuthMethodLdapOutput) BindPasswordHmac() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringOutput { return v.BindPasswordHmac }).(pulumi.StringOutput)
}

// PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
func (o AuthMethodLdapOutput) Certificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringArrayOutput { return v.Certificates }).(pulumi.StringArrayOutput)
}

// PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
func (o AuthMethodLdapOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
func (o AuthMethodLdapOutput) ClientCertificateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.ClientCertificateKey }).(pulumi.StringPtrOutput)
}

// The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
func (o AuthMethodLdapOutput) ClientCertificateKeyHmac() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringOutput { return v.ClientCertificateKeyHmac }).(pulumi.StringOutput)
}

// Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
func (o AuthMethodLdapOutput) DereferenceAliases() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringOutput { return v.DereferenceAliases }).(pulumi.StringOutput)
}

// The auth method description.
func (o AuthMethodLdapOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Use anon bind to discover the bind DN of a user (optional).
func (o AuthMethodLdapOutput) DiscoverDn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.BoolPtrOutput { return v.DiscoverDn }).(pulumi.BoolPtrOutput)
}

// Find the authenticated user's groups during authentication (optional).
func (o AuthMethodLdapOutput) EnableGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.BoolPtrOutput { return v.EnableGroups }).(pulumi.BoolPtrOutput)
}

// The attribute that enumerates a user's group membership from entries returned by a group search (optional).
func (o AuthMethodLdapOutput) GroupAttr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.GroupAttr }).(pulumi.StringPtrOutput)
}

// The base DN under which to perform group search.
func (o AuthMethodLdapOutput) GroupDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.GroupDn }).(pulumi.StringPtrOutput)
}

// A go template used to construct a LDAP group search filter (optional).
func (o AuthMethodLdapOutput) GroupFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.GroupFilter }).(pulumi.StringPtrOutput)
}

// Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
func (o AuthMethodLdapOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.BoolPtrOutput { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
func (o AuthMethodLdapOutput) IsPrimaryForScope() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.BoolPtrOutput { return v.IsPrimaryForScope }).(pulumi.BoolPtrOutput)
}

// MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
func (o AuthMethodLdapOutput) MaximumPageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.IntPtrOutput { return v.MaximumPageSize }).(pulumi.IntPtrOutput)
}

// The auth method name. Defaults to the resource name.
func (o AuthMethodLdapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope ID.
func (o AuthMethodLdapOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// Issue StartTLS command after connecting (optional).
func (o AuthMethodLdapOutput) StartTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.BoolPtrOutput { return v.StartTls }).(pulumi.BoolPtrOutput)
}

// Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
func (o AuthMethodLdapOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The type of auth method; hardcoded.
func (o AuthMethodLdapOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
func (o AuthMethodLdapOutput) UpnDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.UpnDomain }).(pulumi.StringPtrOutput)
}

// The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
func (o AuthMethodLdapOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringArrayOutput { return v.Urls }).(pulumi.StringArrayOutput)
}

// Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
func (o AuthMethodLdapOutput) UseTokenGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.BoolPtrOutput { return v.UseTokenGroups }).(pulumi.BoolPtrOutput)
}

// The attribute on user entry matching the username passed when authenticating (optional).
func (o AuthMethodLdapOutput) UserAttr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.UserAttr }).(pulumi.StringPtrOutput)
}

// The base DN under which to perform user search (optional).
func (o AuthMethodLdapOutput) UserDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.UserDn }).(pulumi.StringPtrOutput)
}

// A go template used to construct a LDAP user search filter (optional).
func (o AuthMethodLdapOutput) UserFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthMethodLdap) pulumi.StringPtrOutput { return v.UserFilter }).(pulumi.StringPtrOutput)
}

type AuthMethodLdapArrayOutput struct{ *pulumi.OutputState }

func (AuthMethodLdapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthMethodLdap)(nil)).Elem()
}

func (o AuthMethodLdapArrayOutput) ToAuthMethodLdapArrayOutput() AuthMethodLdapArrayOutput {
	return o
}

func (o AuthMethodLdapArrayOutput) ToAuthMethodLdapArrayOutputWithContext(ctx context.Context) AuthMethodLdapArrayOutput {
	return o
}

func (o AuthMethodLdapArrayOutput) Index(i pulumi.IntInput) AuthMethodLdapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthMethodLdap {
		return vs[0].([]*AuthMethodLdap)[vs[1].(int)]
	}).(AuthMethodLdapOutput)
}

type AuthMethodLdapMapOutput struct{ *pulumi.OutputState }

func (AuthMethodLdapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthMethodLdap)(nil)).Elem()
}

func (o AuthMethodLdapMapOutput) ToAuthMethodLdapMapOutput() AuthMethodLdapMapOutput {
	return o
}

func (o AuthMethodLdapMapOutput) ToAuthMethodLdapMapOutputWithContext(ctx context.Context) AuthMethodLdapMapOutput {
	return o
}

func (o AuthMethodLdapMapOutput) MapIndex(k pulumi.StringInput) AuthMethodLdapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthMethodLdap {
		return vs[0].(map[string]*AuthMethodLdap)[vs[1].(string)]
	}).(AuthMethodLdapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodLdapInput)(nil)).Elem(), &AuthMethodLdap{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodLdapArrayInput)(nil)).Elem(), AuthMethodLdapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthMethodLdapMapInput)(nil)).Elem(), AuthMethodLdapMap{})
	pulumi.RegisterOutputType(AuthMethodLdapOutput{})
	pulumi.RegisterOutputType(AuthMethodLdapArrayOutput{})
	pulumi.RegisterOutputType(AuthMethodLdapMapOutput{})
}
