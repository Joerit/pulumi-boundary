// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"errors"
	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CredentialJson struct {
	pulumi.CustomResourceState

	// The credential store in which to save this json credential.
	CredentialStoreId pulumi.StringOutput `pulumi:"credentialStoreId"`
	// The description of this json credential.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of this json credential. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string,
	// or a file
	Object pulumi.StringOutput `pulumi:"object"`
	// The object hmac.
	ObjectHmac pulumi.StringOutput `pulumi:"objectHmac"`
}

// NewCredentialJson registers a new resource with the given unique name, arguments, and options.
func NewCredentialJson(ctx *pulumi.Context,
	name string, args *CredentialJsonArgs, opts ...pulumi.ResourceOption) (*CredentialJson, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CredentialStoreId == nil {
		return nil, errors.New("invalid value for required argument 'CredentialStoreId'")
	}
	if args.Object == nil {
		return nil, errors.New("invalid value for required argument 'Object'")
	}
	if args.Object != nil {
		args.Object = pulumi.ToSecret(args.Object).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"object",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CredentialJson
	err := ctx.RegisterResource("boundary:index/credentialJson:CredentialJson", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCredentialJson gets an existing CredentialJson resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCredentialJson(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CredentialJsonState, opts ...pulumi.ResourceOption) (*CredentialJson, error) {
	var resource CredentialJson
	err := ctx.ReadResource("boundary:index/credentialJson:CredentialJson", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CredentialJson resources.
type credentialJsonState struct {
	// The credential store in which to save this json credential.
	CredentialStoreId *string `pulumi:"credentialStoreId"`
	// The description of this json credential.
	Description *string `pulumi:"description"`
	// The name of this json credential. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string,
	// or a file
	Object *string `pulumi:"object"`
	// The object hmac.
	ObjectHmac *string `pulumi:"objectHmac"`
}

type CredentialJsonState struct {
	// The credential store in which to save this json credential.
	CredentialStoreId pulumi.StringPtrInput
	// The description of this json credential.
	Description pulumi.StringPtrInput
	// The name of this json credential. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string,
	// or a file
	Object pulumi.StringPtrInput
	// The object hmac.
	ObjectHmac pulumi.StringPtrInput
}

func (CredentialJsonState) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialJsonState)(nil)).Elem()
}

type credentialJsonArgs struct {
	// The credential store in which to save this json credential.
	CredentialStoreId string `pulumi:"credentialStoreId"`
	// The description of this json credential.
	Description *string `pulumi:"description"`
	// The name of this json credential. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string,
	// or a file
	Object string `pulumi:"object"`
}

// The set of arguments for constructing a CredentialJson resource.
type CredentialJsonArgs struct {
	// The credential store in which to save this json credential.
	CredentialStoreId pulumi.StringInput
	// The description of this json credential.
	Description pulumi.StringPtrInput
	// The name of this json credential. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string,
	// or a file
	Object pulumi.StringInput
}

func (CredentialJsonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialJsonArgs)(nil)).Elem()
}

type CredentialJsonInput interface {
	pulumi.Input

	ToCredentialJsonOutput() CredentialJsonOutput
	ToCredentialJsonOutputWithContext(ctx context.Context) CredentialJsonOutput
}

func (*CredentialJson) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialJson)(nil)).Elem()
}

func (i *CredentialJson) ToCredentialJsonOutput() CredentialJsonOutput {
	return i.ToCredentialJsonOutputWithContext(context.Background())
}

func (i *CredentialJson) ToCredentialJsonOutputWithContext(ctx context.Context) CredentialJsonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialJsonOutput)
}

// CredentialJsonArrayInput is an input type that accepts CredentialJsonArray and CredentialJsonArrayOutput values.
// You can construct a concrete instance of `CredentialJsonArrayInput` via:
//
//	CredentialJsonArray{ CredentialJsonArgs{...} }
type CredentialJsonArrayInput interface {
	pulumi.Input

	ToCredentialJsonArrayOutput() CredentialJsonArrayOutput
	ToCredentialJsonArrayOutputWithContext(context.Context) CredentialJsonArrayOutput
}

type CredentialJsonArray []CredentialJsonInput

func (CredentialJsonArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialJson)(nil)).Elem()
}

func (i CredentialJsonArray) ToCredentialJsonArrayOutput() CredentialJsonArrayOutput {
	return i.ToCredentialJsonArrayOutputWithContext(context.Background())
}

func (i CredentialJsonArray) ToCredentialJsonArrayOutputWithContext(ctx context.Context) CredentialJsonArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialJsonArrayOutput)
}

// CredentialJsonMapInput is an input type that accepts CredentialJsonMap and CredentialJsonMapOutput values.
// You can construct a concrete instance of `CredentialJsonMapInput` via:
//
//	CredentialJsonMap{ "key": CredentialJsonArgs{...} }
type CredentialJsonMapInput interface {
	pulumi.Input

	ToCredentialJsonMapOutput() CredentialJsonMapOutput
	ToCredentialJsonMapOutputWithContext(context.Context) CredentialJsonMapOutput
}

type CredentialJsonMap map[string]CredentialJsonInput

func (CredentialJsonMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialJson)(nil)).Elem()
}

func (i CredentialJsonMap) ToCredentialJsonMapOutput() CredentialJsonMapOutput {
	return i.ToCredentialJsonMapOutputWithContext(context.Background())
}

func (i CredentialJsonMap) ToCredentialJsonMapOutputWithContext(ctx context.Context) CredentialJsonMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialJsonMapOutput)
}

type CredentialJsonOutput struct{ *pulumi.OutputState }

func (CredentialJsonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialJson)(nil)).Elem()
}

func (o CredentialJsonOutput) ToCredentialJsonOutput() CredentialJsonOutput {
	return o
}

func (o CredentialJsonOutput) ToCredentialJsonOutputWithContext(ctx context.Context) CredentialJsonOutput {
	return o
}

// The credential store in which to save this json credential.
func (o CredentialJsonOutput) CredentialStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialJson) pulumi.StringOutput { return v.CredentialStoreId }).(pulumi.StringOutput)
}

// The description of this json credential.
func (o CredentialJsonOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialJson) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of this json credential. Defaults to the resource name.
func (o CredentialJsonOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialJson) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string,
// or a file
func (o CredentialJsonOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialJson) pulumi.StringOutput { return v.Object }).(pulumi.StringOutput)
}

// The object hmac.
func (o CredentialJsonOutput) ObjectHmac() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialJson) pulumi.StringOutput { return v.ObjectHmac }).(pulumi.StringOutput)
}

type CredentialJsonArrayOutput struct{ *pulumi.OutputState }

func (CredentialJsonArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialJson)(nil)).Elem()
}

func (o CredentialJsonArrayOutput) ToCredentialJsonArrayOutput() CredentialJsonArrayOutput {
	return o
}

func (o CredentialJsonArrayOutput) ToCredentialJsonArrayOutputWithContext(ctx context.Context) CredentialJsonArrayOutput {
	return o
}

func (o CredentialJsonArrayOutput) Index(i pulumi.IntInput) CredentialJsonOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CredentialJson {
		return vs[0].([]*CredentialJson)[vs[1].(int)]
	}).(CredentialJsonOutput)
}

type CredentialJsonMapOutput struct{ *pulumi.OutputState }

func (CredentialJsonMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialJson)(nil)).Elem()
}

func (o CredentialJsonMapOutput) ToCredentialJsonMapOutput() CredentialJsonMapOutput {
	return o
}

func (o CredentialJsonMapOutput) ToCredentialJsonMapOutputWithContext(ctx context.Context) CredentialJsonMapOutput {
	return o
}

func (o CredentialJsonMapOutput) MapIndex(k pulumi.StringInput) CredentialJsonOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CredentialJson {
		return vs[0].(map[string]*CredentialJson)[vs[1].(string)]
	}).(CredentialJsonOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialJsonInput)(nil)).Elem(), &CredentialJson{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialJsonArrayInput)(nil)).Elem(), CredentialJsonArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialJsonMapInput)(nil)).Elem(), CredentialJsonMap{})
	pulumi.RegisterOutputType(CredentialJsonOutput{})
	pulumi.RegisterOutputType(CredentialJsonArrayOutput{})
	pulumi.RegisterOutputType(CredentialJsonMapOutput{})
}
