// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"errors"
	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The credential library for Vault resource allows you to configure a Boundary credential library for Vault.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/joerit/pulumi-boundary/sdk/go/boundary"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			org, err := boundary.NewScope(ctx, "org", &boundary.ScopeArgs{
//				Name:                  pulumi.String("organization_one"),
//				Description:           pulumi.String("My first scope!"),
//				ScopeId:               pulumi.String("global"),
//				AutoCreateAdminRole:   pulumi.Bool(true),
//				AutoCreateDefaultRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			project, err := boundary.NewScope(ctx, "project", &boundary.ScopeArgs{
//				Name:                pulumi.String("project_one"),
//				Description:         pulumi.String("My first scope!"),
//				ScopeId:             org.ID(),
//				AutoCreateAdminRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			foo, err := boundary.NewCredentialStoreVault(ctx, "foo", &boundary.CredentialStoreVaultArgs{
//				Name:        pulumi.String("foo"),
//				Description: pulumi.String("My first Vault credential store!"),
//				Address:     pulumi.String("http://127.0.0.1:8200"),
//				Token:       pulumi.String("s.0ufRo6XEGU2jOqnIr7OlFYP5"),
//				ScopeId:     project.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = boundary.NewCredentialLibraryVault(ctx, "foo", &boundary.CredentialLibraryVaultArgs{
//				Name:              pulumi.String("foo"),
//				Description:       pulumi.String("My first Vault credential library!"),
//				CredentialStoreId: foo.ID(),
//				Path:              pulumi.String("my/secret/foo"),
//				HttpMethod:        pulumi.String("GET"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = boundary.NewCredentialLibraryVault(ctx, "bar", &boundary.CredentialLibraryVaultArgs{
//				Name:              pulumi.String("bar"),
//				Description:       pulumi.String("My second Vault credential library!"),
//				CredentialStoreId: foo.ID(),
//				Path:              pulumi.String("my/secret/bar"),
//				HttpMethod:        pulumi.String("POST"),
//				HttpRequestBody:   pulumi.String("{\n  \"key\": \"Value\",\n}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = boundary.NewCredentialLibraryVault(ctx, "baz", &boundary.CredentialLibraryVaultArgs{
//				Name:              pulumi.String("baz"),
//				Description:       pulumi.String("vault username password credential with mapping overrides"),
//				CredentialStoreId: foo.ID(),
//				Path:              pulumi.String("my/secret/baz"),
//				HttpMethod:        pulumi.String("GET"),
//				CredentialType:    pulumi.String("username_password"),
//				CredentialMappingOverrides: pulumi.StringMap{
//					"password_attribute": pulumi.String("alternative_password_label"),
//					"username_attribute": pulumi.String("alternative_username_label"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = boundary.NewCredentialLibraryVault(ctx, "quz", &boundary.CredentialLibraryVaultArgs{
//				Name:              pulumi.String("quz"),
//				Description:       pulumi.String("vault ssh private key credential with mapping overrides"),
//				CredentialStoreId: foo.ID(),
//				Path:              pulumi.String("my/secret/quz"),
//				HttpMethod:        pulumi.String("GET"),
//				CredentialType:    pulumi.String("ssh_private_key"),
//				CredentialMappingOverrides: pulumi.StringMap{
//					"private_key_attribute":            pulumi.String("alternative_key_label"),
//					"private_key_passphrase_attribute": pulumi.String("alternative_passphrase_label"),
//					"username_attribute":               pulumi.String("alternative_username_label"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import boundary:index/credentialLibraryVault:CredentialLibraryVault foo <my-id>
// ```
type CredentialLibraryVault struct {
	pulumi.CustomResourceState

	// The credential mapping override.
	CredentialMappingOverrides pulumi.StringMapOutput `pulumi:"credentialMappingOverrides"`
	// The ID of the credential store that this library belongs to.
	CredentialStoreId pulumi.StringOutput `pulumi:"credentialStoreId"`
	// The type of credential the library generates. Cannot be updated on an existing resource.
	CredentialType pulumi.StringPtrOutput `pulumi:"credentialType"`
	// The Vault credential library description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
	HttpMethod pulumi.StringPtrOutput `pulumi:"httpMethod"`
	// The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `httpMethod` is set to `POST`.
	HttpRequestBody pulumi.StringPtrOutput `pulumi:"httpRequestBody"`
	// The Vault credential library name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The path in Vault to request credentials from.
	Path pulumi.StringOutput `pulumi:"path"`
}

// NewCredentialLibraryVault registers a new resource with the given unique name, arguments, and options.
func NewCredentialLibraryVault(ctx *pulumi.Context,
	name string, args *CredentialLibraryVaultArgs, opts ...pulumi.ResourceOption) (*CredentialLibraryVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CredentialStoreId == nil {
		return nil, errors.New("invalid value for required argument 'CredentialStoreId'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CredentialLibraryVault
	err := ctx.RegisterResource("boundary:index/credentialLibraryVault:CredentialLibraryVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCredentialLibraryVault gets an existing CredentialLibraryVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCredentialLibraryVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CredentialLibraryVaultState, opts ...pulumi.ResourceOption) (*CredentialLibraryVault, error) {
	var resource CredentialLibraryVault
	err := ctx.ReadResource("boundary:index/credentialLibraryVault:CredentialLibraryVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CredentialLibraryVault resources.
type credentialLibraryVaultState struct {
	// The credential mapping override.
	CredentialMappingOverrides map[string]string `pulumi:"credentialMappingOverrides"`
	// The ID of the credential store that this library belongs to.
	CredentialStoreId *string `pulumi:"credentialStoreId"`
	// The type of credential the library generates. Cannot be updated on an existing resource.
	CredentialType *string `pulumi:"credentialType"`
	// The Vault credential library description.
	Description *string `pulumi:"description"`
	// The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
	HttpMethod *string `pulumi:"httpMethod"`
	// The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `httpMethod` is set to `POST`.
	HttpRequestBody *string `pulumi:"httpRequestBody"`
	// The Vault credential library name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The path in Vault to request credentials from.
	Path *string `pulumi:"path"`
}

type CredentialLibraryVaultState struct {
	// The credential mapping override.
	CredentialMappingOverrides pulumi.StringMapInput
	// The ID of the credential store that this library belongs to.
	CredentialStoreId pulumi.StringPtrInput
	// The type of credential the library generates. Cannot be updated on an existing resource.
	CredentialType pulumi.StringPtrInput
	// The Vault credential library description.
	Description pulumi.StringPtrInput
	// The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
	HttpMethod pulumi.StringPtrInput
	// The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `httpMethod` is set to `POST`.
	HttpRequestBody pulumi.StringPtrInput
	// The Vault credential library name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The path in Vault to request credentials from.
	Path pulumi.StringPtrInput
}

func (CredentialLibraryVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialLibraryVaultState)(nil)).Elem()
}

type credentialLibraryVaultArgs struct {
	// The credential mapping override.
	CredentialMappingOverrides map[string]string `pulumi:"credentialMappingOverrides"`
	// The ID of the credential store that this library belongs to.
	CredentialStoreId string `pulumi:"credentialStoreId"`
	// The type of credential the library generates. Cannot be updated on an existing resource.
	CredentialType *string `pulumi:"credentialType"`
	// The Vault credential library description.
	Description *string `pulumi:"description"`
	// The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
	HttpMethod *string `pulumi:"httpMethod"`
	// The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `httpMethod` is set to `POST`.
	HttpRequestBody *string `pulumi:"httpRequestBody"`
	// The Vault credential library name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The path in Vault to request credentials from.
	Path string `pulumi:"path"`
}

// The set of arguments for constructing a CredentialLibraryVault resource.
type CredentialLibraryVaultArgs struct {
	// The credential mapping override.
	CredentialMappingOverrides pulumi.StringMapInput
	// The ID of the credential store that this library belongs to.
	CredentialStoreId pulumi.StringInput
	// The type of credential the library generates. Cannot be updated on an existing resource.
	CredentialType pulumi.StringPtrInput
	// The Vault credential library description.
	Description pulumi.StringPtrInput
	// The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
	HttpMethod pulumi.StringPtrInput
	// The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `httpMethod` is set to `POST`.
	HttpRequestBody pulumi.StringPtrInput
	// The Vault credential library name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The path in Vault to request credentials from.
	Path pulumi.StringInput
}

func (CredentialLibraryVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialLibraryVaultArgs)(nil)).Elem()
}

type CredentialLibraryVaultInput interface {
	pulumi.Input

	ToCredentialLibraryVaultOutput() CredentialLibraryVaultOutput
	ToCredentialLibraryVaultOutputWithContext(ctx context.Context) CredentialLibraryVaultOutput
}

func (*CredentialLibraryVault) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialLibraryVault)(nil)).Elem()
}

func (i *CredentialLibraryVault) ToCredentialLibraryVaultOutput() CredentialLibraryVaultOutput {
	return i.ToCredentialLibraryVaultOutputWithContext(context.Background())
}

func (i *CredentialLibraryVault) ToCredentialLibraryVaultOutputWithContext(ctx context.Context) CredentialLibraryVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialLibraryVaultOutput)
}

// CredentialLibraryVaultArrayInput is an input type that accepts CredentialLibraryVaultArray and CredentialLibraryVaultArrayOutput values.
// You can construct a concrete instance of `CredentialLibraryVaultArrayInput` via:
//
//	CredentialLibraryVaultArray{ CredentialLibraryVaultArgs{...} }
type CredentialLibraryVaultArrayInput interface {
	pulumi.Input

	ToCredentialLibraryVaultArrayOutput() CredentialLibraryVaultArrayOutput
	ToCredentialLibraryVaultArrayOutputWithContext(context.Context) CredentialLibraryVaultArrayOutput
}

type CredentialLibraryVaultArray []CredentialLibraryVaultInput

func (CredentialLibraryVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialLibraryVault)(nil)).Elem()
}

func (i CredentialLibraryVaultArray) ToCredentialLibraryVaultArrayOutput() CredentialLibraryVaultArrayOutput {
	return i.ToCredentialLibraryVaultArrayOutputWithContext(context.Background())
}

func (i CredentialLibraryVaultArray) ToCredentialLibraryVaultArrayOutputWithContext(ctx context.Context) CredentialLibraryVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialLibraryVaultArrayOutput)
}

// CredentialLibraryVaultMapInput is an input type that accepts CredentialLibraryVaultMap and CredentialLibraryVaultMapOutput values.
// You can construct a concrete instance of `CredentialLibraryVaultMapInput` via:
//
//	CredentialLibraryVaultMap{ "key": CredentialLibraryVaultArgs{...} }
type CredentialLibraryVaultMapInput interface {
	pulumi.Input

	ToCredentialLibraryVaultMapOutput() CredentialLibraryVaultMapOutput
	ToCredentialLibraryVaultMapOutputWithContext(context.Context) CredentialLibraryVaultMapOutput
}

type CredentialLibraryVaultMap map[string]CredentialLibraryVaultInput

func (CredentialLibraryVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialLibraryVault)(nil)).Elem()
}

func (i CredentialLibraryVaultMap) ToCredentialLibraryVaultMapOutput() CredentialLibraryVaultMapOutput {
	return i.ToCredentialLibraryVaultMapOutputWithContext(context.Background())
}

func (i CredentialLibraryVaultMap) ToCredentialLibraryVaultMapOutputWithContext(ctx context.Context) CredentialLibraryVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialLibraryVaultMapOutput)
}

type CredentialLibraryVaultOutput struct{ *pulumi.OutputState }

func (CredentialLibraryVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialLibraryVault)(nil)).Elem()
}

func (o CredentialLibraryVaultOutput) ToCredentialLibraryVaultOutput() CredentialLibraryVaultOutput {
	return o
}

func (o CredentialLibraryVaultOutput) ToCredentialLibraryVaultOutputWithContext(ctx context.Context) CredentialLibraryVaultOutput {
	return o
}

// The credential mapping override.
func (o CredentialLibraryVaultOutput) CredentialMappingOverrides() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CredentialLibraryVault) pulumi.StringMapOutput { return v.CredentialMappingOverrides }).(pulumi.StringMapOutput)
}

// The ID of the credential store that this library belongs to.
func (o CredentialLibraryVaultOutput) CredentialStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialLibraryVault) pulumi.StringOutput { return v.CredentialStoreId }).(pulumi.StringOutput)
}

// The type of credential the library generates. Cannot be updated on an existing resource.
func (o CredentialLibraryVaultOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialLibraryVault) pulumi.StringPtrOutput { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The Vault credential library description.
func (o CredentialLibraryVaultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialLibraryVault) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
func (o CredentialLibraryVaultOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialLibraryVault) pulumi.StringPtrOutput { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `httpMethod` is set to `POST`.
func (o CredentialLibraryVaultOutput) HttpRequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialLibraryVault) pulumi.StringPtrOutput { return v.HttpRequestBody }).(pulumi.StringPtrOutput)
}

// The Vault credential library name. Defaults to the resource name.
func (o CredentialLibraryVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialLibraryVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The path in Vault to request credentials from.
func (o CredentialLibraryVaultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialLibraryVault) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

type CredentialLibraryVaultArrayOutput struct{ *pulumi.OutputState }

func (CredentialLibraryVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialLibraryVault)(nil)).Elem()
}

func (o CredentialLibraryVaultArrayOutput) ToCredentialLibraryVaultArrayOutput() CredentialLibraryVaultArrayOutput {
	return o
}

func (o CredentialLibraryVaultArrayOutput) ToCredentialLibraryVaultArrayOutputWithContext(ctx context.Context) CredentialLibraryVaultArrayOutput {
	return o
}

func (o CredentialLibraryVaultArrayOutput) Index(i pulumi.IntInput) CredentialLibraryVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CredentialLibraryVault {
		return vs[0].([]*CredentialLibraryVault)[vs[1].(int)]
	}).(CredentialLibraryVaultOutput)
}

type CredentialLibraryVaultMapOutput struct{ *pulumi.OutputState }

func (CredentialLibraryVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialLibraryVault)(nil)).Elem()
}

func (o CredentialLibraryVaultMapOutput) ToCredentialLibraryVaultMapOutput() CredentialLibraryVaultMapOutput {
	return o
}

func (o CredentialLibraryVaultMapOutput) ToCredentialLibraryVaultMapOutputWithContext(ctx context.Context) CredentialLibraryVaultMapOutput {
	return o
}

func (o CredentialLibraryVaultMapOutput) MapIndex(k pulumi.StringInput) CredentialLibraryVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CredentialLibraryVault {
		return vs[0].(map[string]*CredentialLibraryVault)[vs[1].(string)]
	}).(CredentialLibraryVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialLibraryVaultInput)(nil)).Elem(), &CredentialLibraryVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialLibraryVaultArrayInput)(nil)).Elem(), CredentialLibraryVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialLibraryVaultMapInput)(nil)).Elem(), CredentialLibraryVaultMap{})
	pulumi.RegisterOutputType(CredentialLibraryVaultOutput{})
	pulumi.RegisterOutputType(CredentialLibraryVaultArrayOutput{})
	pulumi.RegisterOutputType(CredentialLibraryVaultMapOutput{})
}
