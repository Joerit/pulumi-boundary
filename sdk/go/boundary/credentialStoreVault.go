// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"errors"
	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CredentialStoreVault struct {
	pulumi.CustomResourceState

	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address pulumi.StringOutput `pulumi:"address"`
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CaCert pulumi.StringPtrOutput `pulumi:"caCert"`
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate pulumi.StringPtrOutput `pulumi:"clientCertificate"`
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKey pulumi.StringPtrOutput `pulumi:"clientCertificateKey"`
	// The Vault client certificate key hmac.
	ClientCertificateKeyHmac pulumi.StringOutput `pulumi:"clientCertificateKeyHmac"`
	// The Vault credential store description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Vault credential store name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace within Vault to use.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The scope for this credential store.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// Name to use as the SNI host when connecting to Vault via TLS.
	TlsServerName pulumi.StringPtrOutput `pulumi:"tlsServerName"`
	// Whether or not to skip TLS verification.
	TlsSkipVerify pulumi.BoolPtrOutput `pulumi:"tlsSkipVerify"`
	// A token used for accessing Vault.
	Token pulumi.StringOutput `pulumi:"token"`
	// The Vault token hmac.
	TokenHmac pulumi.StringOutput `pulumi:"tokenHmac"`
	// HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault
	// instances with Boundary.
	WorkerFilter pulumi.StringPtrOutput `pulumi:"workerFilter"`
}

// NewCredentialStoreVault registers a new resource with the given unique name, arguments, and options.
func NewCredentialStoreVault(ctx *pulumi.Context,
	name string, args *CredentialStoreVaultArgs, opts ...pulumi.ResourceOption) (*CredentialStoreVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	if args.ClientCertificateKey != nil {
		args.ClientCertificateKey = pulumi.ToSecret(args.ClientCertificateKey).(pulumi.StringPtrInput)
	}
	if args.Token != nil {
		args.Token = pulumi.ToSecret(args.Token).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientCertificateKey",
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CredentialStoreVault
	err := ctx.RegisterResource("boundary:index/credentialStoreVault:CredentialStoreVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCredentialStoreVault gets an existing CredentialStoreVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCredentialStoreVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CredentialStoreVaultState, opts ...pulumi.ResourceOption) (*CredentialStoreVault, error) {
	var resource CredentialStoreVault
	err := ctx.ReadResource("boundary:index/credentialStoreVault:CredentialStoreVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CredentialStoreVault resources.
type credentialStoreVaultState struct {
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address *string `pulumi:"address"`
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CaCert *string `pulumi:"caCert"`
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKey *string `pulumi:"clientCertificateKey"`
	// The Vault client certificate key hmac.
	ClientCertificateKeyHmac *string `pulumi:"clientCertificateKeyHmac"`
	// The Vault credential store description.
	Description *string `pulumi:"description"`
	// The Vault credential store name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The namespace within Vault to use.
	Namespace *string `pulumi:"namespace"`
	// The scope for this credential store.
	ScopeId *string `pulumi:"scopeId"`
	// Name to use as the SNI host when connecting to Vault via TLS.
	TlsServerName *string `pulumi:"tlsServerName"`
	// Whether or not to skip TLS verification.
	TlsSkipVerify *bool `pulumi:"tlsSkipVerify"`
	// A token used for accessing Vault.
	Token *string `pulumi:"token"`
	// The Vault token hmac.
	TokenHmac *string `pulumi:"tokenHmac"`
	// HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault
	// instances with Boundary.
	WorkerFilter *string `pulumi:"workerFilter"`
}

type CredentialStoreVaultState struct {
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address pulumi.StringPtrInput
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CaCert pulumi.StringPtrInput
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate pulumi.StringPtrInput
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKey pulumi.StringPtrInput
	// The Vault client certificate key hmac.
	ClientCertificateKeyHmac pulumi.StringPtrInput
	// The Vault credential store description.
	Description pulumi.StringPtrInput
	// The Vault credential store name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The namespace within Vault to use.
	Namespace pulumi.StringPtrInput
	// The scope for this credential store.
	ScopeId pulumi.StringPtrInput
	// Name to use as the SNI host when connecting to Vault via TLS.
	TlsServerName pulumi.StringPtrInput
	// Whether or not to skip TLS verification.
	TlsSkipVerify pulumi.BoolPtrInput
	// A token used for accessing Vault.
	Token pulumi.StringPtrInput
	// The Vault token hmac.
	TokenHmac pulumi.StringPtrInput
	// HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault
	// instances with Boundary.
	WorkerFilter pulumi.StringPtrInput
}

func (CredentialStoreVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialStoreVaultState)(nil)).Elem()
}

type credentialStoreVaultArgs struct {
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address string `pulumi:"address"`
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CaCert *string `pulumi:"caCert"`
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKey *string `pulumi:"clientCertificateKey"`
	// The Vault credential store description.
	Description *string `pulumi:"description"`
	// The Vault credential store name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The namespace within Vault to use.
	Namespace *string `pulumi:"namespace"`
	// The scope for this credential store.
	ScopeId string `pulumi:"scopeId"`
	// Name to use as the SNI host when connecting to Vault via TLS.
	TlsServerName *string `pulumi:"tlsServerName"`
	// Whether or not to skip TLS verification.
	TlsSkipVerify *bool `pulumi:"tlsSkipVerify"`
	// A token used for accessing Vault.
	Token string `pulumi:"token"`
	// HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault
	// instances with Boundary.
	WorkerFilter *string `pulumi:"workerFilter"`
}

// The set of arguments for constructing a CredentialStoreVault resource.
type CredentialStoreVaultArgs struct {
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address pulumi.StringInput
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CaCert pulumi.StringPtrInput
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate pulumi.StringPtrInput
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKey pulumi.StringPtrInput
	// The Vault credential store description.
	Description pulumi.StringPtrInput
	// The Vault credential store name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The namespace within Vault to use.
	Namespace pulumi.StringPtrInput
	// The scope for this credential store.
	ScopeId pulumi.StringInput
	// Name to use as the SNI host when connecting to Vault via TLS.
	TlsServerName pulumi.StringPtrInput
	// Whether or not to skip TLS verification.
	TlsSkipVerify pulumi.BoolPtrInput
	// A token used for accessing Vault.
	Token pulumi.StringInput
	// HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault
	// instances with Boundary.
	WorkerFilter pulumi.StringPtrInput
}

func (CredentialStoreVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialStoreVaultArgs)(nil)).Elem()
}

type CredentialStoreVaultInput interface {
	pulumi.Input

	ToCredentialStoreVaultOutput() CredentialStoreVaultOutput
	ToCredentialStoreVaultOutputWithContext(ctx context.Context) CredentialStoreVaultOutput
}

func (*CredentialStoreVault) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialStoreVault)(nil)).Elem()
}

func (i *CredentialStoreVault) ToCredentialStoreVaultOutput() CredentialStoreVaultOutput {
	return i.ToCredentialStoreVaultOutputWithContext(context.Background())
}

func (i *CredentialStoreVault) ToCredentialStoreVaultOutputWithContext(ctx context.Context) CredentialStoreVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialStoreVaultOutput)
}

// CredentialStoreVaultArrayInput is an input type that accepts CredentialStoreVaultArray and CredentialStoreVaultArrayOutput values.
// You can construct a concrete instance of `CredentialStoreVaultArrayInput` via:
//
//	CredentialStoreVaultArray{ CredentialStoreVaultArgs{...} }
type CredentialStoreVaultArrayInput interface {
	pulumi.Input

	ToCredentialStoreVaultArrayOutput() CredentialStoreVaultArrayOutput
	ToCredentialStoreVaultArrayOutputWithContext(context.Context) CredentialStoreVaultArrayOutput
}

type CredentialStoreVaultArray []CredentialStoreVaultInput

func (CredentialStoreVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialStoreVault)(nil)).Elem()
}

func (i CredentialStoreVaultArray) ToCredentialStoreVaultArrayOutput() CredentialStoreVaultArrayOutput {
	return i.ToCredentialStoreVaultArrayOutputWithContext(context.Background())
}

func (i CredentialStoreVaultArray) ToCredentialStoreVaultArrayOutputWithContext(ctx context.Context) CredentialStoreVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialStoreVaultArrayOutput)
}

// CredentialStoreVaultMapInput is an input type that accepts CredentialStoreVaultMap and CredentialStoreVaultMapOutput values.
// You can construct a concrete instance of `CredentialStoreVaultMapInput` via:
//
//	CredentialStoreVaultMap{ "key": CredentialStoreVaultArgs{...} }
type CredentialStoreVaultMapInput interface {
	pulumi.Input

	ToCredentialStoreVaultMapOutput() CredentialStoreVaultMapOutput
	ToCredentialStoreVaultMapOutputWithContext(context.Context) CredentialStoreVaultMapOutput
}

type CredentialStoreVaultMap map[string]CredentialStoreVaultInput

func (CredentialStoreVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialStoreVault)(nil)).Elem()
}

func (i CredentialStoreVaultMap) ToCredentialStoreVaultMapOutput() CredentialStoreVaultMapOutput {
	return i.ToCredentialStoreVaultMapOutputWithContext(context.Background())
}

func (i CredentialStoreVaultMap) ToCredentialStoreVaultMapOutputWithContext(ctx context.Context) CredentialStoreVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialStoreVaultMapOutput)
}

type CredentialStoreVaultOutput struct{ *pulumi.OutputState }

func (CredentialStoreVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialStoreVault)(nil)).Elem()
}

func (o CredentialStoreVaultOutput) ToCredentialStoreVaultOutput() CredentialStoreVaultOutput {
	return o
}

func (o CredentialStoreVaultOutput) ToCredentialStoreVaultOutputWithContext(ctx context.Context) CredentialStoreVaultOutput {
	return o
}

// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
func (o CredentialStoreVaultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
func (o CredentialStoreVaultOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringPtrOutput { return v.CaCert }).(pulumi.StringPtrOutput)
}

// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
func (o CredentialStoreVaultOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringPtrOutput { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// A PEM-encoded private key matching the client certificate from 'client_certificate'.
func (o CredentialStoreVaultOutput) ClientCertificateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringPtrOutput { return v.ClientCertificateKey }).(pulumi.StringPtrOutput)
}

// The Vault client certificate key hmac.
func (o CredentialStoreVaultOutput) ClientCertificateKeyHmac() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringOutput { return v.ClientCertificateKeyHmac }).(pulumi.StringOutput)
}

// The Vault credential store description.
func (o CredentialStoreVaultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Vault credential store name. Defaults to the resource name.
func (o CredentialStoreVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace within Vault to use.
func (o CredentialStoreVaultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The scope for this credential store.
func (o CredentialStoreVaultOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// Name to use as the SNI host when connecting to Vault via TLS.
func (o CredentialStoreVaultOutput) TlsServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringPtrOutput { return v.TlsServerName }).(pulumi.StringPtrOutput)
}

// Whether or not to skip TLS verification.
func (o CredentialStoreVaultOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.BoolPtrOutput { return v.TlsSkipVerify }).(pulumi.BoolPtrOutput)
}

// A token used for accessing Vault.
func (o CredentialStoreVaultOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The Vault token hmac.
func (o CredentialStoreVaultOutput) TokenHmac() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringOutput { return v.TokenHmac }).(pulumi.StringOutput)
}

// HCP Only. A filter used to control which PKI workers can handle Vault requests. This allows the use of private Vault
// instances with Boundary.
func (o CredentialStoreVaultOutput) WorkerFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialStoreVault) pulumi.StringPtrOutput { return v.WorkerFilter }).(pulumi.StringPtrOutput)
}

type CredentialStoreVaultArrayOutput struct{ *pulumi.OutputState }

func (CredentialStoreVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialStoreVault)(nil)).Elem()
}

func (o CredentialStoreVaultArrayOutput) ToCredentialStoreVaultArrayOutput() CredentialStoreVaultArrayOutput {
	return o
}

func (o CredentialStoreVaultArrayOutput) ToCredentialStoreVaultArrayOutputWithContext(ctx context.Context) CredentialStoreVaultArrayOutput {
	return o
}

func (o CredentialStoreVaultArrayOutput) Index(i pulumi.IntInput) CredentialStoreVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CredentialStoreVault {
		return vs[0].([]*CredentialStoreVault)[vs[1].(int)]
	}).(CredentialStoreVaultOutput)
}

type CredentialStoreVaultMapOutput struct{ *pulumi.OutputState }

func (CredentialStoreVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialStoreVault)(nil)).Elem()
}

func (o CredentialStoreVaultMapOutput) ToCredentialStoreVaultMapOutput() CredentialStoreVaultMapOutput {
	return o
}

func (o CredentialStoreVaultMapOutput) ToCredentialStoreVaultMapOutputWithContext(ctx context.Context) CredentialStoreVaultMapOutput {
	return o
}

func (o CredentialStoreVaultMapOutput) MapIndex(k pulumi.StringInput) CredentialStoreVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CredentialStoreVault {
		return vs[0].(map[string]*CredentialStoreVault)[vs[1].(string)]
	}).(CredentialStoreVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialStoreVaultInput)(nil)).Elem(), &CredentialStoreVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialStoreVaultArrayInput)(nil)).Elem(), CredentialStoreVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialStoreVaultMapInput)(nil)).Elem(), CredentialStoreVaultMap{})
	pulumi.RegisterOutputType(CredentialStoreVaultOutput{})
	pulumi.RegisterOutputType(CredentialStoreVaultArrayOutput{})
	pulumi.RegisterOutputType(CredentialStoreVaultMapOutput{})
}
