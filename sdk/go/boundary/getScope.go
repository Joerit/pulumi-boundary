// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The scope data source allows you to discover an existing Boundary scope by name.
// Please note that the Global scope will always have an id of "global", and does not need to be discovered with this data source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/joerit/pulumi-boundary/sdk/go/boundary"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Retrieve the ID of a Boundary project
//			_, err := boundary.LookupScope(ctx, &boundary.LookupScopeArgs{
//				Name:    "SecOps",
//				ScopeId: "global",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = boundary.LookupScope(ctx, &boundary.LookupScopeArgs{
//				Name:    "2111",
//				ScopeId: id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupScope(ctx *pulumi.Context, args *LookupScopeArgs, opts ...pulumi.InvokeOption) (*LookupScopeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScopeResult
	err := ctx.Invoke("boundary:index/getScope:getScope", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getScope.
type LookupScopeArgs struct {
	// The name of the scope to retrieve.
	Name string `pulumi:"name"`
	// The parent scope ID that will be queried for the scope.
	ScopeId string `pulumi:"scopeId"`
}

// A collection of values returned by getScope.
type LookupScopeResult struct {
	// The description of the retrieved scope.
	Description string `pulumi:"description"`
	// The ID of the retrieved scope.
	Id string `pulumi:"id"`
	// The name of the scope to retrieve.
	Name string `pulumi:"name"`
	// The parent scope ID that will be queried for the scope.
	ScopeId string `pulumi:"scopeId"`
}

func LookupScopeOutput(ctx *pulumi.Context, args LookupScopeOutputArgs, opts ...pulumi.InvokeOption) LookupScopeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupScopeResultOutput, error) {
			args := v.(LookupScopeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("boundary:index/getScope:getScope", args, LookupScopeResultOutput{}, options).(LookupScopeResultOutput), nil
		}).(LookupScopeResultOutput)
}

// A collection of arguments for invoking getScope.
type LookupScopeOutputArgs struct {
	// The name of the scope to retrieve.
	Name pulumi.StringInput `pulumi:"name"`
	// The parent scope ID that will be queried for the scope.
	ScopeId pulumi.StringInput `pulumi:"scopeId"`
}

func (LookupScopeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeArgs)(nil)).Elem()
}

// A collection of values returned by getScope.
type LookupScopeResultOutput struct{ *pulumi.OutputState }

func (LookupScopeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeResult)(nil)).Elem()
}

func (o LookupScopeResultOutput) ToLookupScopeResultOutput() LookupScopeResultOutput {
	return o
}

func (o LookupScopeResultOutput) ToLookupScopeResultOutputWithContext(ctx context.Context) LookupScopeResultOutput {
	return o
}

// The description of the retrieved scope.
func (o LookupScopeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the retrieved scope.
func (o LookupScopeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the scope to retrieve.
func (o LookupScopeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeResult) string { return v.Name }).(pulumi.StringOutput)
}

// The parent scope ID that will be queried for the scope.
func (o LookupScopeResultOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeResult) string { return v.ScopeId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScopeResultOutput{})
}
