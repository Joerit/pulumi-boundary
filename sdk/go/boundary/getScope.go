// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupScope(ctx *pulumi.Context, args *LookupScopeArgs, opts ...pulumi.InvokeOption) (*LookupScopeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScopeResult
	err := ctx.Invoke("boundary:index/getScope:getScope", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getScope.
type LookupScopeArgs struct {
	Name    string `pulumi:"name"`
	ScopeId string `pulumi:"scopeId"`
}

// A collection of values returned by getScope.
type LookupScopeResult struct {
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	Name        string `pulumi:"name"`
	ScopeId     string `pulumi:"scopeId"`
}

func LookupScopeOutput(ctx *pulumi.Context, args LookupScopeOutputArgs, opts ...pulumi.InvokeOption) LookupScopeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupScopeResultOutput, error) {
			args := v.(LookupScopeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("boundary:index/getScope:getScope", args, LookupScopeResultOutput{}, options).(LookupScopeResultOutput), nil
		}).(LookupScopeResultOutput)
}

// A collection of arguments for invoking getScope.
type LookupScopeOutputArgs struct {
	Name    pulumi.StringInput `pulumi:"name"`
	ScopeId pulumi.StringInput `pulumi:"scopeId"`
}

func (LookupScopeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeArgs)(nil)).Elem()
}

// A collection of values returned by getScope.
type LookupScopeResultOutput struct{ *pulumi.OutputState }

func (LookupScopeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeResult)(nil)).Elem()
}

func (o LookupScopeResultOutput) ToLookupScopeResultOutput() LookupScopeResultOutput {
	return o
}

func (o LookupScopeResultOutput) ToLookupScopeResultOutputWithContext(ctx context.Context) LookupScopeResultOutput {
	return o
}

func (o LookupScopeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupScopeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupScopeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupScopeResultOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeResult) string { return v.ScopeId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScopeResultOutput{})
}
