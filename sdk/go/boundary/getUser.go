// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("boundary:index/getUser:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUser.
type LookupUserArgs struct {
	Name    string  `pulumi:"name"`
	ScopeId *string `pulumi:"scopeId"`
}

// A collection of values returned by getUser.
type LookupUserResult struct {
	AccountIds        []string       `pulumi:"accountIds"`
	AuthorizedActions []string       `pulumi:"authorizedActions"`
	Description       string         `pulumi:"description"`
	Id                string         `pulumi:"id"`
	LoginName         string         `pulumi:"loginName"`
	Name              string         `pulumi:"name"`
	PrimaryAccountId  string         `pulumi:"primaryAccountId"`
	ScopeId           *string        `pulumi:"scopeId"`
	Scopes            []GetUserScope `pulumi:"scopes"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUserResultOutput, error) {
			args := v.(LookupUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("boundary:index/getUser:getUser", args, LookupUserResultOutput{}, options).(LookupUserResultOutput), nil
		}).(LookupUserResultOutput)
}

// A collection of arguments for invoking getUser.
type LookupUserOutputArgs struct {
	Name    pulumi.StringInput    `pulumi:"name"`
	ScopeId pulumi.StringPtrInput `pulumi:"scopeId"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

// A collection of values returned by getUser.
type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) AccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.AccountIds }).(pulumi.StringArrayOutput)
}

func (o LookupUserResultOutput) AuthorizedActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.AuthorizedActions }).(pulumi.StringArrayOutput)
}

func (o LookupUserResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.LoginName }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) PrimaryAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.PrimaryAccountId }).(pulumi.StringOutput)
}

func (o LookupUserResultOutput) ScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUserResult) *string { return v.ScopeId }).(pulumi.StringPtrOutput)
}

func (o LookupUserResultOutput) Scopes() GetUserScopeArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []GetUserScope { return v.Scopes }).(GetUserScopeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
