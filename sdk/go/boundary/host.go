// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"errors"
	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Host struct {
	pulumi.CustomResourceState

	// The static address of the host resource as `<IP>` (note: port assignment occurs in the target resource definition, do
	// not add :port here) or a domain name.
	Address pulumi.StringPtrOutput `pulumi:"address"`
	// The host description.
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	HostCatalogId pulumi.StringOutput    `pulumi:"hostCatalogId"`
	// The host name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of host
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewHost registers a new resource with the given unique name, arguments, and options.
func NewHost(ctx *pulumi.Context,
	name string, args *HostArgs, opts ...pulumi.ResourceOption) (*Host, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostCatalogId == nil {
		return nil, errors.New("invalid value for required argument 'HostCatalogId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Host
	err := ctx.RegisterResource("boundary:index/host:Host", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHost gets an existing Host resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostState, opts ...pulumi.ResourceOption) (*Host, error) {
	var resource Host
	err := ctx.ReadResource("boundary:index/host:Host", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Host resources.
type hostState struct {
	// The static address of the host resource as `<IP>` (note: port assignment occurs in the target resource definition, do
	// not add :port here) or a domain name.
	Address *string `pulumi:"address"`
	// The host description.
	Description   *string `pulumi:"description"`
	HostCatalogId *string `pulumi:"hostCatalogId"`
	// The host name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The type of host
	Type *string `pulumi:"type"`
}

type HostState struct {
	// The static address of the host resource as `<IP>` (note: port assignment occurs in the target resource definition, do
	// not add :port here) or a domain name.
	Address pulumi.StringPtrInput
	// The host description.
	Description   pulumi.StringPtrInput
	HostCatalogId pulumi.StringPtrInput
	// The host name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The type of host
	Type pulumi.StringPtrInput
}

func (HostState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostState)(nil)).Elem()
}

type hostArgs struct {
	// The static address of the host resource as `<IP>` (note: port assignment occurs in the target resource definition, do
	// not add :port here) or a domain name.
	Address *string `pulumi:"address"`
	// The host description.
	Description   *string `pulumi:"description"`
	HostCatalogId string  `pulumi:"hostCatalogId"`
	// The host name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The type of host
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Host resource.
type HostArgs struct {
	// The static address of the host resource as `<IP>` (note: port assignment occurs in the target resource definition, do
	// not add :port here) or a domain name.
	Address pulumi.StringPtrInput
	// The host description.
	Description   pulumi.StringPtrInput
	HostCatalogId pulumi.StringInput
	// The host name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The type of host
	Type pulumi.StringInput
}

func (HostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostArgs)(nil)).Elem()
}

type HostInput interface {
	pulumi.Input

	ToHostOutput() HostOutput
	ToHostOutputWithContext(ctx context.Context) HostOutput
}

func (*Host) ElementType() reflect.Type {
	return reflect.TypeOf((**Host)(nil)).Elem()
}

func (i *Host) ToHostOutput() HostOutput {
	return i.ToHostOutputWithContext(context.Background())
}

func (i *Host) ToHostOutputWithContext(ctx context.Context) HostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostOutput)
}

// HostArrayInput is an input type that accepts HostArray and HostArrayOutput values.
// You can construct a concrete instance of `HostArrayInput` via:
//
//	HostArray{ HostArgs{...} }
type HostArrayInput interface {
	pulumi.Input

	ToHostArrayOutput() HostArrayOutput
	ToHostArrayOutputWithContext(context.Context) HostArrayOutput
}

type HostArray []HostInput

func (HostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Host)(nil)).Elem()
}

func (i HostArray) ToHostArrayOutput() HostArrayOutput {
	return i.ToHostArrayOutputWithContext(context.Background())
}

func (i HostArray) ToHostArrayOutputWithContext(ctx context.Context) HostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostArrayOutput)
}

// HostMapInput is an input type that accepts HostMap and HostMapOutput values.
// You can construct a concrete instance of `HostMapInput` via:
//
//	HostMap{ "key": HostArgs{...} }
type HostMapInput interface {
	pulumi.Input

	ToHostMapOutput() HostMapOutput
	ToHostMapOutputWithContext(context.Context) HostMapOutput
}

type HostMap map[string]HostInput

func (HostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Host)(nil)).Elem()
}

func (i HostMap) ToHostMapOutput() HostMapOutput {
	return i.ToHostMapOutputWithContext(context.Background())
}

func (i HostMap) ToHostMapOutputWithContext(ctx context.Context) HostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostMapOutput)
}

type HostOutput struct{ *pulumi.OutputState }

func (HostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Host)(nil)).Elem()
}

func (o HostOutput) ToHostOutput() HostOutput {
	return o
}

func (o HostOutput) ToHostOutputWithContext(ctx context.Context) HostOutput {
	return o
}

// The static address of the host resource as `<IP>` (note: port assignment occurs in the target resource definition, do
// not add :port here) or a domain name.
func (o HostOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Host) pulumi.StringPtrOutput { return v.Address }).(pulumi.StringPtrOutput)
}

// The host description.
func (o HostOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Host) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o HostOutput) HostCatalogId() pulumi.StringOutput {
	return o.ApplyT(func(v *Host) pulumi.StringOutput { return v.HostCatalogId }).(pulumi.StringOutput)
}

// The host name. Defaults to the resource name.
func (o HostOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Host) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of host
func (o HostOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Host) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type HostArrayOutput struct{ *pulumi.OutputState }

func (HostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Host)(nil)).Elem()
}

func (o HostArrayOutput) ToHostArrayOutput() HostArrayOutput {
	return o
}

func (o HostArrayOutput) ToHostArrayOutputWithContext(ctx context.Context) HostArrayOutput {
	return o
}

func (o HostArrayOutput) Index(i pulumi.IntInput) HostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Host {
		return vs[0].([]*Host)[vs[1].(int)]
	}).(HostOutput)
}

type HostMapOutput struct{ *pulumi.OutputState }

func (HostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Host)(nil)).Elem()
}

func (o HostMapOutput) ToHostMapOutput() HostMapOutput {
	return o
}

func (o HostMapOutput) ToHostMapOutputWithContext(ctx context.Context) HostMapOutput {
	return o
}

func (o HostMapOutput) MapIndex(k pulumi.StringInput) HostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Host {
		return vs[0].(map[string]*Host)[vs[1].(string)]
	}).(HostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostInput)(nil)).Elem(), &Host{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostArrayInput)(nil)).Elem(), HostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostMapInput)(nil)).Elem(), HostMap{})
	pulumi.RegisterOutputType(HostOutput{})
	pulumi.RegisterOutputType(HostArrayOutput{})
	pulumi.RegisterOutputType(HostMapOutput{})
}
