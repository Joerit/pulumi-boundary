// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"errors"
	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: use `HostCatalogStatic` instead.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/joerit/pulumi-boundary/sdk/go/boundary"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			org, err := boundary.NewScope(ctx, "org", &boundary.ScopeArgs{
//				Name:                  pulumi.String("organization_one"),
//				Description:           pulumi.String("My first scope!"),
//				ScopeId:               pulumi.Any(global.Id),
//				AutoCreateAdminRole:   pulumi.Bool(true),
//				AutoCreateDefaultRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			project, err := boundary.NewScope(ctx, "project", &boundary.ScopeArgs{
//				Name:                pulumi.String("project_one"),
//				Description:         pulumi.String("My first scope!"),
//				ScopeId:             org.ID(),
//				AutoCreateAdminRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = boundary.NewHostCatalog(ctx, "example", &boundary.HostCatalogArgs{
//				Name:        pulumi.String("My catalog"),
//				Description: pulumi.String("My first host catalog!"),
//				Type:        pulumi.String("Static"),
//				ScopeId:     project.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import boundary:index/hostCatalog:HostCatalog foo <my-id>
// ```
type HostCatalog struct {
	pulumi.CustomResourceState

	// The host catalog description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The host catalog name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope ID in which the resource is created.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// The host catalog type. Only `static` is supported.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewHostCatalog registers a new resource with the given unique name, arguments, and options.
func NewHostCatalog(ctx *pulumi.Context,
	name string, args *HostCatalogArgs, opts ...pulumi.ResourceOption) (*HostCatalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostCatalog
	err := ctx.RegisterResource("boundary:index/hostCatalog:HostCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostCatalog gets an existing HostCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostCatalogState, opts ...pulumi.ResourceOption) (*HostCatalog, error) {
	var resource HostCatalog
	err := ctx.ReadResource("boundary:index/hostCatalog:HostCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostCatalog resources.
type hostCatalogState struct {
	// The host catalog description.
	Description *string `pulumi:"description"`
	// The host catalog name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID in which the resource is created.
	ScopeId *string `pulumi:"scopeId"`
	// The host catalog type. Only `static` is supported.
	Type *string `pulumi:"type"`
}

type HostCatalogState struct {
	// The host catalog description.
	Description pulumi.StringPtrInput
	// The host catalog name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID in which the resource is created.
	ScopeId pulumi.StringPtrInput
	// The host catalog type. Only `static` is supported.
	Type pulumi.StringPtrInput
}

func (HostCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostCatalogState)(nil)).Elem()
}

type hostCatalogArgs struct {
	// The host catalog description.
	Description *string `pulumi:"description"`
	// The host catalog name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID in which the resource is created.
	ScopeId string `pulumi:"scopeId"`
	// The host catalog type. Only `static` is supported.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a HostCatalog resource.
type HostCatalogArgs struct {
	// The host catalog description.
	Description pulumi.StringPtrInput
	// The host catalog name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID in which the resource is created.
	ScopeId pulumi.StringInput
	// The host catalog type. Only `static` is supported.
	Type pulumi.StringInput
}

func (HostCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostCatalogArgs)(nil)).Elem()
}

type HostCatalogInput interface {
	pulumi.Input

	ToHostCatalogOutput() HostCatalogOutput
	ToHostCatalogOutputWithContext(ctx context.Context) HostCatalogOutput
}

func (*HostCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((**HostCatalog)(nil)).Elem()
}

func (i *HostCatalog) ToHostCatalogOutput() HostCatalogOutput {
	return i.ToHostCatalogOutputWithContext(context.Background())
}

func (i *HostCatalog) ToHostCatalogOutputWithContext(ctx context.Context) HostCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostCatalogOutput)
}

// HostCatalogArrayInput is an input type that accepts HostCatalogArray and HostCatalogArrayOutput values.
// You can construct a concrete instance of `HostCatalogArrayInput` via:
//
//	HostCatalogArray{ HostCatalogArgs{...} }
type HostCatalogArrayInput interface {
	pulumi.Input

	ToHostCatalogArrayOutput() HostCatalogArrayOutput
	ToHostCatalogArrayOutputWithContext(context.Context) HostCatalogArrayOutput
}

type HostCatalogArray []HostCatalogInput

func (HostCatalogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostCatalog)(nil)).Elem()
}

func (i HostCatalogArray) ToHostCatalogArrayOutput() HostCatalogArrayOutput {
	return i.ToHostCatalogArrayOutputWithContext(context.Background())
}

func (i HostCatalogArray) ToHostCatalogArrayOutputWithContext(ctx context.Context) HostCatalogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostCatalogArrayOutput)
}

// HostCatalogMapInput is an input type that accepts HostCatalogMap and HostCatalogMapOutput values.
// You can construct a concrete instance of `HostCatalogMapInput` via:
//
//	HostCatalogMap{ "key": HostCatalogArgs{...} }
type HostCatalogMapInput interface {
	pulumi.Input

	ToHostCatalogMapOutput() HostCatalogMapOutput
	ToHostCatalogMapOutputWithContext(context.Context) HostCatalogMapOutput
}

type HostCatalogMap map[string]HostCatalogInput

func (HostCatalogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostCatalog)(nil)).Elem()
}

func (i HostCatalogMap) ToHostCatalogMapOutput() HostCatalogMapOutput {
	return i.ToHostCatalogMapOutputWithContext(context.Background())
}

func (i HostCatalogMap) ToHostCatalogMapOutputWithContext(ctx context.Context) HostCatalogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostCatalogMapOutput)
}

type HostCatalogOutput struct{ *pulumi.OutputState }

func (HostCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostCatalog)(nil)).Elem()
}

func (o HostCatalogOutput) ToHostCatalogOutput() HostCatalogOutput {
	return o
}

func (o HostCatalogOutput) ToHostCatalogOutputWithContext(ctx context.Context) HostCatalogOutput {
	return o
}

// The host catalog description.
func (o HostCatalogOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostCatalog) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The host catalog name. Defaults to the resource name.
func (o HostCatalogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostCatalog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope ID in which the resource is created.
func (o HostCatalogOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *HostCatalog) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// The host catalog type. Only `static` is supported.
func (o HostCatalogOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *HostCatalog) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type HostCatalogArrayOutput struct{ *pulumi.OutputState }

func (HostCatalogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostCatalog)(nil)).Elem()
}

func (o HostCatalogArrayOutput) ToHostCatalogArrayOutput() HostCatalogArrayOutput {
	return o
}

func (o HostCatalogArrayOutput) ToHostCatalogArrayOutputWithContext(ctx context.Context) HostCatalogArrayOutput {
	return o
}

func (o HostCatalogArrayOutput) Index(i pulumi.IntInput) HostCatalogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostCatalog {
		return vs[0].([]*HostCatalog)[vs[1].(int)]
	}).(HostCatalogOutput)
}

type HostCatalogMapOutput struct{ *pulumi.OutputState }

func (HostCatalogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostCatalog)(nil)).Elem()
}

func (o HostCatalogMapOutput) ToHostCatalogMapOutput() HostCatalogMapOutput {
	return o
}

func (o HostCatalogMapOutput) ToHostCatalogMapOutputWithContext(ctx context.Context) HostCatalogMapOutput {
	return o
}

func (o HostCatalogMapOutput) MapIndex(k pulumi.StringInput) HostCatalogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostCatalog {
		return vs[0].(map[string]*HostCatalog)[vs[1].(string)]
	}).(HostCatalogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostCatalogInput)(nil)).Elem(), &HostCatalog{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostCatalogArrayInput)(nil)).Elem(), HostCatalogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostCatalogMapInput)(nil)).Elem(), HostCatalogMap{})
	pulumi.RegisterOutputType(HostCatalogOutput{})
	pulumi.RegisterOutputType(HostCatalogArrayOutput{})
	pulumi.RegisterOutputType(HostCatalogMapOutput{})
}
