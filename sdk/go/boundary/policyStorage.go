// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"errors"
	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The storage policy resource allows you to configure a Boundary storage policy. Storage policies allow an admin to configure how long session recordings must be stored and when to delete them. Storage policies must be applied to the global scope or an org scope in order to take effect.
type PolicyStorage struct {
	pulumi.CustomResourceState

	// The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically delete. However, delete*after*days and retain*for*days cannot both be 0.
	DeleteAfterDays pulumi.IntPtrOutput `pulumi:"deleteAfterDays"`
	// Whether or not the associated delete*after*days value can be overridden by org scopes. Note: if the associated delete*after*days value is 0, overridable is ignored
	DeleteAfterOverridable pulumi.BoolPtrOutput `pulumi:"deleteAfterOverridable"`
	// The policy description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The policy name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However, retain*for*days and delete*after*days cannot both be 0.
	RetainForDays pulumi.IntPtrOutput `pulumi:"retainForDays"`
	// Whether or not the associated retain*for*days value can be overridden by org scopes. Note: if the associated retain*for*days value is 0, overridable is ignored.
	RetainForOverridable pulumi.BoolPtrOutput `pulumi:"retainForOverridable"`
	// The scope for this policy.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
}

// NewPolicyStorage registers a new resource with the given unique name, arguments, and options.
func NewPolicyStorage(ctx *pulumi.Context,
	name string, args *PolicyStorageArgs, opts ...pulumi.ResourceOption) (*PolicyStorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyStorage
	err := ctx.RegisterResource("boundary:index/policyStorage:PolicyStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyStorage gets an existing PolicyStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyStorageState, opts ...pulumi.ResourceOption) (*PolicyStorage, error) {
	var resource PolicyStorage
	err := ctx.ReadResource("boundary:index/policyStorage:PolicyStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyStorage resources.
type policyStorageState struct {
	// The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically delete. However, delete*after*days and retain*for*days cannot both be 0.
	DeleteAfterDays *int `pulumi:"deleteAfterDays"`
	// Whether or not the associated delete*after*days value can be overridden by org scopes. Note: if the associated delete*after*days value is 0, overridable is ignored
	DeleteAfterOverridable *bool `pulumi:"deleteAfterOverridable"`
	// The policy description.
	Description *string `pulumi:"description"`
	// The policy name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However, retain*for*days and delete*after*days cannot both be 0.
	RetainForDays *int `pulumi:"retainForDays"`
	// Whether or not the associated retain*for*days value can be overridden by org scopes. Note: if the associated retain*for*days value is 0, overridable is ignored.
	RetainForOverridable *bool `pulumi:"retainForOverridable"`
	// The scope for this policy.
	ScopeId *string `pulumi:"scopeId"`
}

type PolicyStorageState struct {
	// The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically delete. However, delete*after*days and retain*for*days cannot both be 0.
	DeleteAfterDays pulumi.IntPtrInput
	// Whether or not the associated delete*after*days value can be overridden by org scopes. Note: if the associated delete*after*days value is 0, overridable is ignored
	DeleteAfterOverridable pulumi.BoolPtrInput
	// The policy description.
	Description pulumi.StringPtrInput
	// The policy name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However, retain*for*days and delete*after*days cannot both be 0.
	RetainForDays pulumi.IntPtrInput
	// Whether or not the associated retain*for*days value can be overridden by org scopes. Note: if the associated retain*for*days value is 0, overridable is ignored.
	RetainForOverridable pulumi.BoolPtrInput
	// The scope for this policy.
	ScopeId pulumi.StringPtrInput
}

func (PolicyStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyStorageState)(nil)).Elem()
}

type policyStorageArgs struct {
	// The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically delete. However, delete*after*days and retain*for*days cannot both be 0.
	DeleteAfterDays *int `pulumi:"deleteAfterDays"`
	// Whether or not the associated delete*after*days value can be overridden by org scopes. Note: if the associated delete*after*days value is 0, overridable is ignored
	DeleteAfterOverridable *bool `pulumi:"deleteAfterOverridable"`
	// The policy description.
	Description *string `pulumi:"description"`
	// The policy name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However, retain*for*days and delete*after*days cannot both be 0.
	RetainForDays *int `pulumi:"retainForDays"`
	// Whether or not the associated retain*for*days value can be overridden by org scopes. Note: if the associated retain*for*days value is 0, overridable is ignored.
	RetainForOverridable *bool `pulumi:"retainForOverridable"`
	// The scope for this policy.
	ScopeId string `pulumi:"scopeId"`
}

// The set of arguments for constructing a PolicyStorage resource.
type PolicyStorageArgs struct {
	// The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically delete. However, delete*after*days and retain*for*days cannot both be 0.
	DeleteAfterDays pulumi.IntPtrInput
	// Whether or not the associated delete*after*days value can be overridden by org scopes. Note: if the associated delete*after*days value is 0, overridable is ignored
	DeleteAfterOverridable pulumi.BoolPtrInput
	// The policy description.
	Description pulumi.StringPtrInput
	// The policy name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However, retain*for*days and delete*after*days cannot both be 0.
	RetainForDays pulumi.IntPtrInput
	// Whether or not the associated retain*for*days value can be overridden by org scopes. Note: if the associated retain*for*days value is 0, overridable is ignored.
	RetainForOverridable pulumi.BoolPtrInput
	// The scope for this policy.
	ScopeId pulumi.StringInput
}

func (PolicyStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyStorageArgs)(nil)).Elem()
}

type PolicyStorageInput interface {
	pulumi.Input

	ToPolicyStorageOutput() PolicyStorageOutput
	ToPolicyStorageOutputWithContext(ctx context.Context) PolicyStorageOutput
}

func (*PolicyStorage) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyStorage)(nil)).Elem()
}

func (i *PolicyStorage) ToPolicyStorageOutput() PolicyStorageOutput {
	return i.ToPolicyStorageOutputWithContext(context.Background())
}

func (i *PolicyStorage) ToPolicyStorageOutputWithContext(ctx context.Context) PolicyStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStorageOutput)
}

// PolicyStorageArrayInput is an input type that accepts PolicyStorageArray and PolicyStorageArrayOutput values.
// You can construct a concrete instance of `PolicyStorageArrayInput` via:
//
//	PolicyStorageArray{ PolicyStorageArgs{...} }
type PolicyStorageArrayInput interface {
	pulumi.Input

	ToPolicyStorageArrayOutput() PolicyStorageArrayOutput
	ToPolicyStorageArrayOutputWithContext(context.Context) PolicyStorageArrayOutput
}

type PolicyStorageArray []PolicyStorageInput

func (PolicyStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyStorage)(nil)).Elem()
}

func (i PolicyStorageArray) ToPolicyStorageArrayOutput() PolicyStorageArrayOutput {
	return i.ToPolicyStorageArrayOutputWithContext(context.Background())
}

func (i PolicyStorageArray) ToPolicyStorageArrayOutputWithContext(ctx context.Context) PolicyStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStorageArrayOutput)
}

// PolicyStorageMapInput is an input type that accepts PolicyStorageMap and PolicyStorageMapOutput values.
// You can construct a concrete instance of `PolicyStorageMapInput` via:
//
//	PolicyStorageMap{ "key": PolicyStorageArgs{...} }
type PolicyStorageMapInput interface {
	pulumi.Input

	ToPolicyStorageMapOutput() PolicyStorageMapOutput
	ToPolicyStorageMapOutputWithContext(context.Context) PolicyStorageMapOutput
}

type PolicyStorageMap map[string]PolicyStorageInput

func (PolicyStorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyStorage)(nil)).Elem()
}

func (i PolicyStorageMap) ToPolicyStorageMapOutput() PolicyStorageMapOutput {
	return i.ToPolicyStorageMapOutputWithContext(context.Background())
}

func (i PolicyStorageMap) ToPolicyStorageMapOutputWithContext(ctx context.Context) PolicyStorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyStorageMapOutput)
}

type PolicyStorageOutput struct{ *pulumi.OutputState }

func (PolicyStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyStorage)(nil)).Elem()
}

func (o PolicyStorageOutput) ToPolicyStorageOutput() PolicyStorageOutput {
	return o
}

func (o PolicyStorageOutput) ToPolicyStorageOutputWithContext(ctx context.Context) PolicyStorageOutput {
	return o
}

// The number of days after which a session recording will be automatically deleted. Defaults to 0: never automatically delete. However, delete*after*days and retain*for*days cannot both be 0.
func (o PolicyStorageOutput) DeleteAfterDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyStorage) pulumi.IntPtrOutput { return v.DeleteAfterDays }).(pulumi.IntPtrOutput)
}

// Whether or not the associated delete*after*days value can be overridden by org scopes. Note: if the associated delete*after*days value is 0, overridable is ignored
func (o PolicyStorageOutput) DeleteAfterOverridable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyStorage) pulumi.BoolPtrOutput { return v.DeleteAfterOverridable }).(pulumi.BoolPtrOutput)
}

// The policy description.
func (o PolicyStorageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyStorage) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The policy name. Defaults to the resource name.
func (o PolicyStorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyStorage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of days a session recording is required to be stored. Defaults to 0: allow deletions at any time. However, retain*for*days and delete*after*days cannot both be 0.
func (o PolicyStorageOutput) RetainForDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyStorage) pulumi.IntPtrOutput { return v.RetainForDays }).(pulumi.IntPtrOutput)
}

// Whether or not the associated retain*for*days value can be overridden by org scopes. Note: if the associated retain*for*days value is 0, overridable is ignored.
func (o PolicyStorageOutput) RetainForOverridable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyStorage) pulumi.BoolPtrOutput { return v.RetainForOverridable }).(pulumi.BoolPtrOutput)
}

// The scope for this policy.
func (o PolicyStorageOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyStorage) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

type PolicyStorageArrayOutput struct{ *pulumi.OutputState }

func (PolicyStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyStorage)(nil)).Elem()
}

func (o PolicyStorageArrayOutput) ToPolicyStorageArrayOutput() PolicyStorageArrayOutput {
	return o
}

func (o PolicyStorageArrayOutput) ToPolicyStorageArrayOutputWithContext(ctx context.Context) PolicyStorageArrayOutput {
	return o
}

func (o PolicyStorageArrayOutput) Index(i pulumi.IntInput) PolicyStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyStorage {
		return vs[0].([]*PolicyStorage)[vs[1].(int)]
	}).(PolicyStorageOutput)
}

type PolicyStorageMapOutput struct{ *pulumi.OutputState }

func (PolicyStorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyStorage)(nil)).Elem()
}

func (o PolicyStorageMapOutput) ToPolicyStorageMapOutput() PolicyStorageMapOutput {
	return o
}

func (o PolicyStorageMapOutput) ToPolicyStorageMapOutputWithContext(ctx context.Context) PolicyStorageMapOutput {
	return o
}

func (o PolicyStorageMapOutput) MapIndex(k pulumi.StringInput) PolicyStorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyStorage {
		return vs[0].(map[string]*PolicyStorage)[vs[1].(string)]
	}).(PolicyStorageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStorageInput)(nil)).Elem(), &PolicyStorage{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStorageArrayInput)(nil)).Elem(), PolicyStorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyStorageMapInput)(nil)).Elem(), PolicyStorageMap{})
	pulumi.RegisterOutputType(PolicyStorageOutput{})
	pulumi.RegisterOutputType(PolicyStorageArrayOutput{})
	pulumi.RegisterOutputType(PolicyStorageMapOutput{})
}
