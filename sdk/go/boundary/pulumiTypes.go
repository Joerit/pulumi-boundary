// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GetAccountScope struct {
	Description   string `pulumi:"description"`
	Id            string `pulumi:"id"`
	Name          string `pulumi:"name"`
	ParentScopeId string `pulumi:"parentScopeId"`
	Type          string `pulumi:"type"`
}

// GetAccountScopeInput is an input type that accepts GetAccountScopeArgs and GetAccountScopeOutput values.
// You can construct a concrete instance of `GetAccountScopeInput` via:
//
//	GetAccountScopeArgs{...}
type GetAccountScopeInput interface {
	pulumi.Input

	ToGetAccountScopeOutput() GetAccountScopeOutput
	ToGetAccountScopeOutputWithContext(context.Context) GetAccountScopeOutput
}

type GetAccountScopeArgs struct {
	Description   pulumi.StringInput `pulumi:"description"`
	Id            pulumi.StringInput `pulumi:"id"`
	Name          pulumi.StringInput `pulumi:"name"`
	ParentScopeId pulumi.StringInput `pulumi:"parentScopeId"`
	Type          pulumi.StringInput `pulumi:"type"`
}

func (GetAccountScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountScope)(nil)).Elem()
}

func (i GetAccountScopeArgs) ToGetAccountScopeOutput() GetAccountScopeOutput {
	return i.ToGetAccountScopeOutputWithContext(context.Background())
}

func (i GetAccountScopeArgs) ToGetAccountScopeOutputWithContext(ctx context.Context) GetAccountScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountScopeOutput)
}

// GetAccountScopeArrayInput is an input type that accepts GetAccountScopeArray and GetAccountScopeArrayOutput values.
// You can construct a concrete instance of `GetAccountScopeArrayInput` via:
//
//	GetAccountScopeArray{ GetAccountScopeArgs{...} }
type GetAccountScopeArrayInput interface {
	pulumi.Input

	ToGetAccountScopeArrayOutput() GetAccountScopeArrayOutput
	ToGetAccountScopeArrayOutputWithContext(context.Context) GetAccountScopeArrayOutput
}

type GetAccountScopeArray []GetAccountScopeInput

func (GetAccountScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountScope)(nil)).Elem()
}

func (i GetAccountScopeArray) ToGetAccountScopeArrayOutput() GetAccountScopeArrayOutput {
	return i.ToGetAccountScopeArrayOutputWithContext(context.Background())
}

func (i GetAccountScopeArray) ToGetAccountScopeArrayOutputWithContext(ctx context.Context) GetAccountScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountScopeArrayOutput)
}

type GetAccountScopeOutput struct{ *pulumi.OutputState }

func (GetAccountScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountScope)(nil)).Elem()
}

func (o GetAccountScopeOutput) ToGetAccountScopeOutput() GetAccountScopeOutput {
	return o
}

func (o GetAccountScopeOutput) ToGetAccountScopeOutputWithContext(ctx context.Context) GetAccountScopeOutput {
	return o
}

func (o GetAccountScopeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountScope) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetAccountScopeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountScope) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAccountScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountScope) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAccountScopeOutput) ParentScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountScope) string { return v.ParentScopeId }).(pulumi.StringOutput)
}

func (o GetAccountScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountScope) string { return v.Type }).(pulumi.StringOutput)
}

type GetAccountScopeArrayOutput struct{ *pulumi.OutputState }

func (GetAccountScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountScope)(nil)).Elem()
}

func (o GetAccountScopeArrayOutput) ToGetAccountScopeArrayOutput() GetAccountScopeArrayOutput {
	return o
}

func (o GetAccountScopeArrayOutput) ToGetAccountScopeArrayOutputWithContext(ctx context.Context) GetAccountScopeArrayOutput {
	return o
}

func (o GetAccountScopeArrayOutput) Index(i pulumi.IntInput) GetAccountScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountScope {
		return vs[0].([]GetAccountScope)[vs[1].(int)]
	}).(GetAccountScopeOutput)
}

type GetAuthMethodScope struct {
	Description   string `pulumi:"description"`
	Id            string `pulumi:"id"`
	Name          string `pulumi:"name"`
	ParentScopeId string `pulumi:"parentScopeId"`
	Type          string `pulumi:"type"`
}

// GetAuthMethodScopeInput is an input type that accepts GetAuthMethodScopeArgs and GetAuthMethodScopeOutput values.
// You can construct a concrete instance of `GetAuthMethodScopeInput` via:
//
//	GetAuthMethodScopeArgs{...}
type GetAuthMethodScopeInput interface {
	pulumi.Input

	ToGetAuthMethodScopeOutput() GetAuthMethodScopeOutput
	ToGetAuthMethodScopeOutputWithContext(context.Context) GetAuthMethodScopeOutput
}

type GetAuthMethodScopeArgs struct {
	Description   pulumi.StringInput `pulumi:"description"`
	Id            pulumi.StringInput `pulumi:"id"`
	Name          pulumi.StringInput `pulumi:"name"`
	ParentScopeId pulumi.StringInput `pulumi:"parentScopeId"`
	Type          pulumi.StringInput `pulumi:"type"`
}

func (GetAuthMethodScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthMethodScope)(nil)).Elem()
}

func (i GetAuthMethodScopeArgs) ToGetAuthMethodScopeOutput() GetAuthMethodScopeOutput {
	return i.ToGetAuthMethodScopeOutputWithContext(context.Background())
}

func (i GetAuthMethodScopeArgs) ToGetAuthMethodScopeOutputWithContext(ctx context.Context) GetAuthMethodScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMethodScopeOutput)
}

// GetAuthMethodScopeArrayInput is an input type that accepts GetAuthMethodScopeArray and GetAuthMethodScopeArrayOutput values.
// You can construct a concrete instance of `GetAuthMethodScopeArrayInput` via:
//
//	GetAuthMethodScopeArray{ GetAuthMethodScopeArgs{...} }
type GetAuthMethodScopeArrayInput interface {
	pulumi.Input

	ToGetAuthMethodScopeArrayOutput() GetAuthMethodScopeArrayOutput
	ToGetAuthMethodScopeArrayOutputWithContext(context.Context) GetAuthMethodScopeArrayOutput
}

type GetAuthMethodScopeArray []GetAuthMethodScopeInput

func (GetAuthMethodScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAuthMethodScope)(nil)).Elem()
}

func (i GetAuthMethodScopeArray) ToGetAuthMethodScopeArrayOutput() GetAuthMethodScopeArrayOutput {
	return i.ToGetAuthMethodScopeArrayOutputWithContext(context.Background())
}

func (i GetAuthMethodScopeArray) ToGetAuthMethodScopeArrayOutputWithContext(ctx context.Context) GetAuthMethodScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMethodScopeArrayOutput)
}

type GetAuthMethodScopeOutput struct{ *pulumi.OutputState }

func (GetAuthMethodScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthMethodScope)(nil)).Elem()
}

func (o GetAuthMethodScopeOutput) ToGetAuthMethodScopeOutput() GetAuthMethodScopeOutput {
	return o
}

func (o GetAuthMethodScopeOutput) ToGetAuthMethodScopeOutputWithContext(ctx context.Context) GetAuthMethodScopeOutput {
	return o
}

func (o GetAuthMethodScopeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthMethodScope) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetAuthMethodScopeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthMethodScope) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAuthMethodScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthMethodScope) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetAuthMethodScopeOutput) ParentScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthMethodScope) string { return v.ParentScopeId }).(pulumi.StringOutput)
}

func (o GetAuthMethodScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthMethodScope) string { return v.Type }).(pulumi.StringOutput)
}

type GetAuthMethodScopeArrayOutput struct{ *pulumi.OutputState }

func (GetAuthMethodScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAuthMethodScope)(nil)).Elem()
}

func (o GetAuthMethodScopeArrayOutput) ToGetAuthMethodScopeArrayOutput() GetAuthMethodScopeArrayOutput {
	return o
}

func (o GetAuthMethodScopeArrayOutput) ToGetAuthMethodScopeArrayOutputWithContext(ctx context.Context) GetAuthMethodScopeArrayOutput {
	return o
}

func (o GetAuthMethodScopeArrayOutput) Index(i pulumi.IntInput) GetAuthMethodScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAuthMethodScope {
		return vs[0].([]GetAuthMethodScope)[vs[1].(int)]
	}).(GetAuthMethodScopeOutput)
}

type GetGroupScope struct {
	Description   string `pulumi:"description"`
	Id            string `pulumi:"id"`
	Name          string `pulumi:"name"`
	ParentScopeId string `pulumi:"parentScopeId"`
	Type          string `pulumi:"type"`
}

// GetGroupScopeInput is an input type that accepts GetGroupScopeArgs and GetGroupScopeOutput values.
// You can construct a concrete instance of `GetGroupScopeInput` via:
//
//	GetGroupScopeArgs{...}
type GetGroupScopeInput interface {
	pulumi.Input

	ToGetGroupScopeOutput() GetGroupScopeOutput
	ToGetGroupScopeOutputWithContext(context.Context) GetGroupScopeOutput
}

type GetGroupScopeArgs struct {
	Description   pulumi.StringInput `pulumi:"description"`
	Id            pulumi.StringInput `pulumi:"id"`
	Name          pulumi.StringInput `pulumi:"name"`
	ParentScopeId pulumi.StringInput `pulumi:"parentScopeId"`
	Type          pulumi.StringInput `pulumi:"type"`
}

func (GetGroupScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupScope)(nil)).Elem()
}

func (i GetGroupScopeArgs) ToGetGroupScopeOutput() GetGroupScopeOutput {
	return i.ToGetGroupScopeOutputWithContext(context.Background())
}

func (i GetGroupScopeArgs) ToGetGroupScopeOutputWithContext(ctx context.Context) GetGroupScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupScopeOutput)
}

// GetGroupScopeArrayInput is an input type that accepts GetGroupScopeArray and GetGroupScopeArrayOutput values.
// You can construct a concrete instance of `GetGroupScopeArrayInput` via:
//
//	GetGroupScopeArray{ GetGroupScopeArgs{...} }
type GetGroupScopeArrayInput interface {
	pulumi.Input

	ToGetGroupScopeArrayOutput() GetGroupScopeArrayOutput
	ToGetGroupScopeArrayOutputWithContext(context.Context) GetGroupScopeArrayOutput
}

type GetGroupScopeArray []GetGroupScopeInput

func (GetGroupScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupScope)(nil)).Elem()
}

func (i GetGroupScopeArray) ToGetGroupScopeArrayOutput() GetGroupScopeArrayOutput {
	return i.ToGetGroupScopeArrayOutputWithContext(context.Background())
}

func (i GetGroupScopeArray) ToGetGroupScopeArrayOutputWithContext(ctx context.Context) GetGroupScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupScopeArrayOutput)
}

type GetGroupScopeOutput struct{ *pulumi.OutputState }

func (GetGroupScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupScope)(nil)).Elem()
}

func (o GetGroupScopeOutput) ToGetGroupScopeOutput() GetGroupScopeOutput {
	return o
}

func (o GetGroupScopeOutput) ToGetGroupScopeOutputWithContext(ctx context.Context) GetGroupScopeOutput {
	return o
}

func (o GetGroupScopeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupScope) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetGroupScopeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupScope) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGroupScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupScope) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetGroupScopeOutput) ParentScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupScope) string { return v.ParentScopeId }).(pulumi.StringOutput)
}

func (o GetGroupScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupScope) string { return v.Type }).(pulumi.StringOutput)
}

type GetGroupScopeArrayOutput struct{ *pulumi.OutputState }

func (GetGroupScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupScope)(nil)).Elem()
}

func (o GetGroupScopeArrayOutput) ToGetGroupScopeArrayOutput() GetGroupScopeArrayOutput {
	return o
}

func (o GetGroupScopeArrayOutput) ToGetGroupScopeArrayOutputWithContext(ctx context.Context) GetGroupScopeArrayOutput {
	return o
}

func (o GetGroupScopeArrayOutput) Index(i pulumi.IntInput) GetGroupScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupScope {
		return vs[0].([]GetGroupScope)[vs[1].(int)]
	}).(GetGroupScopeOutput)
}

type GetUserScope struct {
	Description   string `pulumi:"description"`
	Id            string `pulumi:"id"`
	Name          string `pulumi:"name"`
	ParentScopeId string `pulumi:"parentScopeId"`
	Type          string `pulumi:"type"`
}

// GetUserScopeInput is an input type that accepts GetUserScopeArgs and GetUserScopeOutput values.
// You can construct a concrete instance of `GetUserScopeInput` via:
//
//	GetUserScopeArgs{...}
type GetUserScopeInput interface {
	pulumi.Input

	ToGetUserScopeOutput() GetUserScopeOutput
	ToGetUserScopeOutputWithContext(context.Context) GetUserScopeOutput
}

type GetUserScopeArgs struct {
	Description   pulumi.StringInput `pulumi:"description"`
	Id            pulumi.StringInput `pulumi:"id"`
	Name          pulumi.StringInput `pulumi:"name"`
	ParentScopeId pulumi.StringInput `pulumi:"parentScopeId"`
	Type          pulumi.StringInput `pulumi:"type"`
}

func (GetUserScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserScope)(nil)).Elem()
}

func (i GetUserScopeArgs) ToGetUserScopeOutput() GetUserScopeOutput {
	return i.ToGetUserScopeOutputWithContext(context.Background())
}

func (i GetUserScopeArgs) ToGetUserScopeOutputWithContext(ctx context.Context) GetUserScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserScopeOutput)
}

// GetUserScopeArrayInput is an input type that accepts GetUserScopeArray and GetUserScopeArrayOutput values.
// You can construct a concrete instance of `GetUserScopeArrayInput` via:
//
//	GetUserScopeArray{ GetUserScopeArgs{...} }
type GetUserScopeArrayInput interface {
	pulumi.Input

	ToGetUserScopeArrayOutput() GetUserScopeArrayOutput
	ToGetUserScopeArrayOutputWithContext(context.Context) GetUserScopeArrayOutput
}

type GetUserScopeArray []GetUserScopeInput

func (GetUserScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserScope)(nil)).Elem()
}

func (i GetUserScopeArray) ToGetUserScopeArrayOutput() GetUserScopeArrayOutput {
	return i.ToGetUserScopeArrayOutputWithContext(context.Background())
}

func (i GetUserScopeArray) ToGetUserScopeArrayOutputWithContext(ctx context.Context) GetUserScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserScopeArrayOutput)
}

type GetUserScopeOutput struct{ *pulumi.OutputState }

func (GetUserScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserScope)(nil)).Elem()
}

func (o GetUserScopeOutput) ToGetUserScopeOutput() GetUserScopeOutput {
	return o
}

func (o GetUserScopeOutput) ToGetUserScopeOutputWithContext(ctx context.Context) GetUserScopeOutput {
	return o
}

func (o GetUserScopeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserScope) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetUserScopeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserScope) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUserScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserScope) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetUserScopeOutput) ParentScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserScope) string { return v.ParentScopeId }).(pulumi.StringOutput)
}

func (o GetUserScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserScope) string { return v.Type }).(pulumi.StringOutput)
}

type GetUserScopeArrayOutput struct{ *pulumi.OutputState }

func (GetUserScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserScope)(nil)).Elem()
}

func (o GetUserScopeArrayOutput) ToGetUserScopeArrayOutput() GetUserScopeArrayOutput {
	return o
}

func (o GetUserScopeArrayOutput) ToGetUserScopeArrayOutputWithContext(ctx context.Context) GetUserScopeArrayOutput {
	return o
}

func (o GetUserScopeArrayOutput) Index(i pulumi.IntInput) GetUserScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserScope {
		return vs[0].([]GetUserScope)[vs[1].(int)]
	}).(GetUserScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountScopeInput)(nil)).Elem(), GetAccountScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountScopeArrayInput)(nil)).Elem(), GetAccountScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuthMethodScopeInput)(nil)).Elem(), GetAuthMethodScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuthMethodScopeArrayInput)(nil)).Elem(), GetAuthMethodScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupScopeInput)(nil)).Elem(), GetGroupScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupScopeArrayInput)(nil)).Elem(), GetGroupScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserScopeInput)(nil)).Elem(), GetUserScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserScopeArrayInput)(nil)).Elem(), GetUserScopeArray{})
	pulumi.RegisterOutputType(GetAccountScopeOutput{})
	pulumi.RegisterOutputType(GetAccountScopeArrayOutput{})
	pulumi.RegisterOutputType(GetAuthMethodScopeOutput{})
	pulumi.RegisterOutputType(GetAuthMethodScopeArrayOutput{})
	pulumi.RegisterOutputType(GetGroupScopeOutput{})
	pulumi.RegisterOutputType(GetGroupScopeArrayOutput{})
	pulumi.RegisterOutputType(GetUserScopeOutput{})
	pulumi.RegisterOutputType(GetUserScopeArrayOutput{})
}
