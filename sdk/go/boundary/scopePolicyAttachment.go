// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"errors"
	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ScopePolicyAttachment struct {
	pulumi.CustomResourceState

	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	ScopeId  pulumi.StringOutput `pulumi:"scopeId"`
}

// NewScopePolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewScopePolicyAttachment(ctx *pulumi.Context,
	name string, args *ScopePolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*ScopePolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScopePolicyAttachment
	err := ctx.RegisterResource("boundary:index/scopePolicyAttachment:ScopePolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopePolicyAttachment gets an existing ScopePolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopePolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopePolicyAttachmentState, opts ...pulumi.ResourceOption) (*ScopePolicyAttachment, error) {
	var resource ScopePolicyAttachment
	err := ctx.ReadResource("boundary:index/scopePolicyAttachment:ScopePolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopePolicyAttachment resources.
type scopePolicyAttachmentState struct {
	PolicyId *string `pulumi:"policyId"`
	ScopeId  *string `pulumi:"scopeId"`
}

type ScopePolicyAttachmentState struct {
	PolicyId pulumi.StringPtrInput
	ScopeId  pulumi.StringPtrInput
}

func (ScopePolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopePolicyAttachmentState)(nil)).Elem()
}

type scopePolicyAttachmentArgs struct {
	PolicyId string `pulumi:"policyId"`
	ScopeId  string `pulumi:"scopeId"`
}

// The set of arguments for constructing a ScopePolicyAttachment resource.
type ScopePolicyAttachmentArgs struct {
	PolicyId pulumi.StringInput
	ScopeId  pulumi.StringInput
}

func (ScopePolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopePolicyAttachmentArgs)(nil)).Elem()
}

type ScopePolicyAttachmentInput interface {
	pulumi.Input

	ToScopePolicyAttachmentOutput() ScopePolicyAttachmentOutput
	ToScopePolicyAttachmentOutputWithContext(ctx context.Context) ScopePolicyAttachmentOutput
}

func (*ScopePolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopePolicyAttachment)(nil)).Elem()
}

func (i *ScopePolicyAttachment) ToScopePolicyAttachmentOutput() ScopePolicyAttachmentOutput {
	return i.ToScopePolicyAttachmentOutputWithContext(context.Background())
}

func (i *ScopePolicyAttachment) ToScopePolicyAttachmentOutputWithContext(ctx context.Context) ScopePolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopePolicyAttachmentOutput)
}

// ScopePolicyAttachmentArrayInput is an input type that accepts ScopePolicyAttachmentArray and ScopePolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `ScopePolicyAttachmentArrayInput` via:
//
//	ScopePolicyAttachmentArray{ ScopePolicyAttachmentArgs{...} }
type ScopePolicyAttachmentArrayInput interface {
	pulumi.Input

	ToScopePolicyAttachmentArrayOutput() ScopePolicyAttachmentArrayOutput
	ToScopePolicyAttachmentArrayOutputWithContext(context.Context) ScopePolicyAttachmentArrayOutput
}

type ScopePolicyAttachmentArray []ScopePolicyAttachmentInput

func (ScopePolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopePolicyAttachment)(nil)).Elem()
}

func (i ScopePolicyAttachmentArray) ToScopePolicyAttachmentArrayOutput() ScopePolicyAttachmentArrayOutput {
	return i.ToScopePolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i ScopePolicyAttachmentArray) ToScopePolicyAttachmentArrayOutputWithContext(ctx context.Context) ScopePolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopePolicyAttachmentArrayOutput)
}

// ScopePolicyAttachmentMapInput is an input type that accepts ScopePolicyAttachmentMap and ScopePolicyAttachmentMapOutput values.
// You can construct a concrete instance of `ScopePolicyAttachmentMapInput` via:
//
//	ScopePolicyAttachmentMap{ "key": ScopePolicyAttachmentArgs{...} }
type ScopePolicyAttachmentMapInput interface {
	pulumi.Input

	ToScopePolicyAttachmentMapOutput() ScopePolicyAttachmentMapOutput
	ToScopePolicyAttachmentMapOutputWithContext(context.Context) ScopePolicyAttachmentMapOutput
}

type ScopePolicyAttachmentMap map[string]ScopePolicyAttachmentInput

func (ScopePolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopePolicyAttachment)(nil)).Elem()
}

func (i ScopePolicyAttachmentMap) ToScopePolicyAttachmentMapOutput() ScopePolicyAttachmentMapOutput {
	return i.ToScopePolicyAttachmentMapOutputWithContext(context.Background())
}

func (i ScopePolicyAttachmentMap) ToScopePolicyAttachmentMapOutputWithContext(ctx context.Context) ScopePolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopePolicyAttachmentMapOutput)
}

type ScopePolicyAttachmentOutput struct{ *pulumi.OutputState }

func (ScopePolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopePolicyAttachment)(nil)).Elem()
}

func (o ScopePolicyAttachmentOutput) ToScopePolicyAttachmentOutput() ScopePolicyAttachmentOutput {
	return o
}

func (o ScopePolicyAttachmentOutput) ToScopePolicyAttachmentOutputWithContext(ctx context.Context) ScopePolicyAttachmentOutput {
	return o
}

func (o ScopePolicyAttachmentOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopePolicyAttachment) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

func (o ScopePolicyAttachmentOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopePolicyAttachment) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

type ScopePolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ScopePolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScopePolicyAttachment)(nil)).Elem()
}

func (o ScopePolicyAttachmentArrayOutput) ToScopePolicyAttachmentArrayOutput() ScopePolicyAttachmentArrayOutput {
	return o
}

func (o ScopePolicyAttachmentArrayOutput) ToScopePolicyAttachmentArrayOutputWithContext(ctx context.Context) ScopePolicyAttachmentArrayOutput {
	return o
}

func (o ScopePolicyAttachmentArrayOutput) Index(i pulumi.IntInput) ScopePolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScopePolicyAttachment {
		return vs[0].([]*ScopePolicyAttachment)[vs[1].(int)]
	}).(ScopePolicyAttachmentOutput)
}

type ScopePolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (ScopePolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScopePolicyAttachment)(nil)).Elem()
}

func (o ScopePolicyAttachmentMapOutput) ToScopePolicyAttachmentMapOutput() ScopePolicyAttachmentMapOutput {
	return o
}

func (o ScopePolicyAttachmentMapOutput) ToScopePolicyAttachmentMapOutputWithContext(ctx context.Context) ScopePolicyAttachmentMapOutput {
	return o
}

func (o ScopePolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) ScopePolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScopePolicyAttachment {
		return vs[0].(map[string]*ScopePolicyAttachment)[vs[1].(string)]
	}).(ScopePolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScopePolicyAttachmentInput)(nil)).Elem(), &ScopePolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopePolicyAttachmentArrayInput)(nil)).Elem(), ScopePolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopePolicyAttachmentMapInput)(nil)).Elem(), ScopePolicyAttachmentMap{})
	pulumi.RegisterOutputType(ScopePolicyAttachmentOutput{})
	pulumi.RegisterOutputType(ScopePolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ScopePolicyAttachmentMapOutput{})
}
