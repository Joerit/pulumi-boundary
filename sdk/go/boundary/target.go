// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"errors"
	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Target struct {
	pulumi.CustomResourceState

	// Optionally, a valid network address to connect to for this target. Cannot be used alongside host_source_ids.
	Address pulumi.StringPtrOutput `pulumi:"address"`
	// A list of brokered credential source ID's.
	BrokeredCredentialSourceIds pulumi.StringArrayOutput `pulumi:"brokeredCredentialSourceIds"`
	// The default client port for this target.
	DefaultClientPort pulumi.IntPtrOutput `pulumi:"defaultClientPort"`
	// The default port for this target.
	DefaultPort pulumi.IntPtrOutput `pulumi:"defaultPort"`
	// The target description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Boolean expression to filter the workers used to access this target
	EgressWorkerFilter pulumi.StringPtrOutput `pulumi:"egressWorkerFilter"`
	// HCP/Ent Only. Enable sessions recording for this target. Only applicable for SSH targets.
	EnableSessionRecording pulumi.BoolPtrOutput `pulumi:"enableSessionRecording"`
	// A list of host source ID's. Cannot be used alongside address.
	HostSourceIds pulumi.StringArrayOutput `pulumi:"hostSourceIds"`
	// HCP Only. Boolean expression to filter the workers a user will connect to when initiating a session against this target
	IngressWorkerFilter pulumi.StringPtrOutput `pulumi:"ingressWorkerFilter"`
	// A list of injected application credential source ID's.
	InjectedApplicationCredentialSourceIds pulumi.StringArrayOutput `pulumi:"injectedApplicationCredentialSourceIds"`
	// The target name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope ID in which the resource is created. Defaults to the provider's `defaultScope` if unset.
	ScopeId                pulumi.StringOutput `pulumi:"scopeId"`
	SessionConnectionLimit pulumi.IntOutput    `pulumi:"sessionConnectionLimit"`
	SessionMaxSeconds      pulumi.IntOutput    `pulumi:"sessionMaxSeconds"`
	// HCP/Ent Only. Storage bucket for this target. Only applicable for SSH targets.
	StorageBucketId pulumi.StringPtrOutput `pulumi:"storageBucketId"`
	// The target resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Boolean expression to filter the workers for this target
	//
	// Deprecated: Deprecated. Use `egressWorkerFilter` and `ingressWorkerFilter` instead
	WorkerFilter pulumi.StringPtrOutput `pulumi:"workerFilter"`
}

// NewTarget registers a new resource with the given unique name, arguments, and options.
func NewTarget(ctx *pulumi.Context,
	name string, args *TargetArgs, opts ...pulumi.ResourceOption) (*Target, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Target
	err := ctx.RegisterResource("boundary:index/target:Target", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTarget gets an existing Target resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetState, opts ...pulumi.ResourceOption) (*Target, error) {
	var resource Target
	err := ctx.ReadResource("boundary:index/target:Target", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Target resources.
type targetState struct {
	// Optionally, a valid network address to connect to for this target. Cannot be used alongside host_source_ids.
	Address *string `pulumi:"address"`
	// A list of brokered credential source ID's.
	BrokeredCredentialSourceIds []string `pulumi:"brokeredCredentialSourceIds"`
	// The default client port for this target.
	DefaultClientPort *int `pulumi:"defaultClientPort"`
	// The default port for this target.
	DefaultPort *int `pulumi:"defaultPort"`
	// The target description.
	Description *string `pulumi:"description"`
	// Boolean expression to filter the workers used to access this target
	EgressWorkerFilter *string `pulumi:"egressWorkerFilter"`
	// HCP/Ent Only. Enable sessions recording for this target. Only applicable for SSH targets.
	EnableSessionRecording *bool `pulumi:"enableSessionRecording"`
	// A list of host source ID's. Cannot be used alongside address.
	HostSourceIds []string `pulumi:"hostSourceIds"`
	// HCP Only. Boolean expression to filter the workers a user will connect to when initiating a session against this target
	IngressWorkerFilter *string `pulumi:"ingressWorkerFilter"`
	// A list of injected application credential source ID's.
	InjectedApplicationCredentialSourceIds []string `pulumi:"injectedApplicationCredentialSourceIds"`
	// The target name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID in which the resource is created. Defaults to the provider's `defaultScope` if unset.
	ScopeId                *string `pulumi:"scopeId"`
	SessionConnectionLimit *int    `pulumi:"sessionConnectionLimit"`
	SessionMaxSeconds      *int    `pulumi:"sessionMaxSeconds"`
	// HCP/Ent Only. Storage bucket for this target. Only applicable for SSH targets.
	StorageBucketId *string `pulumi:"storageBucketId"`
	// The target resource type.
	Type *string `pulumi:"type"`
	// Boolean expression to filter the workers for this target
	//
	// Deprecated: Deprecated. Use `egressWorkerFilter` and `ingressWorkerFilter` instead
	WorkerFilter *string `pulumi:"workerFilter"`
}

type TargetState struct {
	// Optionally, a valid network address to connect to for this target. Cannot be used alongside host_source_ids.
	Address pulumi.StringPtrInput
	// A list of brokered credential source ID's.
	BrokeredCredentialSourceIds pulumi.StringArrayInput
	// The default client port for this target.
	DefaultClientPort pulumi.IntPtrInput
	// The default port for this target.
	DefaultPort pulumi.IntPtrInput
	// The target description.
	Description pulumi.StringPtrInput
	// Boolean expression to filter the workers used to access this target
	EgressWorkerFilter pulumi.StringPtrInput
	// HCP/Ent Only. Enable sessions recording for this target. Only applicable for SSH targets.
	EnableSessionRecording pulumi.BoolPtrInput
	// A list of host source ID's. Cannot be used alongside address.
	HostSourceIds pulumi.StringArrayInput
	// HCP Only. Boolean expression to filter the workers a user will connect to when initiating a session against this target
	IngressWorkerFilter pulumi.StringPtrInput
	// A list of injected application credential source ID's.
	InjectedApplicationCredentialSourceIds pulumi.StringArrayInput
	// The target name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID in which the resource is created. Defaults to the provider's `defaultScope` if unset.
	ScopeId                pulumi.StringPtrInput
	SessionConnectionLimit pulumi.IntPtrInput
	SessionMaxSeconds      pulumi.IntPtrInput
	// HCP/Ent Only. Storage bucket for this target. Only applicable for SSH targets.
	StorageBucketId pulumi.StringPtrInput
	// The target resource type.
	Type pulumi.StringPtrInput
	// Boolean expression to filter the workers for this target
	//
	// Deprecated: Deprecated. Use `egressWorkerFilter` and `ingressWorkerFilter` instead
	WorkerFilter pulumi.StringPtrInput
}

func (TargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetState)(nil)).Elem()
}

type targetArgs struct {
	// Optionally, a valid network address to connect to for this target. Cannot be used alongside host_source_ids.
	Address *string `pulumi:"address"`
	// A list of brokered credential source ID's.
	BrokeredCredentialSourceIds []string `pulumi:"brokeredCredentialSourceIds"`
	// The default client port for this target.
	DefaultClientPort *int `pulumi:"defaultClientPort"`
	// The default port for this target.
	DefaultPort *int `pulumi:"defaultPort"`
	// The target description.
	Description *string `pulumi:"description"`
	// Boolean expression to filter the workers used to access this target
	EgressWorkerFilter *string `pulumi:"egressWorkerFilter"`
	// HCP/Ent Only. Enable sessions recording for this target. Only applicable for SSH targets.
	EnableSessionRecording *bool `pulumi:"enableSessionRecording"`
	// A list of host source ID's. Cannot be used alongside address.
	HostSourceIds []string `pulumi:"hostSourceIds"`
	// HCP Only. Boolean expression to filter the workers a user will connect to when initiating a session against this target
	IngressWorkerFilter *string `pulumi:"ingressWorkerFilter"`
	// A list of injected application credential source ID's.
	InjectedApplicationCredentialSourceIds []string `pulumi:"injectedApplicationCredentialSourceIds"`
	// The target name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID in which the resource is created. Defaults to the provider's `defaultScope` if unset.
	ScopeId                string `pulumi:"scopeId"`
	SessionConnectionLimit *int   `pulumi:"sessionConnectionLimit"`
	SessionMaxSeconds      *int   `pulumi:"sessionMaxSeconds"`
	// HCP/Ent Only. Storage bucket for this target. Only applicable for SSH targets.
	StorageBucketId *string `pulumi:"storageBucketId"`
	// The target resource type.
	Type string `pulumi:"type"`
	// Boolean expression to filter the workers for this target
	//
	// Deprecated: Deprecated. Use `egressWorkerFilter` and `ingressWorkerFilter` instead
	WorkerFilter *string `pulumi:"workerFilter"`
}

// The set of arguments for constructing a Target resource.
type TargetArgs struct {
	// Optionally, a valid network address to connect to for this target. Cannot be used alongside host_source_ids.
	Address pulumi.StringPtrInput
	// A list of brokered credential source ID's.
	BrokeredCredentialSourceIds pulumi.StringArrayInput
	// The default client port for this target.
	DefaultClientPort pulumi.IntPtrInput
	// The default port for this target.
	DefaultPort pulumi.IntPtrInput
	// The target description.
	Description pulumi.StringPtrInput
	// Boolean expression to filter the workers used to access this target
	EgressWorkerFilter pulumi.StringPtrInput
	// HCP/Ent Only. Enable sessions recording for this target. Only applicable for SSH targets.
	EnableSessionRecording pulumi.BoolPtrInput
	// A list of host source ID's. Cannot be used alongside address.
	HostSourceIds pulumi.StringArrayInput
	// HCP Only. Boolean expression to filter the workers a user will connect to when initiating a session against this target
	IngressWorkerFilter pulumi.StringPtrInput
	// A list of injected application credential source ID's.
	InjectedApplicationCredentialSourceIds pulumi.StringArrayInput
	// The target name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID in which the resource is created. Defaults to the provider's `defaultScope` if unset.
	ScopeId                pulumi.StringInput
	SessionConnectionLimit pulumi.IntPtrInput
	SessionMaxSeconds      pulumi.IntPtrInput
	// HCP/Ent Only. Storage bucket for this target. Only applicable for SSH targets.
	StorageBucketId pulumi.StringPtrInput
	// The target resource type.
	Type pulumi.StringInput
	// Boolean expression to filter the workers for this target
	//
	// Deprecated: Deprecated. Use `egressWorkerFilter` and `ingressWorkerFilter` instead
	WorkerFilter pulumi.StringPtrInput
}

func (TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetArgs)(nil)).Elem()
}

type TargetInput interface {
	pulumi.Input

	ToTargetOutput() TargetOutput
	ToTargetOutputWithContext(ctx context.Context) TargetOutput
}

func (*Target) ElementType() reflect.Type {
	return reflect.TypeOf((**Target)(nil)).Elem()
}

func (i *Target) ToTargetOutput() TargetOutput {
	return i.ToTargetOutputWithContext(context.Background())
}

func (i *Target) ToTargetOutputWithContext(ctx context.Context) TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetOutput)
}

// TargetArrayInput is an input type that accepts TargetArray and TargetArrayOutput values.
// You can construct a concrete instance of `TargetArrayInput` via:
//
//	TargetArray{ TargetArgs{...} }
type TargetArrayInput interface {
	pulumi.Input

	ToTargetArrayOutput() TargetArrayOutput
	ToTargetArrayOutputWithContext(context.Context) TargetArrayOutput
}

type TargetArray []TargetInput

func (TargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Target)(nil)).Elem()
}

func (i TargetArray) ToTargetArrayOutput() TargetArrayOutput {
	return i.ToTargetArrayOutputWithContext(context.Background())
}

func (i TargetArray) ToTargetArrayOutputWithContext(ctx context.Context) TargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetArrayOutput)
}

// TargetMapInput is an input type that accepts TargetMap and TargetMapOutput values.
// You can construct a concrete instance of `TargetMapInput` via:
//
//	TargetMap{ "key": TargetArgs{...} }
type TargetMapInput interface {
	pulumi.Input

	ToTargetMapOutput() TargetMapOutput
	ToTargetMapOutputWithContext(context.Context) TargetMapOutput
}

type TargetMap map[string]TargetInput

func (TargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Target)(nil)).Elem()
}

func (i TargetMap) ToTargetMapOutput() TargetMapOutput {
	return i.ToTargetMapOutputWithContext(context.Background())
}

func (i TargetMap) ToTargetMapOutputWithContext(ctx context.Context) TargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetMapOutput)
}

type TargetOutput struct{ *pulumi.OutputState }

func (TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Target)(nil)).Elem()
}

func (o TargetOutput) ToTargetOutput() TargetOutput {
	return o
}

func (o TargetOutput) ToTargetOutputWithContext(ctx context.Context) TargetOutput {
	return o
}

// Optionally, a valid network address to connect to for this target. Cannot be used alongside host_source_ids.
func (o TargetOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) pulumi.StringPtrOutput { return v.Address }).(pulumi.StringPtrOutput)
}

// A list of brokered credential source ID's.
func (o TargetOutput) BrokeredCredentialSourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Target) pulumi.StringArrayOutput { return v.BrokeredCredentialSourceIds }).(pulumi.StringArrayOutput)
}

// The default client port for this target.
func (o TargetOutput) DefaultClientPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Target) pulumi.IntPtrOutput { return v.DefaultClientPort }).(pulumi.IntPtrOutput)
}

// The default port for this target.
func (o TargetOutput) DefaultPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Target) pulumi.IntPtrOutput { return v.DefaultPort }).(pulumi.IntPtrOutput)
}

// The target description.
func (o TargetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Boolean expression to filter the workers used to access this target
func (o TargetOutput) EgressWorkerFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) pulumi.StringPtrOutput { return v.EgressWorkerFilter }).(pulumi.StringPtrOutput)
}

// HCP/Ent Only. Enable sessions recording for this target. Only applicable for SSH targets.
func (o TargetOutput) EnableSessionRecording() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Target) pulumi.BoolPtrOutput { return v.EnableSessionRecording }).(pulumi.BoolPtrOutput)
}

// A list of host source ID's. Cannot be used alongside address.
func (o TargetOutput) HostSourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Target) pulumi.StringArrayOutput { return v.HostSourceIds }).(pulumi.StringArrayOutput)
}

// HCP Only. Boolean expression to filter the workers a user will connect to when initiating a session against this target
func (o TargetOutput) IngressWorkerFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) pulumi.StringPtrOutput { return v.IngressWorkerFilter }).(pulumi.StringPtrOutput)
}

// A list of injected application credential source ID's.
func (o TargetOutput) InjectedApplicationCredentialSourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Target) pulumi.StringArrayOutput { return v.InjectedApplicationCredentialSourceIds }).(pulumi.StringArrayOutput)
}

// The target name. Defaults to the resource name.
func (o TargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope ID in which the resource is created. Defaults to the provider's `defaultScope` if unset.
func (o TargetOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

func (o TargetOutput) SessionConnectionLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Target) pulumi.IntOutput { return v.SessionConnectionLimit }).(pulumi.IntOutput)
}

func (o TargetOutput) SessionMaxSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *Target) pulumi.IntOutput { return v.SessionMaxSeconds }).(pulumi.IntOutput)
}

// HCP/Ent Only. Storage bucket for this target. Only applicable for SSH targets.
func (o TargetOutput) StorageBucketId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) pulumi.StringPtrOutput { return v.StorageBucketId }).(pulumi.StringPtrOutput)
}

// The target resource type.
func (o TargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Target) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Boolean expression to filter the workers for this target
//
// Deprecated: Deprecated. Use `egressWorkerFilter` and `ingressWorkerFilter` instead
func (o TargetOutput) WorkerFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Target) pulumi.StringPtrOutput { return v.WorkerFilter }).(pulumi.StringPtrOutput)
}

type TargetArrayOutput struct{ *pulumi.OutputState }

func (TargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Target)(nil)).Elem()
}

func (o TargetArrayOutput) ToTargetArrayOutput() TargetArrayOutput {
	return o
}

func (o TargetArrayOutput) ToTargetArrayOutputWithContext(ctx context.Context) TargetArrayOutput {
	return o
}

func (o TargetArrayOutput) Index(i pulumi.IntInput) TargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Target {
		return vs[0].([]*Target)[vs[1].(int)]
	}).(TargetOutput)
}

type TargetMapOutput struct{ *pulumi.OutputState }

func (TargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Target)(nil)).Elem()
}

func (o TargetMapOutput) ToTargetMapOutput() TargetMapOutput {
	return o
}

func (o TargetMapOutput) ToTargetMapOutputWithContext(ctx context.Context) TargetMapOutput {
	return o
}

func (o TargetMapOutput) MapIndex(k pulumi.StringInput) TargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Target {
		return vs[0].(map[string]*Target)[vs[1].(string)]
	}).(TargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetInput)(nil)).Elem(), &Target{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetArrayInput)(nil)).Elem(), TargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TargetMapInput)(nil)).Elem(), TargetMap{})
	pulumi.RegisterOutputType(TargetOutput{})
	pulumi.RegisterOutputType(TargetArrayOutput{})
	pulumi.RegisterOutputType(TargetMapOutput{})
}
