// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/joerit/pulumi-boundary/sdk/go/boundary/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Worker struct {
	pulumi.CustomResourceState

	// The accessible address of the self managed worker.
	Address pulumi.StringOutput `pulumi:"address"`
	// A list of actions that the worker is entitled to perform.
	AuthorizedActions pulumi.StringArrayOutput `pulumi:"authorizedActions"`
	// A single use token generated by the controller to be passed to the self-managed worker.
	ControllerGeneratedActivationToken pulumi.StringOutput `pulumi:"controllerGeneratedActivationToken"`
	// The description for the worker.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name for the worker.
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the Boundary binary running on the self managed worker.
	ReleaseVersion pulumi.IntOutput `pulumi:"releaseVersion"`
	// The scope for the worker. Defaults to `global`.
	ScopeId pulumi.StringPtrOutput `pulumi:"scopeId"`
	// The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this
	// blank will result in a controller generated token.
	WorkerGeneratedAuthToken pulumi.StringPtrOutput `pulumi:"workerGeneratedAuthToken"`
}

// NewWorker registers a new resource with the given unique name, arguments, and options.
func NewWorker(ctx *pulumi.Context,
	name string, args *WorkerArgs, opts ...pulumi.ResourceOption) (*Worker, error) {
	if args == nil {
		args = &WorkerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Worker
	err := ctx.RegisterResource("boundary:index/worker:Worker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorker gets an existing Worker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerState, opts ...pulumi.ResourceOption) (*Worker, error) {
	var resource Worker
	err := ctx.ReadResource("boundary:index/worker:Worker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Worker resources.
type workerState struct {
	// The accessible address of the self managed worker.
	Address *string `pulumi:"address"`
	// A list of actions that the worker is entitled to perform.
	AuthorizedActions []string `pulumi:"authorizedActions"`
	// A single use token generated by the controller to be passed to the self-managed worker.
	ControllerGeneratedActivationToken *string `pulumi:"controllerGeneratedActivationToken"`
	// The description for the worker.
	Description *string `pulumi:"description"`
	// The name for the worker.
	Name *string `pulumi:"name"`
	// The version of the Boundary binary running on the self managed worker.
	ReleaseVersion *int `pulumi:"releaseVersion"`
	// The scope for the worker. Defaults to `global`.
	ScopeId *string `pulumi:"scopeId"`
	// The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this
	// blank will result in a controller generated token.
	WorkerGeneratedAuthToken *string `pulumi:"workerGeneratedAuthToken"`
}

type WorkerState struct {
	// The accessible address of the self managed worker.
	Address pulumi.StringPtrInput
	// A list of actions that the worker is entitled to perform.
	AuthorizedActions pulumi.StringArrayInput
	// A single use token generated by the controller to be passed to the self-managed worker.
	ControllerGeneratedActivationToken pulumi.StringPtrInput
	// The description for the worker.
	Description pulumi.StringPtrInput
	// The name for the worker.
	Name pulumi.StringPtrInput
	// The version of the Boundary binary running on the self managed worker.
	ReleaseVersion pulumi.IntPtrInput
	// The scope for the worker. Defaults to `global`.
	ScopeId pulumi.StringPtrInput
	// The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this
	// blank will result in a controller generated token.
	WorkerGeneratedAuthToken pulumi.StringPtrInput
}

func (WorkerState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerState)(nil)).Elem()
}

type workerArgs struct {
	// The description for the worker.
	Description *string `pulumi:"description"`
	// The name for the worker.
	Name *string `pulumi:"name"`
	// The scope for the worker. Defaults to `global`.
	ScopeId *string `pulumi:"scopeId"`
	// The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this
	// blank will result in a controller generated token.
	WorkerGeneratedAuthToken *string `pulumi:"workerGeneratedAuthToken"`
}

// The set of arguments for constructing a Worker resource.
type WorkerArgs struct {
	// The description for the worker.
	Description pulumi.StringPtrInput
	// The name for the worker.
	Name pulumi.StringPtrInput
	// The scope for the worker. Defaults to `global`.
	ScopeId pulumi.StringPtrInput
	// The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this
	// blank will result in a controller generated token.
	WorkerGeneratedAuthToken pulumi.StringPtrInput
}

func (WorkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerArgs)(nil)).Elem()
}

type WorkerInput interface {
	pulumi.Input

	ToWorkerOutput() WorkerOutput
	ToWorkerOutputWithContext(ctx context.Context) WorkerOutput
}

func (*Worker) ElementType() reflect.Type {
	return reflect.TypeOf((**Worker)(nil)).Elem()
}

func (i *Worker) ToWorkerOutput() WorkerOutput {
	return i.ToWorkerOutputWithContext(context.Background())
}

func (i *Worker) ToWorkerOutputWithContext(ctx context.Context) WorkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerOutput)
}

// WorkerArrayInput is an input type that accepts WorkerArray and WorkerArrayOutput values.
// You can construct a concrete instance of `WorkerArrayInput` via:
//
//	WorkerArray{ WorkerArgs{...} }
type WorkerArrayInput interface {
	pulumi.Input

	ToWorkerArrayOutput() WorkerArrayOutput
	ToWorkerArrayOutputWithContext(context.Context) WorkerArrayOutput
}

type WorkerArray []WorkerInput

func (WorkerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Worker)(nil)).Elem()
}

func (i WorkerArray) ToWorkerArrayOutput() WorkerArrayOutput {
	return i.ToWorkerArrayOutputWithContext(context.Background())
}

func (i WorkerArray) ToWorkerArrayOutputWithContext(ctx context.Context) WorkerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerArrayOutput)
}

// WorkerMapInput is an input type that accepts WorkerMap and WorkerMapOutput values.
// You can construct a concrete instance of `WorkerMapInput` via:
//
//	WorkerMap{ "key": WorkerArgs{...} }
type WorkerMapInput interface {
	pulumi.Input

	ToWorkerMapOutput() WorkerMapOutput
	ToWorkerMapOutputWithContext(context.Context) WorkerMapOutput
}

type WorkerMap map[string]WorkerInput

func (WorkerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Worker)(nil)).Elem()
}

func (i WorkerMap) ToWorkerMapOutput() WorkerMapOutput {
	return i.ToWorkerMapOutputWithContext(context.Background())
}

func (i WorkerMap) ToWorkerMapOutputWithContext(ctx context.Context) WorkerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerMapOutput)
}

type WorkerOutput struct{ *pulumi.OutputState }

func (WorkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Worker)(nil)).Elem()
}

func (o WorkerOutput) ToWorkerOutput() WorkerOutput {
	return o
}

func (o WorkerOutput) ToWorkerOutputWithContext(ctx context.Context) WorkerOutput {
	return o
}

// The accessible address of the self managed worker.
func (o WorkerOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// A list of actions that the worker is entitled to perform.
func (o WorkerOutput) AuthorizedActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringArrayOutput { return v.AuthorizedActions }).(pulumi.StringArrayOutput)
}

// A single use token generated by the controller to be passed to the self-managed worker.
func (o WorkerOutput) ControllerGeneratedActivationToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringOutput { return v.ControllerGeneratedActivationToken }).(pulumi.StringOutput)
}

// The description for the worker.
func (o WorkerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name for the worker.
func (o WorkerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the Boundary binary running on the self managed worker.
func (o WorkerOutput) ReleaseVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *Worker) pulumi.IntOutput { return v.ReleaseVersion }).(pulumi.IntOutput)
}

// The scope for the worker. Defaults to `global`.
func (o WorkerOutput) ScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringPtrOutput { return v.ScopeId }).(pulumi.StringPtrOutput)
}

// The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this
// blank will result in a controller generated token.
func (o WorkerOutput) WorkerGeneratedAuthToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringPtrOutput { return v.WorkerGeneratedAuthToken }).(pulumi.StringPtrOutput)
}

type WorkerArrayOutput struct{ *pulumi.OutputState }

func (WorkerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Worker)(nil)).Elem()
}

func (o WorkerArrayOutput) ToWorkerArrayOutput() WorkerArrayOutput {
	return o
}

func (o WorkerArrayOutput) ToWorkerArrayOutputWithContext(ctx context.Context) WorkerArrayOutput {
	return o
}

func (o WorkerArrayOutput) Index(i pulumi.IntInput) WorkerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Worker {
		return vs[0].([]*Worker)[vs[1].(int)]
	}).(WorkerOutput)
}

type WorkerMapOutput struct{ *pulumi.OutputState }

func (WorkerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Worker)(nil)).Elem()
}

func (o WorkerMapOutput) ToWorkerMapOutput() WorkerMapOutput {
	return o
}

func (o WorkerMapOutput) ToWorkerMapOutputWithContext(ctx context.Context) WorkerMapOutput {
	return o
}

func (o WorkerMapOutput) MapIndex(k pulumi.StringInput) WorkerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Worker {
		return vs[0].(map[string]*Worker)[vs[1].(string)]
	}).(WorkerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerInput)(nil)).Elem(), &Worker{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerArrayInput)(nil)).Elem(), WorkerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerMapInput)(nil)).Elem(), WorkerMap{})
	pulumi.RegisterOutputType(WorkerOutput{})
	pulumi.RegisterOutputType(WorkerArrayOutput{})
	pulumi.RegisterOutputType(WorkerMapOutput{})
}
