# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AliasTargetArgs', 'AliasTarget']

@pulumi.input_type
class AliasTargetArgs:
    def __init__(__self__, *,
                 scope_id: pulumi.Input[str],
                 value: pulumi.Input[str],
                 authorize_session_host_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AliasTarget resource.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[str] value: The value of the alias.
        :param pulumi.Input[str] authorize_session_host_id: The host id to pass to Boundary when performing an authorize session action.
        :param pulumi.Input[str] description: The alias description.
        :param pulumi.Input[str] destination_id: The destination of the alias.
        :param pulumi.Input[str] name: The alias name. Defaults to the resource name.
        :param pulumi.Input[str] type: The type of alias; hardcoded.
        """
        pulumi.set(__self__, "scope_id", scope_id)
        pulumi.set(__self__, "value", value)
        if authorize_session_host_id is not None:
            pulumi.set(__self__, "authorize_session_host_id", authorize_session_host_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_id is not None:
            pulumi.set(__self__, "destination_id", destination_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Input[str]:
        """
        The scope ID.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the alias.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="authorizeSessionHostId")
    def authorize_session_host_id(self) -> Optional[pulumi.Input[str]]:
        """
        The host id to pass to Boundary when performing an authorize session action.
        """
        return pulumi.get(self, "authorize_session_host_id")

    @authorize_session_host_id.setter
    def authorize_session_host_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorize_session_host_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The alias description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> Optional[pulumi.Input[str]]:
        """
        The destination of the alias.
        """
        return pulumi.get(self, "destination_id")

    @destination_id.setter
    def destination_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The alias name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of alias; hardcoded.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _AliasTargetState:
    def __init__(__self__, *,
                 authorize_session_host_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AliasTarget resources.
        :param pulumi.Input[str] authorize_session_host_id: The host id to pass to Boundary when performing an authorize session action.
        :param pulumi.Input[str] description: The alias description.
        :param pulumi.Input[str] destination_id: The destination of the alias.
        :param pulumi.Input[str] name: The alias name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[str] type: The type of alias; hardcoded.
        :param pulumi.Input[str] value: The value of the alias.
        """
        if authorize_session_host_id is not None:
            pulumi.set(__self__, "authorize_session_host_id", authorize_session_host_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_id is not None:
            pulumi.set(__self__, "destination_id", destination_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope_id is not None:
            pulumi.set(__self__, "scope_id", scope_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="authorizeSessionHostId")
    def authorize_session_host_id(self) -> Optional[pulumi.Input[str]]:
        """
        The host id to pass to Boundary when performing an authorize session action.
        """
        return pulumi.get(self, "authorize_session_host_id")

    @authorize_session_host_id.setter
    def authorize_session_host_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorize_session_host_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The alias description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> Optional[pulumi.Input[str]]:
        """
        The destination of the alias.
        """
        return pulumi.get(self, "destination_id")

    @destination_id.setter
    def destination_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The alias name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope ID.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of alias; hardcoded.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the alias.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


class AliasTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorize_session_host_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The target alias resource allows you to configure a Boundary target alias.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_boundary as boundary

        org = boundary.Scope("org",
            name="organization_one",
            description="global scope",
            scope_id="global",
            auto_create_admin_role=True,
            auto_create_default_role=True)
        project = boundary.Scope("project",
            name="project_one",
            description="My first scope!",
            scope_id=org.id,
            auto_create_admin_role=True)
        foo = boundary.HostCatalogStatic("foo",
            name="test",
            description="test catalog",
            scope_id=project.id)
        foo_host_static = boundary.HostStatic("foo",
            name="foo",
            host_catalog_id=foo.id,
            address="10.0.0.1")
        bar = boundary.HostStatic("bar",
            name="bar",
            host_catalog_id=foo.id,
            address="127.0.0.1")
        foo_host_set_static = boundary.HostSetStatic("foo",
            name="foo",
            host_catalog_id=foo.id,
            host_ids=[
                foo_host_static.id,
                bar.id,
            ])
        foo_target = boundary.Target("foo",
            name="foo",
            description="Foo target",
            type="tcp",
            default_port=22,
            scope_id=project.id,
            host_source_ids=[foo_host_set_static.id])
        example_alias_target = boundary.AliasTarget("example_alias_target",
            name="example_alias_target",
            description="Example alias to target foo using host boundary_host_static.bar",
            scope_id="global",
            value="example.bar.foo.boundary",
            destination_id=foo_target.id,
            authorize_session_host_id=bar.id)
        ```

        ## Import

        ```sh
        $ pulumi import boundary:index/aliasTarget:AliasTarget example_alias_target <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authorize_session_host_id: The host id to pass to Boundary when performing an authorize session action.
        :param pulumi.Input[str] description: The alias description.
        :param pulumi.Input[str] destination_id: The destination of the alias.
        :param pulumi.Input[str] name: The alias name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[str] type: The type of alias; hardcoded.
        :param pulumi.Input[str] value: The value of the alias.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AliasTargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The target alias resource allows you to configure a Boundary target alias.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_boundary as boundary

        org = boundary.Scope("org",
            name="organization_one",
            description="global scope",
            scope_id="global",
            auto_create_admin_role=True,
            auto_create_default_role=True)
        project = boundary.Scope("project",
            name="project_one",
            description="My first scope!",
            scope_id=org.id,
            auto_create_admin_role=True)
        foo = boundary.HostCatalogStatic("foo",
            name="test",
            description="test catalog",
            scope_id=project.id)
        foo_host_static = boundary.HostStatic("foo",
            name="foo",
            host_catalog_id=foo.id,
            address="10.0.0.1")
        bar = boundary.HostStatic("bar",
            name="bar",
            host_catalog_id=foo.id,
            address="127.0.0.1")
        foo_host_set_static = boundary.HostSetStatic("foo",
            name="foo",
            host_catalog_id=foo.id,
            host_ids=[
                foo_host_static.id,
                bar.id,
            ])
        foo_target = boundary.Target("foo",
            name="foo",
            description="Foo target",
            type="tcp",
            default_port=22,
            scope_id=project.id,
            host_source_ids=[foo_host_set_static.id])
        example_alias_target = boundary.AliasTarget("example_alias_target",
            name="example_alias_target",
            description="Example alias to target foo using host boundary_host_static.bar",
            scope_id="global",
            value="example.bar.foo.boundary",
            destination_id=foo_target.id,
            authorize_session_host_id=bar.id)
        ```

        ## Import

        ```sh
        $ pulumi import boundary:index/aliasTarget:AliasTarget example_alias_target <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param AliasTargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AliasTargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorize_session_host_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AliasTargetArgs.__new__(AliasTargetArgs)

            __props__.__dict__["authorize_session_host_id"] = authorize_session_host_id
            __props__.__dict__["description"] = description
            __props__.__dict__["destination_id"] = destination_id
            __props__.__dict__["name"] = name
            if scope_id is None and not opts.urn:
                raise TypeError("Missing required property 'scope_id'")
            __props__.__dict__["scope_id"] = scope_id
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
        super(AliasTarget, __self__).__init__(
            'boundary:index/aliasTarget:AliasTarget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authorize_session_host_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            destination_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            scope_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[str]] = None) -> 'AliasTarget':
        """
        Get an existing AliasTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authorize_session_host_id: The host id to pass to Boundary when performing an authorize session action.
        :param pulumi.Input[str] description: The alias description.
        :param pulumi.Input[str] destination_id: The destination of the alias.
        :param pulumi.Input[str] name: The alias name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[str] type: The type of alias; hardcoded.
        :param pulumi.Input[str] value: The value of the alias.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AliasTargetState.__new__(_AliasTargetState)

        __props__.__dict__["authorize_session_host_id"] = authorize_session_host_id
        __props__.__dict__["description"] = description
        __props__.__dict__["destination_id"] = destination_id
        __props__.__dict__["name"] = name
        __props__.__dict__["scope_id"] = scope_id
        __props__.__dict__["type"] = type
        __props__.__dict__["value"] = value
        return AliasTarget(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authorizeSessionHostId")
    def authorize_session_host_id(self) -> pulumi.Output[Optional[str]]:
        """
        The host id to pass to Boundary when performing an authorize session action.
        """
        return pulumi.get(self, "authorize_session_host_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The alias description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> pulumi.Output[Optional[str]]:
        """
        The destination of the alias.
        """
        return pulumi.get(self, "destination_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The alias name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Output[str]:
        """
        The scope ID.
        """
        return pulumi.get(self, "scope_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of alias; hardcoded.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        """
        The value of the alias.
        """
        return pulumi.get(self, "value")

