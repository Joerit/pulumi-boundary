# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AuthMethodLdapArgs', 'AuthMethodLdap']

@pulumi.input_type
class AuthMethodLdapArgs:
    def __init__(__self__, *,
                 scope_id: pulumi.Input[str],
                 account_attribute_maps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 anon_group_search: Optional[pulumi.Input[bool]] = None,
                 bind_dn: Optional[pulumi.Input[str]] = None,
                 bind_password: Optional[pulumi.Input[str]] = None,
                 bind_password_hmac: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_certificate_key: Optional[pulumi.Input[str]] = None,
                 client_certificate_key_hmac: Optional[pulumi.Input[str]] = None,
                 dereference_aliases: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discover_dn: Optional[pulumi.Input[bool]] = None,
                 enable_groups: Optional[pulumi.Input[bool]] = None,
                 group_attr: Optional[pulumi.Input[str]] = None,
                 group_dn: Optional[pulumi.Input[str]] = None,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 insecure_tls: Optional[pulumi.Input[bool]] = None,
                 is_primary_for_scope: Optional[pulumi.Input[bool]] = None,
                 maximum_page_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 start_tls: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 upn_domain: Optional[pulumi.Input[str]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_token_groups: Optional[pulumi.Input[bool]] = None,
                 user_attr: Optional[pulumi.Input[str]] = None,
                 user_dn: Optional[pulumi.Input[str]] = None,
                 user_filter: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AuthMethodLdap resource.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_attribute_maps: Account attribute maps fullname and email.
        :param pulumi.Input[bool] anon_group_search: Use anon bind when performing LDAP group searches (optional).
        :param pulumi.Input[str] bind_dn: The distinguished name of entry to bind when performing user and group searches (optional).
        :param pulumi.Input[str] bind_password: The password to use along with bind-dn performing user and group searches (optional).
        :param pulumi.Input[str] bind_password_hmac: The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificates: PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
        :param pulumi.Input[str] client_certificate: PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
        :param pulumi.Input[str] client_certificate_key: PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
        :param pulumi.Input[str] client_certificate_key_hmac: The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[str] dereference_aliases: Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
        :param pulumi.Input[str] description: The auth method description.
        :param pulumi.Input[bool] discover_dn: Use anon bind to discover the bind DN of a user (optional).
        :param pulumi.Input[bool] enable_groups: Find the authenticated user's groups during authentication (optional).
        :param pulumi.Input[str] group_attr: The attribute that enumerates a user's group membership from entries returned by a group search (optional).
        :param pulumi.Input[str] group_dn: The base DN under which to perform group search.
        :param pulumi.Input[str] group_filter: A go template used to construct a LDAP group search filter (optional).
        :param pulumi.Input[bool] insecure_tls: Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
        :param pulumi.Input[bool] is_primary_for_scope: When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
        :param pulumi.Input[int] maximum_page_size: MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
        :param pulumi.Input[str] name: The auth method name. Defaults to the resource name.
        :param pulumi.Input[bool] start_tls: Issue StartTLS command after connecting (optional).
        :param pulumi.Input[str] state: Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
        :param pulumi.Input[str] type: The type of auth method; hardcoded.
        :param pulumi.Input[str] upn_domain: The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] urls: The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
        :param pulumi.Input[bool] use_token_groups: Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
        :param pulumi.Input[str] user_attr: The attribute on user entry matching the username passed when authenticating (optional).
        :param pulumi.Input[str] user_dn: The base DN under which to perform user search (optional).
        :param pulumi.Input[str] user_filter: A go template used to construct a LDAP user search filter (optional).
        """
        pulumi.set(__self__, "scope_id", scope_id)
        if account_attribute_maps is not None:
            pulumi.set(__self__, "account_attribute_maps", account_attribute_maps)
        if anon_group_search is not None:
            pulumi.set(__self__, "anon_group_search", anon_group_search)
        if bind_dn is not None:
            pulumi.set(__self__, "bind_dn", bind_dn)
        if bind_password is not None:
            pulumi.set(__self__, "bind_password", bind_password)
        if bind_password_hmac is not None:
            pulumi.set(__self__, "bind_password_hmac", bind_password_hmac)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_certificate_key is not None:
            pulumi.set(__self__, "client_certificate_key", client_certificate_key)
        if client_certificate_key_hmac is not None:
            pulumi.set(__self__, "client_certificate_key_hmac", client_certificate_key_hmac)
        if dereference_aliases is not None:
            pulumi.set(__self__, "dereference_aliases", dereference_aliases)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if discover_dn is not None:
            pulumi.set(__self__, "discover_dn", discover_dn)
        if enable_groups is not None:
            pulumi.set(__self__, "enable_groups", enable_groups)
        if group_attr is not None:
            pulumi.set(__self__, "group_attr", group_attr)
        if group_dn is not None:
            pulumi.set(__self__, "group_dn", group_dn)
        if group_filter is not None:
            pulumi.set(__self__, "group_filter", group_filter)
        if insecure_tls is not None:
            pulumi.set(__self__, "insecure_tls", insecure_tls)
        if is_primary_for_scope is not None:
            pulumi.set(__self__, "is_primary_for_scope", is_primary_for_scope)
        if maximum_page_size is not None:
            pulumi.set(__self__, "maximum_page_size", maximum_page_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if start_tls is not None:
            pulumi.set(__self__, "start_tls", start_tls)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if upn_domain is not None:
            pulumi.set(__self__, "upn_domain", upn_domain)
        if urls is not None:
            pulumi.set(__self__, "urls", urls)
        if use_token_groups is not None:
            pulumi.set(__self__, "use_token_groups", use_token_groups)
        if user_attr is not None:
            pulumi.set(__self__, "user_attr", user_attr)
        if user_dn is not None:
            pulumi.set(__self__, "user_dn", user_dn)
        if user_filter is not None:
            pulumi.set(__self__, "user_filter", user_filter)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Input[str]:
        """
        The scope ID.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter(name="accountAttributeMaps")
    def account_attribute_maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Account attribute maps fullname and email.
        """
        return pulumi.get(self, "account_attribute_maps")

    @account_attribute_maps.setter
    def account_attribute_maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_attribute_maps", value)

    @property
    @pulumi.getter(name="anonGroupSearch")
    def anon_group_search(self) -> Optional[pulumi.Input[bool]]:
        """
        Use anon bind when performing LDAP group searches (optional).
        """
        return pulumi.get(self, "anon_group_search")

    @anon_group_search.setter
    def anon_group_search(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "anon_group_search", value)

    @property
    @pulumi.getter(name="bindDn")
    def bind_dn(self) -> Optional[pulumi.Input[str]]:
        """
        The distinguished name of entry to bind when performing user and group searches (optional).
        """
        return pulumi.get(self, "bind_dn")

    @bind_dn.setter
    def bind_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_dn", value)

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password to use along with bind-dn performing user and group searches (optional).
        """
        return pulumi.get(self, "bind_password")

    @bind_password.setter
    def bind_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_password", value)

    @property
    @pulumi.getter(name="bindPasswordHmac")
    def bind_password_hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
        """
        return pulumi.get(self, "bind_password_hmac")

    @bind_password_hmac.setter
    def bind_password_hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_password_hmac", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
        """
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientCertificateKey")
    def client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
        """
        return pulumi.get(self, "client_certificate_key")

    @client_certificate_key.setter
    def client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_key", value)

    @property
    @pulumi.getter(name="clientCertificateKeyHmac")
    def client_certificate_key_hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
        """
        return pulumi.get(self, "client_certificate_key_hmac")

    @client_certificate_key_hmac.setter
    def client_certificate_key_hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_key_hmac", value)

    @property
    @pulumi.getter(name="dereferenceAliases")
    def dereference_aliases(self) -> Optional[pulumi.Input[str]]:
        """
        Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
        """
        return pulumi.get(self, "dereference_aliases")

    @dereference_aliases.setter
    def dereference_aliases(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dereference_aliases", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The auth method description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discoverDn")
    def discover_dn(self) -> Optional[pulumi.Input[bool]]:
        """
        Use anon bind to discover the bind DN of a user (optional).
        """
        return pulumi.get(self, "discover_dn")

    @discover_dn.setter
    def discover_dn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "discover_dn", value)

    @property
    @pulumi.getter(name="enableGroups")
    def enable_groups(self) -> Optional[pulumi.Input[bool]]:
        """
        Find the authenticated user's groups during authentication (optional).
        """
        return pulumi.get(self, "enable_groups")

    @enable_groups.setter
    def enable_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_groups", value)

    @property
    @pulumi.getter(name="groupAttr")
    def group_attr(self) -> Optional[pulumi.Input[str]]:
        """
        The attribute that enumerates a user's group membership from entries returned by a group search (optional).
        """
        return pulumi.get(self, "group_attr")

    @group_attr.setter
    def group_attr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_attr", value)

    @property
    @pulumi.getter(name="groupDn")
    def group_dn(self) -> Optional[pulumi.Input[str]]:
        """
        The base DN under which to perform group search.
        """
        return pulumi.get(self, "group_dn")

    @group_dn.setter
    def group_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_dn", value)

    @property
    @pulumi.getter(name="groupFilter")
    def group_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A go template used to construct a LDAP group search filter (optional).
        """
        return pulumi.get(self, "group_filter")

    @group_filter.setter
    def group_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_filter", value)

    @property
    @pulumi.getter(name="insecureTls")
    def insecure_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
        """
        return pulumi.get(self, "insecure_tls")

    @insecure_tls.setter
    def insecure_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_tls", value)

    @property
    @pulumi.getter(name="isPrimaryForScope")
    def is_primary_for_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
        """
        return pulumi.get(self, "is_primary_for_scope")

    @is_primary_for_scope.setter
    def is_primary_for_scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary_for_scope", value)

    @property
    @pulumi.getter(name="maximumPageSize")
    def maximum_page_size(self) -> Optional[pulumi.Input[int]]:
        """
        MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
        """
        return pulumi.get(self, "maximum_page_size")

    @maximum_page_size.setter
    def maximum_page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_page_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The auth method name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="startTls")
    def start_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Issue StartTLS command after connecting (optional).
        """
        return pulumi.get(self, "start_tls")

    @start_tls.setter
    def start_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start_tls", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of auth method; hardcoded.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="upnDomain")
    def upn_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
        """
        return pulumi.get(self, "upn_domain")

    @upn_domain.setter
    def upn_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upn_domain", value)

    @property
    @pulumi.getter
    def urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
        """
        return pulumi.get(self, "urls")

    @urls.setter
    def urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "urls", value)

    @property
    @pulumi.getter(name="useTokenGroups")
    def use_token_groups(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
        """
        return pulumi.get(self, "use_token_groups")

    @use_token_groups.setter
    def use_token_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_token_groups", value)

    @property
    @pulumi.getter(name="userAttr")
    def user_attr(self) -> Optional[pulumi.Input[str]]:
        """
        The attribute on user entry matching the username passed when authenticating (optional).
        """
        return pulumi.get(self, "user_attr")

    @user_attr.setter
    def user_attr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_attr", value)

    @property
    @pulumi.getter(name="userDn")
    def user_dn(self) -> Optional[pulumi.Input[str]]:
        """
        The base DN under which to perform user search (optional).
        """
        return pulumi.get(self, "user_dn")

    @user_dn.setter
    def user_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_dn", value)

    @property
    @pulumi.getter(name="userFilter")
    def user_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A go template used to construct a LDAP user search filter (optional).
        """
        return pulumi.get(self, "user_filter")

    @user_filter.setter
    def user_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_filter", value)


@pulumi.input_type
class _AuthMethodLdapState:
    def __init__(__self__, *,
                 account_attribute_maps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 anon_group_search: Optional[pulumi.Input[bool]] = None,
                 bind_dn: Optional[pulumi.Input[str]] = None,
                 bind_password: Optional[pulumi.Input[str]] = None,
                 bind_password_hmac: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_certificate_key: Optional[pulumi.Input[str]] = None,
                 client_certificate_key_hmac: Optional[pulumi.Input[str]] = None,
                 dereference_aliases: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discover_dn: Optional[pulumi.Input[bool]] = None,
                 enable_groups: Optional[pulumi.Input[bool]] = None,
                 group_attr: Optional[pulumi.Input[str]] = None,
                 group_dn: Optional[pulumi.Input[str]] = None,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 insecure_tls: Optional[pulumi.Input[bool]] = None,
                 is_primary_for_scope: Optional[pulumi.Input[bool]] = None,
                 maximum_page_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 start_tls: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 upn_domain: Optional[pulumi.Input[str]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_token_groups: Optional[pulumi.Input[bool]] = None,
                 user_attr: Optional[pulumi.Input[str]] = None,
                 user_dn: Optional[pulumi.Input[str]] = None,
                 user_filter: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AuthMethodLdap resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_attribute_maps: Account attribute maps fullname and email.
        :param pulumi.Input[bool] anon_group_search: Use anon bind when performing LDAP group searches (optional).
        :param pulumi.Input[str] bind_dn: The distinguished name of entry to bind when performing user and group searches (optional).
        :param pulumi.Input[str] bind_password: The password to use along with bind-dn performing user and group searches (optional).
        :param pulumi.Input[str] bind_password_hmac: The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificates: PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
        :param pulumi.Input[str] client_certificate: PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
        :param pulumi.Input[str] client_certificate_key: PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
        :param pulumi.Input[str] client_certificate_key_hmac: The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[str] dereference_aliases: Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
        :param pulumi.Input[str] description: The auth method description.
        :param pulumi.Input[bool] discover_dn: Use anon bind to discover the bind DN of a user (optional).
        :param pulumi.Input[bool] enable_groups: Find the authenticated user's groups during authentication (optional).
        :param pulumi.Input[str] group_attr: The attribute that enumerates a user's group membership from entries returned by a group search (optional).
        :param pulumi.Input[str] group_dn: The base DN under which to perform group search.
        :param pulumi.Input[str] group_filter: A go template used to construct a LDAP group search filter (optional).
        :param pulumi.Input[bool] insecure_tls: Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
        :param pulumi.Input[bool] is_primary_for_scope: When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
        :param pulumi.Input[int] maximum_page_size: MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
        :param pulumi.Input[str] name: The auth method name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[bool] start_tls: Issue StartTLS command after connecting (optional).
        :param pulumi.Input[str] state: Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
        :param pulumi.Input[str] type: The type of auth method; hardcoded.
        :param pulumi.Input[str] upn_domain: The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] urls: The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
        :param pulumi.Input[bool] use_token_groups: Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
        :param pulumi.Input[str] user_attr: The attribute on user entry matching the username passed when authenticating (optional).
        :param pulumi.Input[str] user_dn: The base DN under which to perform user search (optional).
        :param pulumi.Input[str] user_filter: A go template used to construct a LDAP user search filter (optional).
        """
        if account_attribute_maps is not None:
            pulumi.set(__self__, "account_attribute_maps", account_attribute_maps)
        if anon_group_search is not None:
            pulumi.set(__self__, "anon_group_search", anon_group_search)
        if bind_dn is not None:
            pulumi.set(__self__, "bind_dn", bind_dn)
        if bind_password is not None:
            pulumi.set(__self__, "bind_password", bind_password)
        if bind_password_hmac is not None:
            pulumi.set(__self__, "bind_password_hmac", bind_password_hmac)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_certificate_key is not None:
            pulumi.set(__self__, "client_certificate_key", client_certificate_key)
        if client_certificate_key_hmac is not None:
            pulumi.set(__self__, "client_certificate_key_hmac", client_certificate_key_hmac)
        if dereference_aliases is not None:
            pulumi.set(__self__, "dereference_aliases", dereference_aliases)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if discover_dn is not None:
            pulumi.set(__self__, "discover_dn", discover_dn)
        if enable_groups is not None:
            pulumi.set(__self__, "enable_groups", enable_groups)
        if group_attr is not None:
            pulumi.set(__self__, "group_attr", group_attr)
        if group_dn is not None:
            pulumi.set(__self__, "group_dn", group_dn)
        if group_filter is not None:
            pulumi.set(__self__, "group_filter", group_filter)
        if insecure_tls is not None:
            pulumi.set(__self__, "insecure_tls", insecure_tls)
        if is_primary_for_scope is not None:
            pulumi.set(__self__, "is_primary_for_scope", is_primary_for_scope)
        if maximum_page_size is not None:
            pulumi.set(__self__, "maximum_page_size", maximum_page_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope_id is not None:
            pulumi.set(__self__, "scope_id", scope_id)
        if start_tls is not None:
            pulumi.set(__self__, "start_tls", start_tls)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if upn_domain is not None:
            pulumi.set(__self__, "upn_domain", upn_domain)
        if urls is not None:
            pulumi.set(__self__, "urls", urls)
        if use_token_groups is not None:
            pulumi.set(__self__, "use_token_groups", use_token_groups)
        if user_attr is not None:
            pulumi.set(__self__, "user_attr", user_attr)
        if user_dn is not None:
            pulumi.set(__self__, "user_dn", user_dn)
        if user_filter is not None:
            pulumi.set(__self__, "user_filter", user_filter)

    @property
    @pulumi.getter(name="accountAttributeMaps")
    def account_attribute_maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Account attribute maps fullname and email.
        """
        return pulumi.get(self, "account_attribute_maps")

    @account_attribute_maps.setter
    def account_attribute_maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_attribute_maps", value)

    @property
    @pulumi.getter(name="anonGroupSearch")
    def anon_group_search(self) -> Optional[pulumi.Input[bool]]:
        """
        Use anon bind when performing LDAP group searches (optional).
        """
        return pulumi.get(self, "anon_group_search")

    @anon_group_search.setter
    def anon_group_search(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "anon_group_search", value)

    @property
    @pulumi.getter(name="bindDn")
    def bind_dn(self) -> Optional[pulumi.Input[str]]:
        """
        The distinguished name of entry to bind when performing user and group searches (optional).
        """
        return pulumi.get(self, "bind_dn")

    @bind_dn.setter
    def bind_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_dn", value)

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password to use along with bind-dn performing user and group searches (optional).
        """
        return pulumi.get(self, "bind_password")

    @bind_password.setter
    def bind_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_password", value)

    @property
    @pulumi.getter(name="bindPasswordHmac")
    def bind_password_hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
        """
        return pulumi.get(self, "bind_password_hmac")

    @bind_password_hmac.setter
    def bind_password_hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_password_hmac", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
        """
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientCertificateKey")
    def client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
        """
        return pulumi.get(self, "client_certificate_key")

    @client_certificate_key.setter
    def client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_key", value)

    @property
    @pulumi.getter(name="clientCertificateKeyHmac")
    def client_certificate_key_hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
        """
        return pulumi.get(self, "client_certificate_key_hmac")

    @client_certificate_key_hmac.setter
    def client_certificate_key_hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_key_hmac", value)

    @property
    @pulumi.getter(name="dereferenceAliases")
    def dereference_aliases(self) -> Optional[pulumi.Input[str]]:
        """
        Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
        """
        return pulumi.get(self, "dereference_aliases")

    @dereference_aliases.setter
    def dereference_aliases(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dereference_aliases", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The auth method description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discoverDn")
    def discover_dn(self) -> Optional[pulumi.Input[bool]]:
        """
        Use anon bind to discover the bind DN of a user (optional).
        """
        return pulumi.get(self, "discover_dn")

    @discover_dn.setter
    def discover_dn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "discover_dn", value)

    @property
    @pulumi.getter(name="enableGroups")
    def enable_groups(self) -> Optional[pulumi.Input[bool]]:
        """
        Find the authenticated user's groups during authentication (optional).
        """
        return pulumi.get(self, "enable_groups")

    @enable_groups.setter
    def enable_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_groups", value)

    @property
    @pulumi.getter(name="groupAttr")
    def group_attr(self) -> Optional[pulumi.Input[str]]:
        """
        The attribute that enumerates a user's group membership from entries returned by a group search (optional).
        """
        return pulumi.get(self, "group_attr")

    @group_attr.setter
    def group_attr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_attr", value)

    @property
    @pulumi.getter(name="groupDn")
    def group_dn(self) -> Optional[pulumi.Input[str]]:
        """
        The base DN under which to perform group search.
        """
        return pulumi.get(self, "group_dn")

    @group_dn.setter
    def group_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_dn", value)

    @property
    @pulumi.getter(name="groupFilter")
    def group_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A go template used to construct a LDAP group search filter (optional).
        """
        return pulumi.get(self, "group_filter")

    @group_filter.setter
    def group_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_filter", value)

    @property
    @pulumi.getter(name="insecureTls")
    def insecure_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
        """
        return pulumi.get(self, "insecure_tls")

    @insecure_tls.setter
    def insecure_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_tls", value)

    @property
    @pulumi.getter(name="isPrimaryForScope")
    def is_primary_for_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
        """
        return pulumi.get(self, "is_primary_for_scope")

    @is_primary_for_scope.setter
    def is_primary_for_scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary_for_scope", value)

    @property
    @pulumi.getter(name="maximumPageSize")
    def maximum_page_size(self) -> Optional[pulumi.Input[int]]:
        """
        MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
        """
        return pulumi.get(self, "maximum_page_size")

    @maximum_page_size.setter
    def maximum_page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_page_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The auth method name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope ID.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter(name="startTls")
    def start_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Issue StartTLS command after connecting (optional).
        """
        return pulumi.get(self, "start_tls")

    @start_tls.setter
    def start_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start_tls", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of auth method; hardcoded.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="upnDomain")
    def upn_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
        """
        return pulumi.get(self, "upn_domain")

    @upn_domain.setter
    def upn_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upn_domain", value)

    @property
    @pulumi.getter
    def urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
        """
        return pulumi.get(self, "urls")

    @urls.setter
    def urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "urls", value)

    @property
    @pulumi.getter(name="useTokenGroups")
    def use_token_groups(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
        """
        return pulumi.get(self, "use_token_groups")

    @use_token_groups.setter
    def use_token_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_token_groups", value)

    @property
    @pulumi.getter(name="userAttr")
    def user_attr(self) -> Optional[pulumi.Input[str]]:
        """
        The attribute on user entry matching the username passed when authenticating (optional).
        """
        return pulumi.get(self, "user_attr")

    @user_attr.setter
    def user_attr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_attr", value)

    @property
    @pulumi.getter(name="userDn")
    def user_dn(self) -> Optional[pulumi.Input[str]]:
        """
        The base DN under which to perform user search (optional).
        """
        return pulumi.get(self, "user_dn")

    @user_dn.setter
    def user_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_dn", value)

    @property
    @pulumi.getter(name="userFilter")
    def user_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A go template used to construct a LDAP user search filter (optional).
        """
        return pulumi.get(self, "user_filter")

    @user_filter.setter
    def user_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_filter", value)


class AuthMethodLdap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_attribute_maps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 anon_group_search: Optional[pulumi.Input[bool]] = None,
                 bind_dn: Optional[pulumi.Input[str]] = None,
                 bind_password: Optional[pulumi.Input[str]] = None,
                 bind_password_hmac: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_certificate_key: Optional[pulumi.Input[str]] = None,
                 client_certificate_key_hmac: Optional[pulumi.Input[str]] = None,
                 dereference_aliases: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discover_dn: Optional[pulumi.Input[bool]] = None,
                 enable_groups: Optional[pulumi.Input[bool]] = None,
                 group_attr: Optional[pulumi.Input[str]] = None,
                 group_dn: Optional[pulumi.Input[str]] = None,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 insecure_tls: Optional[pulumi.Input[bool]] = None,
                 is_primary_for_scope: Optional[pulumi.Input[bool]] = None,
                 maximum_page_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 start_tls: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 upn_domain: Optional[pulumi.Input[str]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_token_groups: Optional[pulumi.Input[bool]] = None,
                 user_attr: Optional[pulumi.Input[str]] = None,
                 user_dn: Optional[pulumi.Input[str]] = None,
                 user_filter: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The LDAP auth method resource allows you to configure a Boundary auth_method_ldap.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_boundary as boundary

        org = boundary.Scope("org",
            name="organization_one",
            description="My first scope!",
            scope_id="global",
            auto_create_admin_role=True,
            auto_create_default_role=True)
        forumsys_ldap = boundary.AuthMethodLdap("forumsys_ldap",
            name="forumsys public LDAP",
            scope_id="global",
            urls=["ldap://ldap.forumsys.com"],
            user_dn="dc=example,dc=com",
            user_attr="uid",
            group_dn="dc=example,dc=com",
            bind_dn="cn=read-only-admin,dc=example,dc=com",
            bind_password="password",
            state="active-public",
            enable_groups=True,
            discover_dn=True)
        ```

        ## Import

        ```sh
        $ pulumi import boundary:index/authMethodLdap:AuthMethodLdap foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_attribute_maps: Account attribute maps fullname and email.
        :param pulumi.Input[bool] anon_group_search: Use anon bind when performing LDAP group searches (optional).
        :param pulumi.Input[str] bind_dn: The distinguished name of entry to bind when performing user and group searches (optional).
        :param pulumi.Input[str] bind_password: The password to use along with bind-dn performing user and group searches (optional).
        :param pulumi.Input[str] bind_password_hmac: The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificates: PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
        :param pulumi.Input[str] client_certificate: PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
        :param pulumi.Input[str] client_certificate_key: PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
        :param pulumi.Input[str] client_certificate_key_hmac: The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[str] dereference_aliases: Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
        :param pulumi.Input[str] description: The auth method description.
        :param pulumi.Input[bool] discover_dn: Use anon bind to discover the bind DN of a user (optional).
        :param pulumi.Input[bool] enable_groups: Find the authenticated user's groups during authentication (optional).
        :param pulumi.Input[str] group_attr: The attribute that enumerates a user's group membership from entries returned by a group search (optional).
        :param pulumi.Input[str] group_dn: The base DN under which to perform group search.
        :param pulumi.Input[str] group_filter: A go template used to construct a LDAP group search filter (optional).
        :param pulumi.Input[bool] insecure_tls: Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
        :param pulumi.Input[bool] is_primary_for_scope: When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
        :param pulumi.Input[int] maximum_page_size: MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
        :param pulumi.Input[str] name: The auth method name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[bool] start_tls: Issue StartTLS command after connecting (optional).
        :param pulumi.Input[str] state: Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
        :param pulumi.Input[str] type: The type of auth method; hardcoded.
        :param pulumi.Input[str] upn_domain: The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] urls: The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
        :param pulumi.Input[bool] use_token_groups: Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
        :param pulumi.Input[str] user_attr: The attribute on user entry matching the username passed when authenticating (optional).
        :param pulumi.Input[str] user_dn: The base DN under which to perform user search (optional).
        :param pulumi.Input[str] user_filter: A go template used to construct a LDAP user search filter (optional).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuthMethodLdapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The LDAP auth method resource allows you to configure a Boundary auth_method_ldap.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_boundary as boundary

        org = boundary.Scope("org",
            name="organization_one",
            description="My first scope!",
            scope_id="global",
            auto_create_admin_role=True,
            auto_create_default_role=True)
        forumsys_ldap = boundary.AuthMethodLdap("forumsys_ldap",
            name="forumsys public LDAP",
            scope_id="global",
            urls=["ldap://ldap.forumsys.com"],
            user_dn="dc=example,dc=com",
            user_attr="uid",
            group_dn="dc=example,dc=com",
            bind_dn="cn=read-only-admin,dc=example,dc=com",
            bind_password="password",
            state="active-public",
            enable_groups=True,
            discover_dn=True)
        ```

        ## Import

        ```sh
        $ pulumi import boundary:index/authMethodLdap:AuthMethodLdap foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param AuthMethodLdapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthMethodLdapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_attribute_maps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 anon_group_search: Optional[pulumi.Input[bool]] = None,
                 bind_dn: Optional[pulumi.Input[str]] = None,
                 bind_password: Optional[pulumi.Input[str]] = None,
                 bind_password_hmac: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_certificate_key: Optional[pulumi.Input[str]] = None,
                 client_certificate_key_hmac: Optional[pulumi.Input[str]] = None,
                 dereference_aliases: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discover_dn: Optional[pulumi.Input[bool]] = None,
                 enable_groups: Optional[pulumi.Input[bool]] = None,
                 group_attr: Optional[pulumi.Input[str]] = None,
                 group_dn: Optional[pulumi.Input[str]] = None,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 insecure_tls: Optional[pulumi.Input[bool]] = None,
                 is_primary_for_scope: Optional[pulumi.Input[bool]] = None,
                 maximum_page_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 start_tls: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 upn_domain: Optional[pulumi.Input[str]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_token_groups: Optional[pulumi.Input[bool]] = None,
                 user_attr: Optional[pulumi.Input[str]] = None,
                 user_dn: Optional[pulumi.Input[str]] = None,
                 user_filter: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthMethodLdapArgs.__new__(AuthMethodLdapArgs)

            __props__.__dict__["account_attribute_maps"] = account_attribute_maps
            __props__.__dict__["anon_group_search"] = anon_group_search
            __props__.__dict__["bind_dn"] = bind_dn
            __props__.__dict__["bind_password"] = bind_password
            __props__.__dict__["bind_password_hmac"] = bind_password_hmac
            __props__.__dict__["certificates"] = certificates
            __props__.__dict__["client_certificate"] = client_certificate
            __props__.__dict__["client_certificate_key"] = client_certificate_key
            __props__.__dict__["client_certificate_key_hmac"] = client_certificate_key_hmac
            __props__.__dict__["dereference_aliases"] = dereference_aliases
            __props__.__dict__["description"] = description
            __props__.__dict__["discover_dn"] = discover_dn
            __props__.__dict__["enable_groups"] = enable_groups
            __props__.__dict__["group_attr"] = group_attr
            __props__.__dict__["group_dn"] = group_dn
            __props__.__dict__["group_filter"] = group_filter
            __props__.__dict__["insecure_tls"] = insecure_tls
            __props__.__dict__["is_primary_for_scope"] = is_primary_for_scope
            __props__.__dict__["maximum_page_size"] = maximum_page_size
            __props__.__dict__["name"] = name
            if scope_id is None and not opts.urn:
                raise TypeError("Missing required property 'scope_id'")
            __props__.__dict__["scope_id"] = scope_id
            __props__.__dict__["start_tls"] = start_tls
            __props__.__dict__["state"] = state
            __props__.__dict__["type"] = type
            __props__.__dict__["upn_domain"] = upn_domain
            __props__.__dict__["urls"] = urls
            __props__.__dict__["use_token_groups"] = use_token_groups
            __props__.__dict__["user_attr"] = user_attr
            __props__.__dict__["user_dn"] = user_dn
            __props__.__dict__["user_filter"] = user_filter
        super(AuthMethodLdap, __self__).__init__(
            'boundary:index/authMethodLdap:AuthMethodLdap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_attribute_maps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            anon_group_search: Optional[pulumi.Input[bool]] = None,
            bind_dn: Optional[pulumi.Input[str]] = None,
            bind_password: Optional[pulumi.Input[str]] = None,
            bind_password_hmac: Optional[pulumi.Input[str]] = None,
            certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            client_certificate: Optional[pulumi.Input[str]] = None,
            client_certificate_key: Optional[pulumi.Input[str]] = None,
            client_certificate_key_hmac: Optional[pulumi.Input[str]] = None,
            dereference_aliases: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            discover_dn: Optional[pulumi.Input[bool]] = None,
            enable_groups: Optional[pulumi.Input[bool]] = None,
            group_attr: Optional[pulumi.Input[str]] = None,
            group_dn: Optional[pulumi.Input[str]] = None,
            group_filter: Optional[pulumi.Input[str]] = None,
            insecure_tls: Optional[pulumi.Input[bool]] = None,
            is_primary_for_scope: Optional[pulumi.Input[bool]] = None,
            maximum_page_size: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            scope_id: Optional[pulumi.Input[str]] = None,
            start_tls: Optional[pulumi.Input[bool]] = None,
            state: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            upn_domain: Optional[pulumi.Input[str]] = None,
            urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            use_token_groups: Optional[pulumi.Input[bool]] = None,
            user_attr: Optional[pulumi.Input[str]] = None,
            user_dn: Optional[pulumi.Input[str]] = None,
            user_filter: Optional[pulumi.Input[str]] = None) -> 'AuthMethodLdap':
        """
        Get an existing AuthMethodLdap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_attribute_maps: Account attribute maps fullname and email.
        :param pulumi.Input[bool] anon_group_search: Use anon bind when performing LDAP group searches (optional).
        :param pulumi.Input[str] bind_dn: The distinguished name of entry to bind when performing user and group searches (optional).
        :param pulumi.Input[str] bind_password: The password to use along with bind-dn performing user and group searches (optional).
        :param pulumi.Input[str] bind_password_hmac: The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificates: PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
        :param pulumi.Input[str] client_certificate: PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
        :param pulumi.Input[str] client_certificate_key: PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
        :param pulumi.Input[str] client_certificate_key_hmac: The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[str] dereference_aliases: Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
        :param pulumi.Input[str] description: The auth method description.
        :param pulumi.Input[bool] discover_dn: Use anon bind to discover the bind DN of a user (optional).
        :param pulumi.Input[bool] enable_groups: Find the authenticated user's groups during authentication (optional).
        :param pulumi.Input[str] group_attr: The attribute that enumerates a user's group membership from entries returned by a group search (optional).
        :param pulumi.Input[str] group_dn: The base DN under which to perform group search.
        :param pulumi.Input[str] group_filter: A go template used to construct a LDAP group search filter (optional).
        :param pulumi.Input[bool] insecure_tls: Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
        :param pulumi.Input[bool] is_primary_for_scope: When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
        :param pulumi.Input[int] maximum_page_size: MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
        :param pulumi.Input[str] name: The auth method name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[bool] start_tls: Issue StartTLS command after connecting (optional).
        :param pulumi.Input[str] state: Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
        :param pulumi.Input[str] type: The type of auth method; hardcoded.
        :param pulumi.Input[str] upn_domain: The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] urls: The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
        :param pulumi.Input[bool] use_token_groups: Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
        :param pulumi.Input[str] user_attr: The attribute on user entry matching the username passed when authenticating (optional).
        :param pulumi.Input[str] user_dn: The base DN under which to perform user search (optional).
        :param pulumi.Input[str] user_filter: A go template used to construct a LDAP user search filter (optional).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthMethodLdapState.__new__(_AuthMethodLdapState)

        __props__.__dict__["account_attribute_maps"] = account_attribute_maps
        __props__.__dict__["anon_group_search"] = anon_group_search
        __props__.__dict__["bind_dn"] = bind_dn
        __props__.__dict__["bind_password"] = bind_password
        __props__.__dict__["bind_password_hmac"] = bind_password_hmac
        __props__.__dict__["certificates"] = certificates
        __props__.__dict__["client_certificate"] = client_certificate
        __props__.__dict__["client_certificate_key"] = client_certificate_key
        __props__.__dict__["client_certificate_key_hmac"] = client_certificate_key_hmac
        __props__.__dict__["dereference_aliases"] = dereference_aliases
        __props__.__dict__["description"] = description
        __props__.__dict__["discover_dn"] = discover_dn
        __props__.__dict__["enable_groups"] = enable_groups
        __props__.__dict__["group_attr"] = group_attr
        __props__.__dict__["group_dn"] = group_dn
        __props__.__dict__["group_filter"] = group_filter
        __props__.__dict__["insecure_tls"] = insecure_tls
        __props__.__dict__["is_primary_for_scope"] = is_primary_for_scope
        __props__.__dict__["maximum_page_size"] = maximum_page_size
        __props__.__dict__["name"] = name
        __props__.__dict__["scope_id"] = scope_id
        __props__.__dict__["start_tls"] = start_tls
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        __props__.__dict__["upn_domain"] = upn_domain
        __props__.__dict__["urls"] = urls
        __props__.__dict__["use_token_groups"] = use_token_groups
        __props__.__dict__["user_attr"] = user_attr
        __props__.__dict__["user_dn"] = user_dn
        __props__.__dict__["user_filter"] = user_filter
        return AuthMethodLdap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountAttributeMaps")
    def account_attribute_maps(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Account attribute maps fullname and email.
        """
        return pulumi.get(self, "account_attribute_maps")

    @property
    @pulumi.getter(name="anonGroupSearch")
    def anon_group_search(self) -> pulumi.Output[Optional[bool]]:
        """
        Use anon bind when performing LDAP group searches (optional).
        """
        return pulumi.get(self, "anon_group_search")

    @property
    @pulumi.getter(name="bindDn")
    def bind_dn(self) -> pulumi.Output[Optional[str]]:
        """
        The distinguished name of entry to bind when performing user and group searches (optional).
        """
        return pulumi.get(self, "bind_dn")

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> pulumi.Output[Optional[str]]:
        """
        The password to use along with bind-dn performing user and group searches (optional).
        """
        return pulumi.get(self, "bind_password")

    @property
    @pulumi.getter(name="bindPasswordHmac")
    def bind_password_hmac(self) -> pulumi.Output[str]:
        """
        The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of the value.
        """
        return pulumi.get(self, "bind_password_hmac")

    @property
    @pulumi.getter
    def certificates(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP server(optional).  This may be specified multiple times
        """
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> pulumi.Output[Optional[str]]:
        """
        PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP server(optional).
        """
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientCertificateKey")
    def client_certificate_key(self) -> pulumi.Output[Optional[str]]:
        """
        PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
        """
        return pulumi.get(self, "client_certificate_key")

    @property
    @pulumi.getter(name="clientCertificateKeyHmac")
    def client_certificate_key_hmac(self) -> pulumi.Output[str]:
        """
        The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial setting of the value.
        """
        return pulumi.get(self, "client_certificate_key_hmac")

    @property
    @pulumi.getter(name="dereferenceAliases")
    def dereference_aliases(self) -> pulumi.Output[str]:
        """
        Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching, DerefFindingBaseObj, and DerefAlways (optional).
        """
        return pulumi.get(self, "dereference_aliases")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The auth method description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="discoverDn")
    def discover_dn(self) -> pulumi.Output[Optional[bool]]:
        """
        Use anon bind to discover the bind DN of a user (optional).
        """
        return pulumi.get(self, "discover_dn")

    @property
    @pulumi.getter(name="enableGroups")
    def enable_groups(self) -> pulumi.Output[Optional[bool]]:
        """
        Find the authenticated user's groups during authentication (optional).
        """
        return pulumi.get(self, "enable_groups")

    @property
    @pulumi.getter(name="groupAttr")
    def group_attr(self) -> pulumi.Output[Optional[str]]:
        """
        The attribute that enumerates a user's group membership from entries returned by a group search (optional).
        """
        return pulumi.get(self, "group_attr")

    @property
    @pulumi.getter(name="groupDn")
    def group_dn(self) -> pulumi.Output[Optional[str]]:
        """
        The base DN under which to perform group search.
        """
        return pulumi.get(self, "group_dn")

    @property
    @pulumi.getter(name="groupFilter")
    def group_filter(self) -> pulumi.Output[Optional[str]]:
        """
        A go template used to construct a LDAP group search filter (optional).
        """
        return pulumi.get(self, "group_filter")

    @property
    @pulumi.getter(name="insecureTls")
    def insecure_tls(self) -> pulumi.Output[Optional[bool]]:
        """
        Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
        """
        return pulumi.get(self, "insecure_tls")

    @property
    @pulumi.getter(name="isPrimaryForScope")
    def is_primary_for_scope(self) -> pulumi.Output[Optional[bool]]:
        """
        When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an LDAP account.
        """
        return pulumi.get(self, "is_primary_for_scope")

    @property
    @pulumi.getter(name="maximumPageSize")
    def maximum_page_size(self) -> pulumi.Output[Optional[int]]:
        """
        MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups (optional).
        """
        return pulumi.get(self, "maximum_page_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The auth method name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Output[str]:
        """
        The scope ID.
        """
        return pulumi.get(self, "scope_id")

    @property
    @pulumi.getter(name="startTls")
    def start_tls(self) -> pulumi.Output[Optional[bool]]:
        """
        Issue StartTLS command after connecting (optional).
        """
        return pulumi.get(self, "start_tls")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of auth method; hardcoded.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="upnDomain")
    def upn_domain(self) -> pulumi.Output[Optional[str]]:
        """
        The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
        """
        return pulumi.get(self, "upn_domain")

    @property
    @pulumi.getter
    def urls(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The LDAP URLs that specify LDAP servers to connect to (required).  May be specified multiple times.
        """
        return pulumi.get(self, "urls")

    @property
    @pulumi.getter(name="useTokenGroups")
    def use_token_groups(self) -> pulumi.Output[Optional[bool]]:
        """
        Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
        """
        return pulumi.get(self, "use_token_groups")

    @property
    @pulumi.getter(name="userAttr")
    def user_attr(self) -> pulumi.Output[Optional[str]]:
        """
        The attribute on user entry matching the username passed when authenticating (optional).
        """
        return pulumi.get(self, "user_attr")

    @property
    @pulumi.getter(name="userDn")
    def user_dn(self) -> pulumi.Output[Optional[str]]:
        """
        The base DN under which to perform user search (optional).
        """
        return pulumi.get(self, "user_dn")

    @property
    @pulumi.getter(name="userFilter")
    def user_filter(self) -> pulumi.Output[Optional[str]]:
        """
        A go template used to construct a LDAP user search filter (optional).
        """
        return pulumi.get(self, "user_filter")

