# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CredentialJsonArgs', 'CredentialJson']

@pulumi.input_type
class CredentialJsonArgs:
    def __init__(__self__, *,
                 credential_store_id: pulumi.Input[str],
                 object: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CredentialJson resource.
        :param pulumi.Input[str] credential_store_id: The credential store in which to save this json credential.
        :param pulumi.Input[str] object: The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file
        :param pulumi.Input[str] description: The description of this json credential.
        :param pulumi.Input[str] name: The name of this json credential. Defaults to the resource name.
        """
        pulumi.set(__self__, "credential_store_id", credential_store_id)
        pulumi.set(__self__, "object", object)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> pulumi.Input[str]:
        """
        The credential store in which to save this json credential.
        """
        return pulumi.get(self, "credential_store_id")

    @credential_store_id.setter
    def credential_store_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_store_id", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this json credential.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this json credential. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CredentialJsonState:
    def __init__(__self__, *,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None,
                 object_hmac: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CredentialJson resources.
        :param pulumi.Input[str] credential_store_id: The credential store in which to save this json credential.
        :param pulumi.Input[str] description: The description of this json credential.
        :param pulumi.Input[str] name: The name of this json credential. Defaults to the resource name.
        :param pulumi.Input[str] object: The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file
        :param pulumi.Input[str] object_hmac: The object hmac.
        """
        if credential_store_id is not None:
            pulumi.set(__self__, "credential_store_id", credential_store_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_hmac is not None:
            pulumi.set(__self__, "object_hmac", object_hmac)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        The credential store in which to save this json credential.
        """
        return pulumi.get(self, "credential_store_id")

    @credential_store_id.setter
    def credential_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_store_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this json credential.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this json credential. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        """
        The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="objectHmac")
    def object_hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The object hmac.
        """
        return pulumi.get(self, "object_hmac")

    @object_hmac.setter
    def object_hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_hmac", value)


class CredentialJson(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The json credential resource allows you to congiure a credential using a json object.

        ## Import

        ```sh
        $ pulumi import boundary:index/credentialJson:CredentialJson example_json <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] credential_store_id: The credential store in which to save this json credential.
        :param pulumi.Input[str] description: The description of this json credential.
        :param pulumi.Input[str] name: The name of this json credential. Defaults to the resource name.
        :param pulumi.Input[str] object: The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CredentialJsonArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The json credential resource allows you to congiure a credential using a json object.

        ## Import

        ```sh
        $ pulumi import boundary:index/credentialJson:CredentialJson example_json <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param CredentialJsonArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CredentialJsonArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CredentialJsonArgs.__new__(CredentialJsonArgs)

            if credential_store_id is None and not opts.urn:
                raise TypeError("Missing required property 'credential_store_id'")
            __props__.__dict__["credential_store_id"] = credential_store_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if object is None and not opts.urn:
                raise TypeError("Missing required property 'object'")
            __props__.__dict__["object"] = None if object is None else pulumi.Output.secret(object)
            __props__.__dict__["object_hmac"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["object"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CredentialJson, __self__).__init__(
            'boundary:index/credentialJson:CredentialJson',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            credential_store_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            object: Optional[pulumi.Input[str]] = None,
            object_hmac: Optional[pulumi.Input[str]] = None) -> 'CredentialJson':
        """
        Get an existing CredentialJson resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] credential_store_id: The credential store in which to save this json credential.
        :param pulumi.Input[str] description: The description of this json credential.
        :param pulumi.Input[str] name: The name of this json credential. Defaults to the resource name.
        :param pulumi.Input[str] object: The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file
        :param pulumi.Input[str] object_hmac: The object hmac.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CredentialJsonState.__new__(_CredentialJsonState)

        __props__.__dict__["credential_store_id"] = credential_store_id
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["object"] = object
        __props__.__dict__["object_hmac"] = object_hmac
        return CredentialJson(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> pulumi.Output[str]:
        """
        The credential store in which to save this json credential.
        """
        return pulumi.get(self, "credential_store_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of this json credential.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this json credential. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def object(self) -> pulumi.Output[str]:
        """
        The object for the this json credential. Either values encoded with the "jsonencode" function, pre-escaped JSON string, or a file
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectHmac")
    def object_hmac(self) -> pulumi.Output[str]:
        """
        The object hmac.
        """
        return pulumi.get(self, "object_hmac")

