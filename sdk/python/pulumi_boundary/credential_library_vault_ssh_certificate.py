# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CredentialLibraryVaultSshCertificateArgs', 'CredentialLibraryVaultSshCertificate']

@pulumi.input_type
class CredentialLibraryVaultSshCertificateArgs:
    def __init__(__self__, *,
                 credential_store_id: pulumi.Input[str],
                 path: pulumi.Input[str],
                 username: pulumi.Input[str],
                 additional_valid_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 critical_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 key_bits: Optional[pulumi.Input[int]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CredentialLibraryVaultSshCertificate resource.
        :param pulumi.Input[str] credential_store_id: The ID of the credential store that this library belongs to.
        :param pulumi.Input[str] path: The path in Vault to request credentials from.
        :param pulumi.Input[str] username: The username to use with the certificate returned by the library.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_valid_principals: Principals to be signed as "valid_principles" in addition to username.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] critical_options: Specifies a map of the critical options that the certificate should be signed for.
        :param pulumi.Input[str] description: The Vault credential library description.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extensions: Specifies a map of the extensions that the certificate should be signed for.
        :param pulumi.Input[int] key_bits: Specifies the number of bits to use for the generated keys.
        :param pulumi.Input[str] key_id: Specifies the key id a certificate should have.
        :param pulumi.Input[str] key_type: Specifies the desired key type; must be ed25519, ecdsa, or rsa.
        :param pulumi.Input[str] name: The Vault credential library name. Defaults to the resource name.
        :param pulumi.Input[str] ttl: Specifies the requested time to live for a certificate returned from the library.
        """
        pulumi.set(__self__, "credential_store_id", credential_store_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "username", username)
        if additional_valid_principals is not None:
            pulumi.set(__self__, "additional_valid_principals", additional_valid_principals)
        if critical_options is not None:
            pulumi.set(__self__, "critical_options", critical_options)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if key_bits is not None:
            pulumi.set(__self__, "key_bits", key_bits)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> pulumi.Input[str]:
        """
        The ID of the credential store that this library belongs to.
        """
        return pulumi.get(self, "credential_store_id")

    @credential_store_id.setter
    def credential_store_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_store_id", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path in Vault to request credentials from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to use with the certificate returned by the library.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="additionalValidPrincipals")
    def additional_valid_principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Principals to be signed as "valid_principles" in addition to username.
        """
        return pulumi.get(self, "additional_valid_principals")

    @additional_valid_principals.setter
    def additional_valid_principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_valid_principals", value)

    @property
    @pulumi.getter(name="criticalOptions")
    def critical_options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies a map of the critical options that the certificate should be signed for.
        """
        return pulumi.get(self, "critical_options")

    @critical_options.setter
    def critical_options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "critical_options", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential library description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies a map of the extensions that the certificate should be signed for.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="keyBits")
    def key_bits(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of bits to use for the generated keys.
        """
        return pulumi.get(self, "key_bits")

    @key_bits.setter
    def key_bits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_bits", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the key id a certificate should have.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the desired key type; must be ed25519, ecdsa, or rsa.
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential library name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the requested time to live for a certificate returned from the library.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _CredentialLibraryVaultSshCertificateState:
    def __init__(__self__, *,
                 additional_valid_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 critical_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 key_bits: Optional[pulumi.Input[int]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CredentialLibraryVaultSshCertificate resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_valid_principals: Principals to be signed as "valid_principles" in addition to username.
        :param pulumi.Input[str] credential_store_id: The ID of the credential store that this library belongs to.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] critical_options: Specifies a map of the critical options that the certificate should be signed for.
        :param pulumi.Input[str] description: The Vault credential library description.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extensions: Specifies a map of the extensions that the certificate should be signed for.
        :param pulumi.Input[int] key_bits: Specifies the number of bits to use for the generated keys.
        :param pulumi.Input[str] key_id: Specifies the key id a certificate should have.
        :param pulumi.Input[str] key_type: Specifies the desired key type; must be ed25519, ecdsa, or rsa.
        :param pulumi.Input[str] name: The Vault credential library name. Defaults to the resource name.
        :param pulumi.Input[str] path: The path in Vault to request credentials from.
        :param pulumi.Input[str] ttl: Specifies the requested time to live for a certificate returned from the library.
        :param pulumi.Input[str] username: The username to use with the certificate returned by the library.
        """
        if additional_valid_principals is not None:
            pulumi.set(__self__, "additional_valid_principals", additional_valid_principals)
        if credential_store_id is not None:
            pulumi.set(__self__, "credential_store_id", credential_store_id)
        if critical_options is not None:
            pulumi.set(__self__, "critical_options", critical_options)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if key_bits is not None:
            pulumi.set(__self__, "key_bits", key_bits)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="additionalValidPrincipals")
    def additional_valid_principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Principals to be signed as "valid_principles" in addition to username.
        """
        return pulumi.get(self, "additional_valid_principals")

    @additional_valid_principals.setter
    def additional_valid_principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_valid_principals", value)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the credential store that this library belongs to.
        """
        return pulumi.get(self, "credential_store_id")

    @credential_store_id.setter
    def credential_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_store_id", value)

    @property
    @pulumi.getter(name="criticalOptions")
    def critical_options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies a map of the critical options that the certificate should be signed for.
        """
        return pulumi.get(self, "critical_options")

    @critical_options.setter
    def critical_options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "critical_options", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential library description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Specifies a map of the extensions that the certificate should be signed for.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="keyBits")
    def key_bits(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of bits to use for the generated keys.
        """
        return pulumi.get(self, "key_bits")

    @key_bits.setter
    def key_bits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_bits", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the key id a certificate should have.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the desired key type; must be ed25519, ecdsa, or rsa.
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential library name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path in Vault to request credentials from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the requested time to live for a certificate returned from the library.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username to use with the certificate returned by the library.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class CredentialLibraryVaultSshCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_valid_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 critical_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 key_bits: Optional[pulumi.Input[int]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a CredentialLibraryVaultSshCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_valid_principals: Principals to be signed as "valid_principles" in addition to username.
        :param pulumi.Input[str] credential_store_id: The ID of the credential store that this library belongs to.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] critical_options: Specifies a map of the critical options that the certificate should be signed for.
        :param pulumi.Input[str] description: The Vault credential library description.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extensions: Specifies a map of the extensions that the certificate should be signed for.
        :param pulumi.Input[int] key_bits: Specifies the number of bits to use for the generated keys.
        :param pulumi.Input[str] key_id: Specifies the key id a certificate should have.
        :param pulumi.Input[str] key_type: Specifies the desired key type; must be ed25519, ecdsa, or rsa.
        :param pulumi.Input[str] name: The Vault credential library name. Defaults to the resource name.
        :param pulumi.Input[str] path: The path in Vault to request credentials from.
        :param pulumi.Input[str] ttl: Specifies the requested time to live for a certificate returned from the library.
        :param pulumi.Input[str] username: The username to use with the certificate returned by the library.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CredentialLibraryVaultSshCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CredentialLibraryVaultSshCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CredentialLibraryVaultSshCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CredentialLibraryVaultSshCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_valid_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 critical_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 key_bits: Optional[pulumi.Input[int]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CredentialLibraryVaultSshCertificateArgs.__new__(CredentialLibraryVaultSshCertificateArgs)

            __props__.__dict__["additional_valid_principals"] = additional_valid_principals
            if credential_store_id is None and not opts.urn:
                raise TypeError("Missing required property 'credential_store_id'")
            __props__.__dict__["credential_store_id"] = credential_store_id
            __props__.__dict__["critical_options"] = critical_options
            __props__.__dict__["description"] = description
            __props__.__dict__["extensions"] = extensions
            __props__.__dict__["key_bits"] = key_bits
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["key_type"] = key_type
            __props__.__dict__["name"] = name
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            __props__.__dict__["ttl"] = ttl
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
        super(CredentialLibraryVaultSshCertificate, __self__).__init__(
            'boundary:index/credentialLibraryVaultSshCertificate:CredentialLibraryVaultSshCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_valid_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            credential_store_id: Optional[pulumi.Input[str]] = None,
            critical_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            key_bits: Optional[pulumi.Input[int]] = None,
            key_id: Optional[pulumi.Input[str]] = None,
            key_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'CredentialLibraryVaultSshCertificate':
        """
        Get an existing CredentialLibraryVaultSshCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_valid_principals: Principals to be signed as "valid_principles" in addition to username.
        :param pulumi.Input[str] credential_store_id: The ID of the credential store that this library belongs to.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] critical_options: Specifies a map of the critical options that the certificate should be signed for.
        :param pulumi.Input[str] description: The Vault credential library description.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] extensions: Specifies a map of the extensions that the certificate should be signed for.
        :param pulumi.Input[int] key_bits: Specifies the number of bits to use for the generated keys.
        :param pulumi.Input[str] key_id: Specifies the key id a certificate should have.
        :param pulumi.Input[str] key_type: Specifies the desired key type; must be ed25519, ecdsa, or rsa.
        :param pulumi.Input[str] name: The Vault credential library name. Defaults to the resource name.
        :param pulumi.Input[str] path: The path in Vault to request credentials from.
        :param pulumi.Input[str] ttl: Specifies the requested time to live for a certificate returned from the library.
        :param pulumi.Input[str] username: The username to use with the certificate returned by the library.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CredentialLibraryVaultSshCertificateState.__new__(_CredentialLibraryVaultSshCertificateState)

        __props__.__dict__["additional_valid_principals"] = additional_valid_principals
        __props__.__dict__["credential_store_id"] = credential_store_id
        __props__.__dict__["critical_options"] = critical_options
        __props__.__dict__["description"] = description
        __props__.__dict__["extensions"] = extensions
        __props__.__dict__["key_bits"] = key_bits
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["key_type"] = key_type
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["username"] = username
        return CredentialLibraryVaultSshCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalValidPrincipals")
    def additional_valid_principals(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Principals to be signed as "valid_principles" in addition to username.
        """
        return pulumi.get(self, "additional_valid_principals")

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> pulumi.Output[str]:
        """
        The ID of the credential store that this library belongs to.
        """
        return pulumi.get(self, "credential_store_id")

    @property
    @pulumi.getter(name="criticalOptions")
    def critical_options(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies a map of the critical options that the certificate should be signed for.
        """
        return pulumi.get(self, "critical_options")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The Vault credential library description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def extensions(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Specifies a map of the extensions that the certificate should be signed for.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="keyBits")
    def key_bits(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the number of bits to use for the generated keys.
        """
        return pulumi.get(self, "key_bits")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the key id a certificate should have.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the desired key type; must be ed25519, ecdsa, or rsa.
        """
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Vault credential library name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        The path in Vault to request credentials from.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the requested time to live for a certificate returned from the library.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The username to use with the certificate returned by the library.
        """
        return pulumi.get(self, "username")

