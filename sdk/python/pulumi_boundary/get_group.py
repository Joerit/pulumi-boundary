# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetGroupResult',
    'AwaitableGetGroupResult',
    'get_group',
    'get_group_output',
]

@pulumi.output_type
class GetGroupResult:
    """
    A collection of values returned by getGroup.
    """
    def __init__(__self__, description=None, id=None, member_ids=None, name=None, scope_id=None, scopes=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if member_ids and not isinstance(member_ids, list):
            raise TypeError("Expected argument 'member_ids' to be a list")
        pulumi.set(__self__, "member_ids", member_ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if scope_id and not isinstance(scope_id, str):
            raise TypeError("Expected argument 'scope_id' to be a str")
        pulumi.set(__self__, "scope_id", scope_id)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the retrieved group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the retrieved group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memberIds")
    def member_ids(self) -> Sequence[str]:
        """
        Resource IDs for group members, these are most likely boundary users.
        """
        return pulumi.get(self, "member_ids")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the group to retrieve.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[str]:
        """
        The scope ID in which the resource is created. Defaults `global` if unset.
        """
        return pulumi.get(self, "scope_id")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetGroupScopeResult']:
        return pulumi.get(self, "scopes")


class AwaitableGetGroupResult(GetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupResult(
            description=self.description,
            id=self.id,
            member_ids=self.member_ids,
            name=self.name,
            scope_id=self.scope_id,
            scopes=self.scopes)


def get_group(name: Optional[str] = None,
              scope_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupResult:
    """
    The Group data source allows you to find a Boundary group.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_boundary as boundary

    # Retrieve a user from the global scope
    global_group = boundary.get_group(name="admin")
    # User from an org scope
    org = boundary.get_scope(name="org",
        scope_id="global")
    org_group = boundary.get_group(name="username",
        scope_id=org.id)
    ```


    :param str name: The name of the group to retrieve.
    :param str scope_id: The scope ID in which the resource is created. Defaults `global` if unset.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scopeId'] = scope_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('boundary:index/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult).value

    return AwaitableGetGroupResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        member_ids=pulumi.get(__ret__, 'member_ids'),
        name=pulumi.get(__ret__, 'name'),
        scope_id=pulumi.get(__ret__, 'scope_id'),
        scopes=pulumi.get(__ret__, 'scopes'))
def get_group_output(name: Optional[pulumi.Input[str]] = None,
                     scope_id: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupResult]:
    """
    The Group data source allows you to find a Boundary group.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_boundary as boundary

    # Retrieve a user from the global scope
    global_group = boundary.get_group(name="admin")
    # User from an org scope
    org = boundary.get_scope(name="org",
        scope_id="global")
    org_group = boundary.get_group(name="username",
        scope_id=org.id)
    ```


    :param str name: The name of the group to retrieve.
    :param str scope_id: The scope ID in which the resource is created. Defaults `global` if unset.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scopeId'] = scope_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('boundary:index/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult)
    return __ret__.apply(lambda __response__: GetGroupResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        member_ids=pulumi.get(__response__, 'member_ids'),
        name=pulumi.get(__response__, 'name'),
        scope_id=pulumi.get(__response__, 'scope_id'),
        scopes=pulumi.get(__response__, 'scopes')))
