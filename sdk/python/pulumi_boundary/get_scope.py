# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetScopeResult',
    'AwaitableGetScopeResult',
    'get_scope',
    'get_scope_output',
]

@pulumi.output_type
class GetScopeResult:
    """
    A collection of values returned by getScope.
    """
    def __init__(__self__, description=None, id=None, name=None, scope_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if scope_id and not isinstance(scope_id, str):
            raise TypeError("Expected argument 'scope_id' to be a str")
        pulumi.set(__self__, "scope_id", scope_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the retrieved scope.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the retrieved scope.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the scope to retrieve.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> str:
        """
        The parent scope ID that will be queried for the scope.
        """
        return pulumi.get(self, "scope_id")


class AwaitableGetScopeResult(GetScopeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScopeResult(
            description=self.description,
            id=self.id,
            name=self.name,
            scope_id=self.scope_id)


def get_scope(name: Optional[str] = None,
              scope_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScopeResult:
    """
    The scope data source allows you to discover an existing Boundary scope by name.
    Please note that the Global scope will always have an id of "global", and does not need to be discovered with this data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_boundary as boundary

    # Retrieve the ID of a Boundary project
    org = boundary.get_scope(name="SecOps",
        scope_id="global")
    project = boundary.get_scope(name="2111",
        scope_id=id)
    ```


    :param str name: The name of the scope to retrieve.
    :param str scope_id: The parent scope ID that will be queried for the scope.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scopeId'] = scope_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('boundary:index/getScope:getScope', __args__, opts=opts, typ=GetScopeResult).value

    return AwaitableGetScopeResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        scope_id=pulumi.get(__ret__, 'scope_id'))
def get_scope_output(name: Optional[pulumi.Input[str]] = None,
                     scope_id: Optional[pulumi.Input[str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetScopeResult]:
    """
    The scope data source allows you to discover an existing Boundary scope by name.
    Please note that the Global scope will always have an id of "global", and does not need to be discovered with this data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_boundary as boundary

    # Retrieve the ID of a Boundary project
    org = boundary.get_scope(name="SecOps",
        scope_id="global")
    project = boundary.get_scope(name="2111",
        scope_id=id)
    ```


    :param str name: The name of the scope to retrieve.
    :param str scope_id: The parent scope ID that will be queried for the scope.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scopeId'] = scope_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('boundary:index/getScope:getScope', __args__, opts=opts, typ=GetScopeResult)
    return __ret__.apply(lambda __response__: GetScopeResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        scope_id=pulumi.get(__response__, 'scope_id')))
