# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, account_ids=None, authorized_actions=None, description=None, id=None, login_name=None, name=None, primary_account_id=None, scope_id=None, scopes=None):
        if account_ids and not isinstance(account_ids, list):
            raise TypeError("Expected argument 'account_ids' to be a list")
        pulumi.set(__self__, "account_ids", account_ids)
        if authorized_actions and not isinstance(authorized_actions, list):
            raise TypeError("Expected argument 'authorized_actions' to be a list")
        pulumi.set(__self__, "authorized_actions", authorized_actions)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if login_name and not isinstance(login_name, str):
            raise TypeError("Expected argument 'login_name' to be a str")
        pulumi.set(__self__, "login_name", login_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary_account_id and not isinstance(primary_account_id, str):
            raise TypeError("Expected argument 'primary_account_id' to be a str")
        pulumi.set(__self__, "primary_account_id", primary_account_id)
        if scope_id and not isinstance(scope_id, str):
            raise TypeError("Expected argument 'scope_id' to be a str")
        pulumi.set(__self__, "scope_id", scope_id)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Sequence[str]:
        """
        Account ID's to associate with this user resource.
        """
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="authorizedActions")
    def authorized_actions(self) -> Sequence[str]:
        """
        A list of actions that the worker is entitled to perform.
        """
        return pulumi.get(self, "authorized_actions")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The user description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the user.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> str:
        """
        Login name for user.
        """
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The username to search for.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryAccountId")
    def primary_account_id(self) -> str:
        """
        Primary account ID.
        """
        return pulumi.get(self, "primary_account_id")

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[str]:
        """
        The scope ID in which the resource is created. Defaults `global` if unset.
        """
        return pulumi.get(self, "scope_id")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetUserScopeResult']:
        return pulumi.get(self, "scopes")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            account_ids=self.account_ids,
            authorized_actions=self.authorized_actions,
            description=self.description,
            id=self.id,
            login_name=self.login_name,
            name=self.name,
            primary_account_id=self.primary_account_id,
            scope_id=self.scope_id,
            scopes=self.scopes)


def get_user(name: Optional[str] = None,
             scope_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    The user data source allows you to find a Boundary user.


    :param str name: The username to search for.
    :param str scope_id: The scope ID in which the resource is created. Defaults `global` if unset.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scopeId'] = scope_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('boundary:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        account_ids=pulumi.get(__ret__, 'account_ids'),
        authorized_actions=pulumi.get(__ret__, 'authorized_actions'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        login_name=pulumi.get(__ret__, 'login_name'),
        name=pulumi.get(__ret__, 'name'),
        primary_account_id=pulumi.get(__ret__, 'primary_account_id'),
        scope_id=pulumi.get(__ret__, 'scope_id'),
        scopes=pulumi.get(__ret__, 'scopes'))
def get_user_output(name: Optional[pulumi.Input[str]] = None,
                    scope_id: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserResult]:
    """
    The user data source allows you to find a Boundary user.


    :param str name: The username to search for.
    :param str scope_id: The scope ID in which the resource is created. Defaults `global` if unset.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scopeId'] = scope_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('boundary:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult)
    return __ret__.apply(lambda __response__: GetUserResult(
        account_ids=pulumi.get(__response__, 'account_ids'),
        authorized_actions=pulumi.get(__response__, 'authorized_actions'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        login_name=pulumi.get(__response__, 'login_name'),
        name=pulumi.get(__response__, 'name'),
        primary_account_id=pulumi.get(__response__, 'primary_account_id'),
        scope_id=pulumi.get(__response__, 'scope_id'),
        scopes=pulumi.get(__response__, 'scopes')))
