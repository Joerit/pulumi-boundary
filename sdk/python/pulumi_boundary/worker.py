# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['WorkerArgs', 'Worker']

@pulumi.input_type
class WorkerArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 worker_generated_auth_token: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Worker resource.
        :param pulumi.Input[str] description: The description for the worker.
        :param pulumi.Input[str] name: The name for the worker.
        :param pulumi.Input[str] scope_id: The scope for the worker. Defaults to `global`.
        :param pulumi.Input[str] worker_generated_auth_token: The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope_id is not None:
            pulumi.set(__self__, "scope_id", scope_id)
        if worker_generated_auth_token is not None:
            pulumi.set(__self__, "worker_generated_auth_token", worker_generated_auth_token)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for the worker.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the worker.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope for the worker. Defaults to `global`.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter(name="workerGeneratedAuthToken")
    def worker_generated_auth_token(self) -> Optional[pulumi.Input[str]]:
        """
        The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        """
        return pulumi.get(self, "worker_generated_auth_token")

    @worker_generated_auth_token.setter
    def worker_generated_auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_generated_auth_token", value)


@pulumi.input_type
class _WorkerState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 authorized_actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 controller_generated_activation_token: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release_version: Optional[pulumi.Input[int]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 worker_generated_auth_token: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Worker resources.
        :param pulumi.Input[str] address: The accessible address of the self managed worker.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authorized_actions: A list of actions that the worker is entitled to perform.
        :param pulumi.Input[str] controller_generated_activation_token: A single use token generated by the controller to be passed to the self-managed worker.
        :param pulumi.Input[str] description: The description for the worker.
        :param pulumi.Input[str] name: The name for the worker.
        :param pulumi.Input[int] release_version: The version of the Boundary binary running on the self managed worker.
        :param pulumi.Input[str] scope_id: The scope for the worker. Defaults to `global`.
        :param pulumi.Input[str] worker_generated_auth_token: The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if authorized_actions is not None:
            pulumi.set(__self__, "authorized_actions", authorized_actions)
        if controller_generated_activation_token is not None:
            pulumi.set(__self__, "controller_generated_activation_token", controller_generated_activation_token)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release_version is not None:
            pulumi.set(__self__, "release_version", release_version)
        if scope_id is not None:
            pulumi.set(__self__, "scope_id", scope_id)
        if worker_generated_auth_token is not None:
            pulumi.set(__self__, "worker_generated_auth_token", worker_generated_auth_token)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        The accessible address of the self managed worker.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="authorizedActions")
    def authorized_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of actions that the worker is entitled to perform.
        """
        return pulumi.get(self, "authorized_actions")

    @authorized_actions.setter
    def authorized_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorized_actions", value)

    @property
    @pulumi.getter(name="controllerGeneratedActivationToken")
    def controller_generated_activation_token(self) -> Optional[pulumi.Input[str]]:
        """
        A single use token generated by the controller to be passed to the self-managed worker.
        """
        return pulumi.get(self, "controller_generated_activation_token")

    @controller_generated_activation_token.setter
    def controller_generated_activation_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller_generated_activation_token", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for the worker.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the worker.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> Optional[pulumi.Input[int]]:
        """
        The version of the Boundary binary running on the self managed worker.
        """
        return pulumi.get(self, "release_version")

    @release_version.setter
    def release_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "release_version", value)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope for the worker. Defaults to `global`.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter(name="workerGeneratedAuthToken")
    def worker_generated_auth_token(self) -> Optional[pulumi.Input[str]]:
        """
        The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        """
        return pulumi.get(self, "worker_generated_auth_token")

    @worker_generated_auth_token.setter
    def worker_generated_auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_generated_auth_token", value)


class Worker(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 worker_generated_auth_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The resource allows you to create a self-managed worker object.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_boundary as boundary

        controller_led = boundary.Worker("controller_led",
            scope_id="global",
            name="worker 1",
            description="self managed worker with controller led auth")
        worker_led = boundary.Worker("worker_led",
            scope_id="global",
            name="worker 2",
            description="self managed worker with worker led auth",
            worker_generated_auth_token=worker_generated_auth_token)
        ```

        ## Import

        ```sh
        $ pulumi import boundary:index/worker:Worker foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description for the worker.
        :param pulumi.Input[str] name: The name for the worker.
        :param pulumi.Input[str] scope_id: The scope for the worker. Defaults to `global`.
        :param pulumi.Input[str] worker_generated_auth_token: The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WorkerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The resource allows you to create a self-managed worker object.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_boundary as boundary

        controller_led = boundary.Worker("controller_led",
            scope_id="global",
            name="worker 1",
            description="self managed worker with controller led auth")
        worker_led = boundary.Worker("worker_led",
            scope_id="global",
            name="worker 2",
            description="self managed worker with worker led auth",
            worker_generated_auth_token=worker_generated_auth_token)
        ```

        ## Import

        ```sh
        $ pulumi import boundary:index/worker:Worker foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param WorkerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 worker_generated_auth_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkerArgs.__new__(WorkerArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["scope_id"] = scope_id
            __props__.__dict__["worker_generated_auth_token"] = worker_generated_auth_token
            __props__.__dict__["address"] = None
            __props__.__dict__["authorized_actions"] = None
            __props__.__dict__["controller_generated_activation_token"] = None
            __props__.__dict__["release_version"] = None
        super(Worker, __self__).__init__(
            'boundary:index/worker:Worker',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[str]] = None,
            authorized_actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            controller_generated_activation_token: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            release_version: Optional[pulumi.Input[int]] = None,
            scope_id: Optional[pulumi.Input[str]] = None,
            worker_generated_auth_token: Optional[pulumi.Input[str]] = None) -> 'Worker':
        """
        Get an existing Worker resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: The accessible address of the self managed worker.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authorized_actions: A list of actions that the worker is entitled to perform.
        :param pulumi.Input[str] controller_generated_activation_token: A single use token generated by the controller to be passed to the self-managed worker.
        :param pulumi.Input[str] description: The description for the worker.
        :param pulumi.Input[str] name: The name for the worker.
        :param pulumi.Input[int] release_version: The version of the Boundary binary running on the self managed worker.
        :param pulumi.Input[str] scope_id: The scope for the worker. Defaults to `global`.
        :param pulumi.Input[str] worker_generated_auth_token: The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkerState.__new__(_WorkerState)

        __props__.__dict__["address"] = address
        __props__.__dict__["authorized_actions"] = authorized_actions
        __props__.__dict__["controller_generated_activation_token"] = controller_generated_activation_token
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["release_version"] = release_version
        __props__.__dict__["scope_id"] = scope_id
        __props__.__dict__["worker_generated_auth_token"] = worker_generated_auth_token
        return Worker(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        The accessible address of the self managed worker.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="authorizedActions")
    def authorized_actions(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of actions that the worker is entitled to perform.
        """
        return pulumi.get(self, "authorized_actions")

    @property
    @pulumi.getter(name="controllerGeneratedActivationToken")
    def controller_generated_activation_token(self) -> pulumi.Output[str]:
        """
        A single use token generated by the controller to be passed to the self-managed worker.
        """
        return pulumi.get(self, "controller_generated_activation_token")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description for the worker.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name for the worker.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> pulumi.Output[int]:
        """
        The version of the Boundary binary running on the self managed worker.
        """
        return pulumi.get(self, "release_version")

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Output[Optional[str]]:
        """
        The scope for the worker. Defaults to `global`.
        """
        return pulumi.get(self, "scope_id")

    @property
    @pulumi.getter(name="workerGeneratedAuthToken")
    def worker_generated_auth_token(self) -> pulumi.Output[Optional[str]]:
        """
        The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this blank will result in a controller generated token.
        """
        return pulumi.get(self, "worker_generated_auth_token")

